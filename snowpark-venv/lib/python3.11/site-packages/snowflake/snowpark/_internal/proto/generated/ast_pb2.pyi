"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
N.B. This file is generated by `//Snowpark/ir-dsl-c`. DO NOT EDIT!
Generated from `{git@github.com:snowflakedb/snowflake.git}/Snowpark/ast`.
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.wrappers_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class ___Version__:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class ___Version__EnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[___Version__.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    PROTO3_REQUIRES_THIS: ___Version__.ValueType  # 0
    MAX_VERSION: ___Version__.ValueType  # 1

class __Version__(___Version__, metaclass=___Version__EnumTypeWrapper): ...

PROTO3_REQUIRES_THIS: __Version__.ValueType  # 0
MAX_VERSION: __Version__.ValueType  # 1
global_____Version__ = __Version__

@typing.final
class InternedValueTable(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class StringValuesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.int
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.int = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    STRING_VALUES_FIELD_NUMBER: builtins.int
    @property
    def string_values(self) -> google.protobuf.internal.containers.ScalarMap[builtins.int, builtins.str]: ...
    def __init__(
        self,
        *,
        string_values: collections.abc.Mapping[builtins.int, builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["string_values", b"string_values"]) -> None: ...

global___InternedValueTable = InternedValueTable

@typing.final
class List_Expr(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LIST_FIELD_NUMBER: builtins.int
    @property
    def list(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Expr]: ...
    def __init__(
        self,
        *,
        list: collections.abc.Iterable[global___Expr] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["list", b"list"]) -> None: ...

global___List_Expr = List_Expr

@typing.final
class List_SpDataType(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LIST_FIELD_NUMBER: builtins.int
    @property
    def list(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SpDataType]: ...
    def __init__(
        self,
        *,
        list: collections.abc.Iterable[global___SpDataType] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["list", b"list"]) -> None: ...

global___List_SpDataType = List_SpDataType

@typing.final
class List_SpStructField(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LIST_FIELD_NUMBER: builtins.int
    @property
    def list(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SpStructField]: ...
    def __init__(
        self,
        *,
        list: collections.abc.Iterable[global___SpStructField] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["list", b"list"]) -> None: ...

global___List_SpStructField = List_SpStructField

@typing.final
class List_String(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LIST_FIELD_NUMBER: builtins.int
    @property
    def list(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        list: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["list", b"list"]) -> None: ...

global___List_String = List_String

@typing.final
class Map_Expr_Expr(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LIST_FIELD_NUMBER: builtins.int
    @property
    def list(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_Expr_Expr]: ...
    def __init__(
        self,
        *,
        list: collections.abc.Iterable[global___Tuple_Expr_Expr] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["list", b"list"]) -> None: ...

global___Map_Expr_Expr = Map_Expr_Expr

@typing.final
class Map_String_Expr(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LIST_FIELD_NUMBER: builtins.int
    @property
    def list(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_Expr]: ...
    def __init__(
        self,
        *,
        list: collections.abc.Iterable[global___Tuple_String_Expr] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["list", b"list"]) -> None: ...

global___Map_String_Expr = Map_String_Expr

@typing.final
class Tuple_Expr_Expr(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    _1_FIELD_NUMBER: builtins.int
    _2_FIELD_NUMBER: builtins.int
    @property
    def _1(self) -> global___Expr: ...
    @property
    def _2(self) -> global___Expr: ...
    def __init__(
        self,
        *,
        _1: global___Expr | None = ...,
        _2: global___Expr | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_1", b"_1", "_2", b"_2"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_1", b"_1", "_2", b"_2"]) -> None: ...

global___Tuple_Expr_Expr = Tuple_Expr_Expr

@typing.final
class Tuple_Expr_Float(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    _1_FIELD_NUMBER: builtins.int
    _2_FIELD_NUMBER: builtins.int
    _2: builtins.float
    @property
    def _1(self) -> global___Expr: ...
    def __init__(
        self,
        *,
        _1: global___Expr | None = ...,
        _2: builtins.float = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_1", b"_1"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_1", b"_1", "_2", b"_2"]) -> None: ...

global___Tuple_Expr_Float = Tuple_Expr_Float

@typing.final
class Tuple_String_Expr(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    _1_FIELD_NUMBER: builtins.int
    _2_FIELD_NUMBER: builtins.int
    _1: builtins.str
    @property
    def _2(self) -> global___Expr: ...
    def __init__(
        self,
        *,
        _1: builtins.str = ...,
        _2: global___Expr | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_2", b"_2"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_1", b"_1", "_2", b"_2"]) -> None: ...

global___Tuple_String_Expr = Tuple_String_Expr

@typing.final
class Tuple_String_List_String(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    _1_FIELD_NUMBER: builtins.int
    _2_FIELD_NUMBER: builtins.int
    _1: builtins.str
    @property
    def _2(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        _1: builtins.str = ...,
        _2: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["_1", b"_1", "_2", b"_2"]) -> None: ...

global___Tuple_String_List_String = Tuple_String_List_String

@typing.final
class Tuple_String_String(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    _1_FIELD_NUMBER: builtins.int
    _2_FIELD_NUMBER: builtins.int
    _1: builtins.str
    _2: builtins.str
    def __init__(
        self,
        *,
        _1: builtins.str = ...,
        _2: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["_1", b"_1", "_2", b"_2"]) -> None: ...

global___Tuple_String_String = Tuple_String_String

@typing.final
class Language(google.protobuf.message.Message):
    """ast.ir:17"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    JAVA_LANGUAGE_FIELD_NUMBER: builtins.int
    PYTHON_LANGUAGE_FIELD_NUMBER: builtins.int
    SCALA_LANGUAGE_FIELD_NUMBER: builtins.int
    @property
    def java_language(self) -> global___JavaLanguage: ...
    @property
    def python_language(self) -> global___PythonLanguage: ...
    @property
    def scala_language(self) -> global___ScalaLanguage: ...
    def __init__(
        self,
        *,
        java_language: global___JavaLanguage | None = ...,
        python_language: global___PythonLanguage | None = ...,
        scala_language: global___ScalaLanguage | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["java_language", b"java_language", "python_language", b"python_language", "scala_language", b"scala_language", "sealed_value", b"sealed_value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["java_language", b"java_language", "python_language", b"python_language", "scala_language", b"scala_language", "sealed_value", b"sealed_value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["sealed_value", b"sealed_value"]) -> typing.Literal["java_language", "python_language", "scala_language"] | None: ...

global___Language = Language

@typing.final
class PythonLanguage(google.protobuf.message.Message):
    """ast.ir:18"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VERSION_FIELD_NUMBER: builtins.int
    @property
    def version(self) -> global___Version: ...
    def __init__(
        self,
        *,
        version: global___Version | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["version", b"version"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["version", b"version"]) -> None: ...

global___PythonLanguage = PythonLanguage

@typing.final
class ScalaLanguage(google.protobuf.message.Message):
    """ast.ir:19"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VERSION_FIELD_NUMBER: builtins.int
    @property
    def version(self) -> global___Version: ...
    def __init__(
        self,
        *,
        version: global___Version | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["version", b"version"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["version", b"version"]) -> None: ...

global___ScalaLanguage = ScalaLanguage

@typing.final
class JavaLanguage(google.protobuf.message.Message):
    """ast.ir:20"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VERSION_FIELD_NUMBER: builtins.int
    @property
    def version(self) -> global___Version: ...
    def __init__(
        self,
        *,
        version: global___Version | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["version", b"version"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["version", b"version"]) -> None: ...

global___JavaLanguage = JavaLanguage

@typing.final
class PythonTimeZone(google.protobuf.message.Message):
    """const.ir:81"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    OFFSET_SECONDS_FIELD_NUMBER: builtins.int
    offset_seconds: builtins.int
    @property
    def name(self) -> google.protobuf.wrappers_pb2.StringValue: ...
    def __init__(
        self,
        *,
        name: google.protobuf.wrappers_pb2.StringValue | None = ...,
        offset_seconds: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["name", b"name"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["name", b"name", "offset_seconds", b"offset_seconds"]) -> None: ...

global___PythonTimeZone = PythonTimeZone

@typing.final
class SpCallable(google.protobuf.message.Message):
    """fn.ir:28"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    OBJECT_NAME_FIELD_NUMBER: builtins.int
    id: builtins.int
    name: builtins.str
    @property
    def object_name(self) -> global___SpNameRef: ...
    def __init__(
        self,
        *,
        id: builtins.int = ...,
        name: builtins.str = ...,
        object_name: global___SpNameRef | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["object_name", b"object_name"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["id", b"id", "name", b"name", "object_name", b"object_name"]) -> None: ...

global___SpCallable = SpCallable

@typing.final
class SpColumnAliasFn(google.protobuf.message.Message):
    """column.ir:34"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SP_COLUMN_ALIAS_FN_ALIAS_FIELD_NUMBER: builtins.int
    SP_COLUMN_ALIAS_FN_AS_FIELD_NUMBER: builtins.int
    SP_COLUMN_ALIAS_FN_NAME_FIELD_NUMBER: builtins.int
    sp_column_alias_fn_alias: builtins.bool
    sp_column_alias_fn_as: builtins.bool
    sp_column_alias_fn_name: builtins.bool
    def __init__(
        self,
        *,
        sp_column_alias_fn_alias: builtins.bool = ...,
        sp_column_alias_fn_as: builtins.bool = ...,
        sp_column_alias_fn_name: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["sp_column_alias_fn_alias", b"sp_column_alias_fn_alias", "sp_column_alias_fn_as", b"sp_column_alias_fn_as", "sp_column_alias_fn_name", b"sp_column_alias_fn_name", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["sp_column_alias_fn_alias", b"sp_column_alias_fn_alias", "sp_column_alias_fn_as", b"sp_column_alias_fn_as", "sp_column_alias_fn_name", b"sp_column_alias_fn_name", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["sp_column_alias_fn_alias", "sp_column_alias_fn_as", "sp_column_alias_fn_name"] | None: ...

global___SpColumnAliasFn = SpColumnAliasFn

@typing.final
class SpColumnRef(google.protobuf.message.Message):
    """type.ir:31"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SP_COLUMN_IDENTIFIER_FIELD_NUMBER: builtins.int
    SP_COLUMN_NAME_FIELD_NUMBER: builtins.int
    @property
    def sp_column_identifier(self) -> global___SpColumnIdentifier: ...
    @property
    def sp_column_name(self) -> global___SpColumnName: ...
    def __init__(
        self,
        *,
        sp_column_identifier: global___SpColumnIdentifier | None = ...,
        sp_column_name: global___SpColumnName | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["sealed_value", b"sealed_value", "sp_column_identifier", b"sp_column_identifier", "sp_column_name", b"sp_column_name"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["sealed_value", b"sealed_value", "sp_column_identifier", b"sp_column_identifier", "sp_column_name", b"sp_column_name"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["sealed_value", b"sealed_value"]) -> typing.Literal["sp_column_identifier", "sp_column_name"] | None: ...

global___SpColumnRef = SpColumnRef

@typing.final
class SpColumnIdentifier(google.protobuf.message.Message):
    """type.ir:32"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    name: builtins.str
    def __init__(
        self,
        *,
        name: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["name", b"name"]) -> None: ...

global___SpColumnIdentifier = SpColumnIdentifier

@typing.final
class SpColumnName(google.protobuf.message.Message):
    """type.ir:33"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    name: builtins.str
    def __init__(
        self,
        *,
        name: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["name", b"name"]) -> None: ...

global___SpColumnName = SpColumnName

@typing.final
class SpDataType(google.protobuf.message.Message):
    """type.ir:1"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SP_ARRAY_TYPE_FIELD_NUMBER: builtins.int
    SP_BINARY_TYPE_FIELD_NUMBER: builtins.int
    SP_BOOLEAN_TYPE_FIELD_NUMBER: builtins.int
    SP_BYTE_TYPE_FIELD_NUMBER: builtins.int
    SP_DATE_TYPE_FIELD_NUMBER: builtins.int
    SP_DECIMAL_TYPE_FIELD_NUMBER: builtins.int
    SP_DOUBLE_TYPE_FIELD_NUMBER: builtins.int
    SP_FLOAT_TYPE_FIELD_NUMBER: builtins.int
    SP_GEOGRAPHY_TYPE_FIELD_NUMBER: builtins.int
    SP_GEOMETRY_TYPE_FIELD_NUMBER: builtins.int
    SP_INTEGER_TYPE_FIELD_NUMBER: builtins.int
    SP_LONG_TYPE_FIELD_NUMBER: builtins.int
    SP_MAP_TYPE_FIELD_NUMBER: builtins.int
    SP_NULL_TYPE_FIELD_NUMBER: builtins.int
    SP_PANDAS_DATA_FRAME_TYPE_FIELD_NUMBER: builtins.int
    SP_PANDAS_SERIES_TYPE_FIELD_NUMBER: builtins.int
    SP_SHORT_TYPE_FIELD_NUMBER: builtins.int
    SP_STRING_TYPE_FIELD_NUMBER: builtins.int
    SP_STRUCT_FIELD_FIELD_NUMBER: builtins.int
    SP_STRUCT_TYPE_FIELD_NUMBER: builtins.int
    SP_TIME_TYPE_FIELD_NUMBER: builtins.int
    SP_TIMESTAMP_TYPE_FIELD_NUMBER: builtins.int
    SP_VARIANT_TYPE_FIELD_NUMBER: builtins.int
    SP_VECTOR_TYPE_FIELD_NUMBER: builtins.int
    sp_binary_type: builtins.bool
    sp_boolean_type: builtins.bool
    sp_byte_type: builtins.bool
    sp_date_type: builtins.bool
    sp_double_type: builtins.bool
    sp_float_type: builtins.bool
    sp_geography_type: builtins.bool
    sp_geometry_type: builtins.bool
    sp_integer_type: builtins.bool
    sp_long_type: builtins.bool
    sp_null_type: builtins.bool
    sp_short_type: builtins.bool
    sp_time_type: builtins.bool
    sp_variant_type: builtins.bool
    @property
    def sp_array_type(self) -> global___SpArrayType: ...
    @property
    def sp_decimal_type(self) -> global___SpDecimalType: ...
    @property
    def sp_map_type(self) -> global___SpMapType: ...
    @property
    def sp_pandas_data_frame_type(self) -> global___SpPandasDataFrameType: ...
    @property
    def sp_pandas_series_type(self) -> global___SpPandasSeriesType: ...
    @property
    def sp_string_type(self) -> global___SpStringType: ...
    @property
    def sp_struct_field(self) -> global___SpStructField: ...
    @property
    def sp_struct_type(self) -> global___SpStructType: ...
    @property
    def sp_timestamp_type(self) -> global___SpTimestampType: ...
    @property
    def sp_vector_type(self) -> global___SpVectorType: ...
    def __init__(
        self,
        *,
        sp_array_type: global___SpArrayType | None = ...,
        sp_binary_type: builtins.bool = ...,
        sp_boolean_type: builtins.bool = ...,
        sp_byte_type: builtins.bool = ...,
        sp_date_type: builtins.bool = ...,
        sp_decimal_type: global___SpDecimalType | None = ...,
        sp_double_type: builtins.bool = ...,
        sp_float_type: builtins.bool = ...,
        sp_geography_type: builtins.bool = ...,
        sp_geometry_type: builtins.bool = ...,
        sp_integer_type: builtins.bool = ...,
        sp_long_type: builtins.bool = ...,
        sp_map_type: global___SpMapType | None = ...,
        sp_null_type: builtins.bool = ...,
        sp_pandas_data_frame_type: global___SpPandasDataFrameType | None = ...,
        sp_pandas_series_type: global___SpPandasSeriesType | None = ...,
        sp_short_type: builtins.bool = ...,
        sp_string_type: global___SpStringType | None = ...,
        sp_struct_field: global___SpStructField | None = ...,
        sp_struct_type: global___SpStructType | None = ...,
        sp_time_type: builtins.bool = ...,
        sp_timestamp_type: global___SpTimestampType | None = ...,
        sp_variant_type: builtins.bool = ...,
        sp_vector_type: global___SpVectorType | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["sp_array_type", b"sp_array_type", "sp_binary_type", b"sp_binary_type", "sp_boolean_type", b"sp_boolean_type", "sp_byte_type", b"sp_byte_type", "sp_date_type", b"sp_date_type", "sp_decimal_type", b"sp_decimal_type", "sp_double_type", b"sp_double_type", "sp_float_type", b"sp_float_type", "sp_geography_type", b"sp_geography_type", "sp_geometry_type", b"sp_geometry_type", "sp_integer_type", b"sp_integer_type", "sp_long_type", b"sp_long_type", "sp_map_type", b"sp_map_type", "sp_null_type", b"sp_null_type", "sp_pandas_data_frame_type", b"sp_pandas_data_frame_type", "sp_pandas_series_type", b"sp_pandas_series_type", "sp_short_type", b"sp_short_type", "sp_string_type", b"sp_string_type", "sp_struct_field", b"sp_struct_field", "sp_struct_type", b"sp_struct_type", "sp_time_type", b"sp_time_type", "sp_timestamp_type", b"sp_timestamp_type", "sp_variant_type", b"sp_variant_type", "sp_vector_type", b"sp_vector_type", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["sp_array_type", b"sp_array_type", "sp_binary_type", b"sp_binary_type", "sp_boolean_type", b"sp_boolean_type", "sp_byte_type", b"sp_byte_type", "sp_date_type", b"sp_date_type", "sp_decimal_type", b"sp_decimal_type", "sp_double_type", b"sp_double_type", "sp_float_type", b"sp_float_type", "sp_geography_type", b"sp_geography_type", "sp_geometry_type", b"sp_geometry_type", "sp_integer_type", b"sp_integer_type", "sp_long_type", b"sp_long_type", "sp_map_type", b"sp_map_type", "sp_null_type", b"sp_null_type", "sp_pandas_data_frame_type", b"sp_pandas_data_frame_type", "sp_pandas_series_type", b"sp_pandas_series_type", "sp_short_type", b"sp_short_type", "sp_string_type", b"sp_string_type", "sp_struct_field", b"sp_struct_field", "sp_struct_type", b"sp_struct_type", "sp_time_type", b"sp_time_type", "sp_timestamp_type", b"sp_timestamp_type", "sp_variant_type", b"sp_variant_type", "sp_vector_type", b"sp_vector_type", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["sp_array_type", "sp_binary_type", "sp_boolean_type", "sp_byte_type", "sp_date_type", "sp_decimal_type", "sp_double_type", "sp_float_type", "sp_geography_type", "sp_geometry_type", "sp_integer_type", "sp_long_type", "sp_map_type", "sp_null_type", "sp_pandas_data_frame_type", "sp_pandas_series_type", "sp_short_type", "sp_string_type", "sp_struct_field", "sp_struct_type", "sp_time_type", "sp_timestamp_type", "sp_variant_type", "sp_vector_type"] | None: ...

global___SpDataType = SpDataType

@typing.final
class SpArrayType(google.protobuf.message.Message):
    """type.ir:3"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STRUCTURED_FIELD_NUMBER: builtins.int
    TY_FIELD_NUMBER: builtins.int
    structured: builtins.bool
    @property
    def ty(self) -> global___SpDataType: ...
    def __init__(
        self,
        *,
        structured: builtins.bool = ...,
        ty: global___SpDataType | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["ty", b"ty"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["structured", b"structured", "ty", b"ty"]) -> None: ...

global___SpArrayType = SpArrayType

@typing.final
class SpDecimalType(google.protobuf.message.Message):
    """type.ir:8"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PRECISION_FIELD_NUMBER: builtins.int
    SCALE_FIELD_NUMBER: builtins.int
    precision: builtins.int
    scale: builtins.int
    def __init__(
        self,
        *,
        precision: builtins.int = ...,
        scale: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["precision", b"precision", "scale", b"scale"]) -> None: ...

global___SpDecimalType = SpDecimalType

@typing.final
class SpMapType(google.protobuf.message.Message):
    """type.ir:15"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_TY_FIELD_NUMBER: builtins.int
    STRUCTURED_FIELD_NUMBER: builtins.int
    VALUE_TY_FIELD_NUMBER: builtins.int
    structured: builtins.bool
    @property
    def key_ty(self) -> global___SpDataType: ...
    @property
    def value_ty(self) -> global___SpDataType: ...
    def __init__(
        self,
        *,
        key_ty: global___SpDataType | None = ...,
        structured: builtins.bool = ...,
        value_ty: global___SpDataType | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["key_ty", b"key_ty", "value_ty", b"value_ty"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["key_ty", b"key_ty", "structured", b"structured", "value_ty", b"value_ty"]) -> None: ...

global___SpMapType = SpMapType

@typing.final
class SpStringType(google.protobuf.message.Message):
    """type.ir:18"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LENGTH_FIELD_NUMBER: builtins.int
    @property
    def length(self) -> google.protobuf.wrappers_pb2.Int64Value: ...
    def __init__(
        self,
        *,
        length: google.protobuf.wrappers_pb2.Int64Value | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["length", b"length"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["length", b"length"]) -> None: ...

global___SpStringType = SpStringType

@typing.final
class SpStructField(google.protobuf.message.Message):
    """type.ir:19"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COLUMN_IDENTIFIER_FIELD_NUMBER: builtins.int
    DATA_TYPE_FIELD_NUMBER: builtins.int
    NULLABLE_FIELD_NUMBER: builtins.int
    nullable: builtins.bool
    @property
    def column_identifier(self) -> global___SpColumnRef: ...
    @property
    def data_type(self) -> global___SpDataType: ...
    def __init__(
        self,
        *,
        column_identifier: global___SpColumnRef | None = ...,
        data_type: global___SpDataType | None = ...,
        nullable: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["column_identifier", b"column_identifier", "data_type", b"data_type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["column_identifier", b"column_identifier", "data_type", b"data_type", "nullable", b"nullable"]) -> None: ...

global___SpStructField = SpStructField

@typing.final
class SpStructType(google.protobuf.message.Message):
    """type.ir:20"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FIELDS_FIELD_NUMBER: builtins.int
    STRUCTURED_FIELD_NUMBER: builtins.int
    structured: builtins.bool
    @property
    def fields(self) -> global___List_SpStructField: ...
    def __init__(
        self,
        *,
        fields: global___List_SpStructField | None = ...,
        structured: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["fields", b"fields"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["fields", b"fields", "structured", b"structured"]) -> None: ...

global___SpStructType = SpStructType

@typing.final
class SpTimestampType(google.protobuf.message.Message):
    """type.ir:22"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TIME_ZONE_FIELD_NUMBER: builtins.int
    @property
    def time_zone(self) -> global___SpTimestampTimeZone: ...
    def __init__(
        self,
        *,
        time_zone: global___SpTimestampTimeZone | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["time_zone", b"time_zone"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["time_zone", b"time_zone"]) -> None: ...

global___SpTimestampType = SpTimestampType

@typing.final
class SpVectorType(google.protobuf.message.Message):
    """type.ir:24"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DIMENSION_FIELD_NUMBER: builtins.int
    TY_FIELD_NUMBER: builtins.int
    dimension: builtins.int
    @property
    def ty(self) -> global___SpDataType: ...
    def __init__(
        self,
        *,
        dimension: builtins.int = ...,
        ty: global___SpDataType | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["ty", b"ty"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["dimension", b"dimension", "ty", b"ty"]) -> None: ...

global___SpVectorType = SpVectorType

@typing.final
class SpPandasSeriesType(google.protobuf.message.Message):
    """type.ir:26"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    EL_TY_FIELD_NUMBER: builtins.int
    @property
    def el_ty(self) -> global___SpDataType: ...
    def __init__(
        self,
        *,
        el_ty: global___SpDataType | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["el_ty", b"el_ty"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["el_ty", b"el_ty"]) -> None: ...

global___SpPandasSeriesType = SpPandasSeriesType

@typing.final
class SpPandasDataFrameType(google.protobuf.message.Message):
    """type.ir:27"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL_NAMES_FIELD_NUMBER: builtins.int
    COL_TYPES_FIELD_NUMBER: builtins.int
    @property
    def col_names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def col_types(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SpDataType]: ...
    def __init__(
        self,
        *,
        col_names: collections.abc.Iterable[builtins.str] | None = ...,
        col_types: collections.abc.Iterable[global___SpDataType] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["col_names", b"col_names", "col_types", b"col_types"]) -> None: ...

global___SpPandasDataFrameType = SpPandasDataFrameType

@typing.final
class SpDataframeData(google.protobuf.message.Message):
    """dataframe.ir:73"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SP_DATAFRAME_DATA__LIST_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_DATA__PANDAS_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_DATA__TUPLE_FIELD_NUMBER: builtins.int
    @property
    def sp_dataframe_data__list(self) -> global___SpDataframeData_List: ...
    @property
    def sp_dataframe_data__pandas(self) -> global___SpDataframeData_Pandas: ...
    @property
    def sp_dataframe_data__tuple(self) -> global___SpDataframeData_Tuple: ...
    def __init__(
        self,
        *,
        sp_dataframe_data__list: global___SpDataframeData_List | None = ...,
        sp_dataframe_data__pandas: global___SpDataframeData_Pandas | None = ...,
        sp_dataframe_data__tuple: global___SpDataframeData_Tuple | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["sealed_value", b"sealed_value", "sp_dataframe_data__list", b"sp_dataframe_data__list", "sp_dataframe_data__pandas", b"sp_dataframe_data__pandas", "sp_dataframe_data__tuple", b"sp_dataframe_data__tuple"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["sealed_value", b"sealed_value", "sp_dataframe_data__list", b"sp_dataframe_data__list", "sp_dataframe_data__pandas", b"sp_dataframe_data__pandas", "sp_dataframe_data__tuple", b"sp_dataframe_data__tuple"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["sealed_value", b"sealed_value"]) -> typing.Literal["sp_dataframe_data__list", "sp_dataframe_data__pandas", "sp_dataframe_data__tuple"] | None: ...

global___SpDataframeData = SpDataframeData

@typing.final
class SpDataframeData_List(google.protobuf.message.Message):
    """dataframe.ir:74"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VS_FIELD_NUMBER: builtins.int
    @property
    def vs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Expr]: ...
    def __init__(
        self,
        *,
        vs: collections.abc.Iterable[global___Expr] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["vs", b"vs"]) -> None: ...

global___SpDataframeData_List = SpDataframeData_List

@typing.final
class SpDataframeData_Tuple(google.protobuf.message.Message):
    """dataframe.ir:75"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VS_FIELD_NUMBER: builtins.int
    @property
    def vs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Expr]: ...
    def __init__(
        self,
        *,
        vs: collections.abc.Iterable[global___Expr] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["vs", b"vs"]) -> None: ...

global___SpDataframeData_Tuple = SpDataframeData_Tuple

@typing.final
class SpDataframeData_Pandas(google.protobuf.message.Message):
    """dataframe.ir:76"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    V_FIELD_NUMBER: builtins.int
    @property
    def v(self) -> global___StagedPandasDataframe: ...
    def __init__(
        self,
        *,
        v: global___StagedPandasDataframe | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["v", b"v"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["v", b"v"]) -> None: ...

global___SpDataframeData_Pandas = SpDataframeData_Pandas

@typing.final
class SpDataframeSchema(google.protobuf.message.Message):
    """type.ir:43"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SP_DATAFRAME_SCHEMA__LIST_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_SCHEMA__STRUCT_FIELD_NUMBER: builtins.int
    @property
    def sp_dataframe_schema__list(self) -> global___SpDataframeSchema_List: ...
    @property
    def sp_dataframe_schema__struct(self) -> global___SpDataframeSchema_Struct: ...
    def __init__(
        self,
        *,
        sp_dataframe_schema__list: global___SpDataframeSchema_List | None = ...,
        sp_dataframe_schema__struct: global___SpDataframeSchema_Struct | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["sealed_value", b"sealed_value", "sp_dataframe_schema__list", b"sp_dataframe_schema__list", "sp_dataframe_schema__struct", b"sp_dataframe_schema__struct"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["sealed_value", b"sealed_value", "sp_dataframe_schema__list", b"sp_dataframe_schema__list", "sp_dataframe_schema__struct", b"sp_dataframe_schema__struct"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["sealed_value", b"sealed_value"]) -> typing.Literal["sp_dataframe_schema__list", "sp_dataframe_schema__struct"] | None: ...

global___SpDataframeSchema = SpDataframeSchema

@typing.final
class SpDataframeSchema_List(google.protobuf.message.Message):
    """type.ir:44"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VS_FIELD_NUMBER: builtins.int
    @property
    def vs(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        vs: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["vs", b"vs"]) -> None: ...

global___SpDataframeSchema_List = SpDataframeSchema_List

@typing.final
class SpDataframeSchema_Struct(google.protobuf.message.Message):
    """type.ir:45"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    V_FIELD_NUMBER: builtins.int
    @property
    def v(self) -> global___SpStructType: ...
    def __init__(
        self,
        *,
        v: global___SpStructType | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["v", b"v"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["v", b"v"]) -> None: ...

global___SpDataframeSchema_Struct = SpDataframeSchema_Struct

@typing.final
class SpFlattenMode(google.protobuf.message.Message):
    """dataframe.ir:91"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SP_FLATTEN_MODE_ARRAY_FIELD_NUMBER: builtins.int
    SP_FLATTEN_MODE_BOTH_FIELD_NUMBER: builtins.int
    SP_FLATTEN_MODE_OBJECT_FIELD_NUMBER: builtins.int
    sp_flatten_mode_array: builtins.bool
    sp_flatten_mode_both: builtins.bool
    sp_flatten_mode_object: builtins.bool
    def __init__(
        self,
        *,
        sp_flatten_mode_array: builtins.bool = ...,
        sp_flatten_mode_both: builtins.bool = ...,
        sp_flatten_mode_object: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["sp_flatten_mode_array", b"sp_flatten_mode_array", "sp_flatten_mode_both", b"sp_flatten_mode_both", "sp_flatten_mode_object", b"sp_flatten_mode_object", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["sp_flatten_mode_array", b"sp_flatten_mode_array", "sp_flatten_mode_both", b"sp_flatten_mode_both", "sp_flatten_mode_object", b"sp_flatten_mode_object", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["sp_flatten_mode_array", "sp_flatten_mode_both", "sp_flatten_mode_object"] | None: ...

global___SpFlattenMode = SpFlattenMode

@typing.final
class SpJoinType(google.protobuf.message.Message):
    """dataframe.ir:245"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SP_JOIN_TYPE__ASOF_FIELD_NUMBER: builtins.int
    SP_JOIN_TYPE__CROSS_FIELD_NUMBER: builtins.int
    SP_JOIN_TYPE__FULL_OUTER_FIELD_NUMBER: builtins.int
    SP_JOIN_TYPE__INNER_FIELD_NUMBER: builtins.int
    SP_JOIN_TYPE__LEFT_ANTI_FIELD_NUMBER: builtins.int
    SP_JOIN_TYPE__LEFT_OUTER_FIELD_NUMBER: builtins.int
    SP_JOIN_TYPE__LEFT_SEMI_FIELD_NUMBER: builtins.int
    SP_JOIN_TYPE__RIGHT_OUTER_FIELD_NUMBER: builtins.int
    sp_join_type__asof: builtins.bool
    sp_join_type__cross: builtins.bool
    sp_join_type__full_outer: builtins.bool
    sp_join_type__inner: builtins.bool
    sp_join_type__left_anti: builtins.bool
    sp_join_type__left_outer: builtins.bool
    sp_join_type__left_semi: builtins.bool
    sp_join_type__right_outer: builtins.bool
    def __init__(
        self,
        *,
        sp_join_type__asof: builtins.bool = ...,
        sp_join_type__cross: builtins.bool = ...,
        sp_join_type__full_outer: builtins.bool = ...,
        sp_join_type__inner: builtins.bool = ...,
        sp_join_type__left_anti: builtins.bool = ...,
        sp_join_type__left_outer: builtins.bool = ...,
        sp_join_type__left_semi: builtins.bool = ...,
        sp_join_type__right_outer: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["sp_join_type__asof", b"sp_join_type__asof", "sp_join_type__cross", b"sp_join_type__cross", "sp_join_type__full_outer", b"sp_join_type__full_outer", "sp_join_type__inner", b"sp_join_type__inner", "sp_join_type__left_anti", b"sp_join_type__left_anti", "sp_join_type__left_outer", b"sp_join_type__left_outer", "sp_join_type__left_semi", b"sp_join_type__left_semi", "sp_join_type__right_outer", b"sp_join_type__right_outer", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["sp_join_type__asof", b"sp_join_type__asof", "sp_join_type__cross", b"sp_join_type__cross", "sp_join_type__full_outer", b"sp_join_type__full_outer", "sp_join_type__inner", b"sp_join_type__inner", "sp_join_type__left_anti", b"sp_join_type__left_anti", "sp_join_type__left_outer", b"sp_join_type__left_outer", "sp_join_type__left_semi", b"sp_join_type__left_semi", "sp_join_type__right_outer", b"sp_join_type__right_outer", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["sp_join_type__asof", "sp_join_type__cross", "sp_join_type__full_outer", "sp_join_type__inner", "sp_join_type__left_anti", "sp_join_type__left_outer", "sp_join_type__left_semi", "sp_join_type__right_outer"] | None: ...

global___SpJoinType = SpJoinType

@typing.final
class SpName(google.protobuf.message.Message):
    """ast.ir:115"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SP_NAME_FLAT_FIELD_NUMBER: builtins.int
    SP_NAME_STRUCTURED_FIELD_NUMBER: builtins.int
    @property
    def sp_name_flat(self) -> global___SpNameFlat: ...
    @property
    def sp_name_structured(self) -> global___SpNameStructured: ...
    def __init__(
        self,
        *,
        sp_name_flat: global___SpNameFlat | None = ...,
        sp_name_structured: global___SpNameStructured | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["sealed_value", b"sealed_value", "sp_name_flat", b"sp_name_flat", "sp_name_structured", b"sp_name_structured"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["sealed_value", b"sealed_value", "sp_name_flat", b"sp_name_flat", "sp_name_structured", b"sp_name_structured"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["sealed_value", b"sealed_value"]) -> typing.Literal["sp_name_flat", "sp_name_structured"] | None: ...

global___SpName = SpName

@typing.final
class SpNameFlat(google.protobuf.message.Message):
    """ast.ir:116"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    name: builtins.str
    def __init__(
        self,
        *,
        name: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["name", b"name"]) -> None: ...

global___SpNameFlat = SpNameFlat

@typing.final
class SpNameStructured(google.protobuf.message.Message):
    """ast.ir:117"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    @property
    def name(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        name: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["name", b"name"]) -> None: ...

global___SpNameStructured = SpNameStructured

@typing.final
class SpNullOrder(google.protobuf.message.Message):
    """column.ir:65"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SP_NULL_ORDER_DEFAULT_FIELD_NUMBER: builtins.int
    SP_NULL_ORDER_NULLS_FIRST_FIELD_NUMBER: builtins.int
    SP_NULL_ORDER_NULLS_LAST_FIELD_NUMBER: builtins.int
    sp_null_order_default: builtins.bool
    sp_null_order_nulls_first: builtins.bool
    sp_null_order_nulls_last: builtins.bool
    def __init__(
        self,
        *,
        sp_null_order_default: builtins.bool = ...,
        sp_null_order_nulls_first: builtins.bool = ...,
        sp_null_order_nulls_last: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["sp_null_order_default", b"sp_null_order_default", "sp_null_order_nulls_first", b"sp_null_order_nulls_first", "sp_null_order_nulls_last", b"sp_null_order_nulls_last", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["sp_null_order_default", b"sp_null_order_default", "sp_null_order_nulls_first", b"sp_null_order_nulls_first", "sp_null_order_nulls_last", b"sp_null_order_nulls_last", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["sp_null_order_default", "sp_null_order_nulls_first", "sp_null_order_nulls_last"] | None: ...

global___SpNullOrder = SpNullOrder

@typing.final
class SpPivotValue(google.protobuf.message.Message):
    """dataframe-grouped.ir:76"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SP_PIVOT_VALUE__DATAFRAME_FIELD_NUMBER: builtins.int
    SP_PIVOT_VALUE__EXPR_FIELD_NUMBER: builtins.int
    @property
    def sp_pivot_value__dataframe(self) -> global___SpPivotValue_Dataframe: ...
    @property
    def sp_pivot_value__expr(self) -> global___SpPivotValue_Expr: ...
    def __init__(
        self,
        *,
        sp_pivot_value__dataframe: global___SpPivotValue_Dataframe | None = ...,
        sp_pivot_value__expr: global___SpPivotValue_Expr | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["sealed_value", b"sealed_value", "sp_pivot_value__dataframe", b"sp_pivot_value__dataframe", "sp_pivot_value__expr", b"sp_pivot_value__expr"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["sealed_value", b"sealed_value", "sp_pivot_value__dataframe", b"sp_pivot_value__dataframe", "sp_pivot_value__expr", b"sp_pivot_value__expr"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["sealed_value", b"sealed_value"]) -> typing.Literal["sp_pivot_value__dataframe", "sp_pivot_value__expr"] | None: ...

global___SpPivotValue = SpPivotValue

@typing.final
class SpPivotValue_Expr(google.protobuf.message.Message):
    """dataframe-grouped.ir:77"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    V_FIELD_NUMBER: builtins.int
    @property
    def v(self) -> global___Expr: ...
    def __init__(
        self,
        *,
        v: global___Expr | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["v", b"v"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["v", b"v"]) -> None: ...

global___SpPivotValue_Expr = SpPivotValue_Expr

@typing.final
class SpPivotValue_Dataframe(google.protobuf.message.Message):
    """dataframe-grouped.ir:78"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    V_FIELD_NUMBER: builtins.int
    @property
    def v(self) -> global___SpDataframeRef: ...
    def __init__(
        self,
        *,
        v: global___SpDataframeRef | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["v", b"v"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["v", b"v"]) -> None: ...

global___SpPivotValue_Dataframe = SpPivotValue_Dataframe

@typing.final
class SpSaveMode(google.protobuf.message.Message):
    """dataframe-io.ir:75"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SP_SAVE_MODE_APPEND_FIELD_NUMBER: builtins.int
    SP_SAVE_MODE_ERROR_IF_EXISTS_FIELD_NUMBER: builtins.int
    SP_SAVE_MODE_IGNORE_FIELD_NUMBER: builtins.int
    SP_SAVE_MODE_OVERWRITE_FIELD_NUMBER: builtins.int
    SP_SAVE_MODE_TRUNCATE_FIELD_NUMBER: builtins.int
    sp_save_mode_append: builtins.bool
    sp_save_mode_error_if_exists: builtins.bool
    sp_save_mode_ignore: builtins.bool
    sp_save_mode_overwrite: builtins.bool
    sp_save_mode_truncate: builtins.bool
    def __init__(
        self,
        *,
        sp_save_mode_append: builtins.bool = ...,
        sp_save_mode_error_if_exists: builtins.bool = ...,
        sp_save_mode_ignore: builtins.bool = ...,
        sp_save_mode_overwrite: builtins.bool = ...,
        sp_save_mode_truncate: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["sp_save_mode_append", b"sp_save_mode_append", "sp_save_mode_error_if_exists", b"sp_save_mode_error_if_exists", "sp_save_mode_ignore", b"sp_save_mode_ignore", "sp_save_mode_overwrite", b"sp_save_mode_overwrite", "sp_save_mode_truncate", b"sp_save_mode_truncate", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["sp_save_mode_append", b"sp_save_mode_append", "sp_save_mode_error_if_exists", b"sp_save_mode_error_if_exists", "sp_save_mode_ignore", b"sp_save_mode_ignore", "sp_save_mode_overwrite", b"sp_save_mode_overwrite", "sp_save_mode_truncate", b"sp_save_mode_truncate", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["sp_save_mode_append", "sp_save_mode_error_if_exists", "sp_save_mode_ignore", "sp_save_mode_overwrite", "sp_save_mode_truncate"] | None: ...

global___SpSaveMode = SpSaveMode

@typing.final
class SpTableVariant(google.protobuf.message.Message):
    """dataframe.ir:110"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SP_SESSION_TABLE_FIELD_NUMBER: builtins.int
    SP_TABLE_INIT_FIELD_NUMBER: builtins.int
    sp_session_table: builtins.bool
    sp_table_init: builtins.bool
    def __init__(
        self,
        *,
        sp_session_table: builtins.bool = ...,
        sp_table_init: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["sp_session_table", b"sp_session_table", "sp_table_init", b"sp_table_init", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["sp_session_table", b"sp_session_table", "sp_table_init", b"sp_table_init", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["sp_session_table", "sp_table_init"] | None: ...

global___SpTableVariant = SpTableVariant

@typing.final
class SpTimestampTimeZone(google.protobuf.message.Message):
    """type.ir:36"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SP_TIMESTAMP_TIME_ZONE_DEFAULT_FIELD_NUMBER: builtins.int
    SP_TIMESTAMP_TIME_ZONE_LTZ_FIELD_NUMBER: builtins.int
    SP_TIMESTAMP_TIME_ZONE_NTZ_FIELD_NUMBER: builtins.int
    SP_TIMESTAMP_TIME_ZONE_TZ_FIELD_NUMBER: builtins.int
    sp_timestamp_time_zone_default: builtins.bool
    sp_timestamp_time_zone_ltz: builtins.bool
    sp_timestamp_time_zone_ntz: builtins.bool
    sp_timestamp_time_zone_tz: builtins.bool
    def __init__(
        self,
        *,
        sp_timestamp_time_zone_default: builtins.bool = ...,
        sp_timestamp_time_zone_ltz: builtins.bool = ...,
        sp_timestamp_time_zone_ntz: builtins.bool = ...,
        sp_timestamp_time_zone_tz: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["sp_timestamp_time_zone_default", b"sp_timestamp_time_zone_default", "sp_timestamp_time_zone_ltz", b"sp_timestamp_time_zone_ltz", "sp_timestamp_time_zone_ntz", b"sp_timestamp_time_zone_ntz", "sp_timestamp_time_zone_tz", b"sp_timestamp_time_zone_tz", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["sp_timestamp_time_zone_default", b"sp_timestamp_time_zone_default", "sp_timestamp_time_zone_ltz", b"sp_timestamp_time_zone_ltz", "sp_timestamp_time_zone_ntz", b"sp_timestamp_time_zone_ntz", "sp_timestamp_time_zone_tz", b"sp_timestamp_time_zone_tz", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["sp_timestamp_time_zone_default", "sp_timestamp_time_zone_ltz", "sp_timestamp_time_zone_ntz", "sp_timestamp_time_zone_tz"] | None: ...

global___SpTimestampTimeZone = SpTimestampTimeZone

@typing.final
class SpWindowRelativePosition(google.protobuf.message.Message):
    """window.ir:6"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SP_WINDOW_RELATIVE_POSITION__CURRENT_ROW_FIELD_NUMBER: builtins.int
    SP_WINDOW_RELATIVE_POSITION__POSITION_FIELD_NUMBER: builtins.int
    SP_WINDOW_RELATIVE_POSITION__UNBOUNDED_FOLLOWING_FIELD_NUMBER: builtins.int
    SP_WINDOW_RELATIVE_POSITION__UNBOUNDED_PRECEDING_FIELD_NUMBER: builtins.int
    sp_window_relative_position__current_row: builtins.bool
    sp_window_relative_position__unbounded_following: builtins.bool
    sp_window_relative_position__unbounded_preceding: builtins.bool
    @property
    def sp_window_relative_position__position(self) -> global___SpWindowRelativePosition_Position: ...
    def __init__(
        self,
        *,
        sp_window_relative_position__current_row: builtins.bool = ...,
        sp_window_relative_position__position: global___SpWindowRelativePosition_Position | None = ...,
        sp_window_relative_position__unbounded_following: builtins.bool = ...,
        sp_window_relative_position__unbounded_preceding: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["sp_window_relative_position__current_row", b"sp_window_relative_position__current_row", "sp_window_relative_position__position", b"sp_window_relative_position__position", "sp_window_relative_position__unbounded_following", b"sp_window_relative_position__unbounded_following", "sp_window_relative_position__unbounded_preceding", b"sp_window_relative_position__unbounded_preceding", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["sp_window_relative_position__current_row", b"sp_window_relative_position__current_row", "sp_window_relative_position__position", b"sp_window_relative_position__position", "sp_window_relative_position__unbounded_following", b"sp_window_relative_position__unbounded_following", "sp_window_relative_position__unbounded_preceding", b"sp_window_relative_position__unbounded_preceding", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["sp_window_relative_position__current_row", "sp_window_relative_position__position", "sp_window_relative_position__unbounded_following", "sp_window_relative_position__unbounded_preceding"] | None: ...

global___SpWindowRelativePosition = SpWindowRelativePosition

@typing.final
class SpWindowRelativePosition_Position(google.protobuf.message.Message):
    """window.ir:10"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    N_FIELD_NUMBER: builtins.int
    @property
    def n(self) -> global___Expr: ...
    def __init__(
        self,
        *,
        n: global___Expr | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["n", b"n"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["n", b"n"]) -> None: ...

global___SpWindowRelativePosition_Position = SpWindowRelativePosition_Position

@typing.final
class SrcPosition(google.protobuf.message.Message):
    """src.ir:1"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    END_COLUMN_FIELD_NUMBER: builtins.int
    END_LINE_FIELD_NUMBER: builtins.int
    FILE_FIELD_NUMBER: builtins.int
    START_COLUMN_FIELD_NUMBER: builtins.int
    START_LINE_FIELD_NUMBER: builtins.int
    end_column: builtins.int
    end_line: builtins.int
    file: builtins.int
    start_column: builtins.int
    start_line: builtins.int
    def __init__(
        self,
        *,
        end_column: builtins.int = ...,
        end_line: builtins.int = ...,
        file: builtins.int = ...,
        start_column: builtins.int = ...,
        start_line: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["end_column", b"end_column", "end_line", b"end_line", "file", b"file", "start_column", b"start_column", "start_line", b"start_line"]) -> None: ...

global___SrcPosition = SrcPosition

@typing.final
class StagedPandasDataframe(google.protobuf.message.Message):
    """dataframe.ir:79"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TEMP_TABLE_FIELD_NUMBER: builtins.int
    @property
    def temp_table(self) -> global___SpNameRef: ...
    def __init__(
        self,
        *,
        temp_table: global___SpNameRef | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["temp_table", b"temp_table"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["temp_table", b"temp_table"]) -> None: ...

global___StagedPandasDataframe = StagedPandasDataframe

@typing.final
class UdtfSchema(google.protobuf.message.Message):
    """fn.ir:86"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    UDTF_SCHEMA__NAMES_FIELD_NUMBER: builtins.int
    UDTF_SCHEMA__TYPE_FIELD_NUMBER: builtins.int
    @property
    def udtf_schema__names(self) -> global___UdtfSchema_Names: ...
    @property
    def udtf_schema__type(self) -> global___UdtfSchema_Type: ...
    def __init__(
        self,
        *,
        udtf_schema__names: global___UdtfSchema_Names | None = ...,
        udtf_schema__type: global___UdtfSchema_Type | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["sealed_value", b"sealed_value", "udtf_schema__names", b"udtf_schema__names", "udtf_schema__type", b"udtf_schema__type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["sealed_value", b"sealed_value", "udtf_schema__names", b"udtf_schema__names", "udtf_schema__type", b"udtf_schema__type"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["sealed_value", b"sealed_value"]) -> typing.Literal["udtf_schema__names", "udtf_schema__type"] | None: ...

global___UdtfSchema = UdtfSchema

@typing.final
class UdtfSchema_Type(google.protobuf.message.Message):
    """fn.ir:87"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RETURN_TYPE_FIELD_NUMBER: builtins.int
    @property
    def return_type(self) -> global___SpDataType: ...
    def __init__(
        self,
        *,
        return_type: global___SpDataType | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["return_type", b"return_type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["return_type", b"return_type"]) -> None: ...

global___UdtfSchema_Type = UdtfSchema_Type

@typing.final
class UdtfSchema_Names(google.protobuf.message.Message):
    """fn.ir:88"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SCHEMA_FIELD_NUMBER: builtins.int
    @property
    def schema(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        schema: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["schema", b"schema"]) -> None: ...

global___UdtfSchema_Names = UdtfSchema_Names

@typing.final
class VarId(google.protobuf.message.Message):
    """ast.ir:110"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BITFIELD1_FIELD_NUMBER: builtins.int
    bitfield1: builtins.int
    def __init__(
        self,
        *,
        bitfield1: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["bitfield1", b"bitfield1"]) -> None: ...

global___VarId = VarId

@typing.final
class Version(google.protobuf.message.Message):
    """ast.ir:23"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LABEL_FIELD_NUMBER: builtins.int
    MAJOR_FIELD_NUMBER: builtins.int
    MINOR_FIELD_NUMBER: builtins.int
    PATCH_FIELD_NUMBER: builtins.int
    label: builtins.str
    major: builtins.int
    minor: builtins.int
    patch: builtins.int
    def __init__(
        self,
        *,
        label: builtins.str = ...,
        major: builtins.int = ...,
        minor: builtins.int = ...,
        patch: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["label", b"label", "major", b"major", "minor", b"minor", "patch", b"patch"]) -> None: ...

global___Version = Version

@typing.final
class AbstractExtension(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TRAIT_ABSTRACT_EXTENSION_EXPR_FIELD_NUMBER: builtins.int
    EXTENSION_DATAFRAME_EXPR_FIELD_NUMBER: builtins.int
    EXTENSION_ERROR_FIELD_NUMBER: builtins.int
    EXTENSION_EVAL_RESULT_FIELD_NUMBER: builtins.int
    EXTENSION_EXPR_FIELD_NUMBER: builtins.int
    EXTENSION_RELATIONAL_GROUPED_DATAFRAME_EXPR_FIELD_NUMBER: builtins.int
    EXTENSION_STMT_FIELD_NUMBER: builtins.int
    @property
    def trait_abstract_extension_expr(self) -> global___AbstractExtensionExpr: ...
    @property
    def extension_dataframe_expr(self) -> global___ExtensionDataframeExpr: ...
    @property
    def extension_error(self) -> global___ExtensionError: ...
    @property
    def extension_eval_result(self) -> global___ExtensionEvalResult: ...
    @property
    def extension_expr(self) -> global___ExtensionExpr: ...
    @property
    def extension_relational_grouped_dataframe_expr(self) -> global___ExtensionRelationalGroupedDataframeExpr: ...
    @property
    def extension_stmt(self) -> global___ExtensionStmt: ...
    def __init__(
        self,
        *,
        trait_abstract_extension_expr: global___AbstractExtensionExpr | None = ...,
        extension_dataframe_expr: global___ExtensionDataframeExpr | None = ...,
        extension_error: global___ExtensionError | None = ...,
        extension_eval_result: global___ExtensionEvalResult | None = ...,
        extension_expr: global___ExtensionExpr | None = ...,
        extension_relational_grouped_dataframe_expr: global___ExtensionRelationalGroupedDataframeExpr | None = ...,
        extension_stmt: global___ExtensionStmt | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["extension_dataframe_expr", b"extension_dataframe_expr", "extension_error", b"extension_error", "extension_eval_result", b"extension_eval_result", "extension_expr", b"extension_expr", "extension_relational_grouped_dataframe_expr", b"extension_relational_grouped_dataframe_expr", "extension_stmt", b"extension_stmt", "trait_abstract_extension_expr", b"trait_abstract_extension_expr", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["extension_dataframe_expr", b"extension_dataframe_expr", "extension_error", b"extension_error", "extension_eval_result", b"extension_eval_result", "extension_expr", b"extension_expr", "extension_relational_grouped_dataframe_expr", b"extension_relational_grouped_dataframe_expr", "extension_stmt", b"extension_stmt", "trait_abstract_extension_expr", b"trait_abstract_extension_expr", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["trait_abstract_extension_expr", "extension_dataframe_expr", "extension_error", "extension_eval_result", "extension_expr", "extension_relational_grouped_dataframe_expr", "extension_stmt"] | None: ...

global___AbstractExtension = AbstractExtension

@typing.final
class AbstractExtensionExpr(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    EXTENSION_DATAFRAME_EXPR_FIELD_NUMBER: builtins.int
    EXTENSION_EXPR_FIELD_NUMBER: builtins.int
    EXTENSION_RELATIONAL_GROUPED_DATAFRAME_EXPR_FIELD_NUMBER: builtins.int
    @property
    def extension_dataframe_expr(self) -> global___ExtensionDataframeExpr: ...
    @property
    def extension_expr(self) -> global___ExtensionExpr: ...
    @property
    def extension_relational_grouped_dataframe_expr(self) -> global___ExtensionRelationalGroupedDataframeExpr: ...
    def __init__(
        self,
        *,
        extension_dataframe_expr: global___ExtensionDataframeExpr | None = ...,
        extension_expr: global___ExtensionExpr | None = ...,
        extension_relational_grouped_dataframe_expr: global___ExtensionRelationalGroupedDataframeExpr | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["extension_dataframe_expr", b"extension_dataframe_expr", "extension_expr", b"extension_expr", "extension_relational_grouped_dataframe_expr", b"extension_relational_grouped_dataframe_expr", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["extension_dataframe_expr", b"extension_dataframe_expr", "extension_expr", b"extension_expr", "extension_relational_grouped_dataframe_expr", b"extension_relational_grouped_dataframe_expr", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["extension_dataframe_expr", "extension_expr", "extension_relational_grouped_dataframe_expr"] | None: ...

global___AbstractExtensionExpr = AbstractExtensionExpr

@typing.final
class AbstractTruncatedExpr(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TRUNCATED_DATAFRAME_EXPR_FIELD_NUMBER: builtins.int
    TRUNCATED_EXPR_FIELD_NUMBER: builtins.int
    TRUNCATED_RELATIONAL_GROUPED_DATAFRAME_EXPR_FIELD_NUMBER: builtins.int
    @property
    def truncated_dataframe_expr(self) -> global___TruncatedDataframeExpr: ...
    @property
    def truncated_expr(self) -> global___TruncatedExpr: ...
    @property
    def truncated_relational_grouped_dataframe_expr(self) -> global___TruncatedRelationalGroupedDataframeExpr: ...
    def __init__(
        self,
        *,
        truncated_dataframe_expr: global___TruncatedDataframeExpr | None = ...,
        truncated_expr: global___TruncatedExpr | None = ...,
        truncated_relational_grouped_dataframe_expr: global___TruncatedRelationalGroupedDataframeExpr | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["truncated_dataframe_expr", b"truncated_dataframe_expr", "truncated_expr", b"truncated_expr", "truncated_relational_grouped_dataframe_expr", b"truncated_relational_grouped_dataframe_expr", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["truncated_dataframe_expr", b"truncated_dataframe_expr", "truncated_expr", b"truncated_expr", "truncated_relational_grouped_dataframe_expr", b"truncated_relational_grouped_dataframe_expr", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["truncated_dataframe_expr", "truncated_expr", "truncated_relational_grouped_dataframe_expr"] | None: ...

global___AbstractTruncatedExpr = AbstractTruncatedExpr

@typing.final
class Add(google.protobuf.message.Message):
    """op.ir:42"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LHS_FIELD_NUMBER: builtins.int
    RHS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def lhs(self) -> global___Expr: ...
    @property
    def rhs(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        lhs: global___Expr | None = ...,
        rhs: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> None: ...

global___Add = Add

@typing.final
class And(google.protobuf.message.Message):
    """op.ir:16"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LHS_FIELD_NUMBER: builtins.int
    RHS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def lhs(self) -> global___Expr: ...
    @property
    def rhs(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        lhs: global___Expr | None = ...,
        rhs: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> None: ...

global___And = And

@typing.final
class ApplyExpr(google.protobuf.message.Message):
    """fn.ir:2"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FN_FIELD_NUMBER: builtins.int
    NAMED_ARGS_FIELD_NUMBER: builtins.int
    POS_ARGS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def fn(self) -> global___FnRefExpr: ...
    @property
    def named_args(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_Expr]: ...
    @property
    def pos_args(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Expr]: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        fn: global___FnRefExpr | None = ...,
        named_args: collections.abc.Iterable[global___Tuple_String_Expr] | None = ...,
        pos_args: collections.abc.Iterable[global___Expr] | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["fn", b"fn", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["fn", b"fn", "named_args", b"named_args", "pos_args", b"pos_args", "src", b"src"]) -> None: ...

global___ApplyExpr = ApplyExpr

@typing.final
class Assign(google.protobuf.message.Message):
    """ast.ir:36"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    EXPR_FIELD_NUMBER: builtins.int
    SYMBOL_FIELD_NUMBER: builtins.int
    UID_FIELD_NUMBER: builtins.int
    VAR_ID_FIELD_NUMBER: builtins.int
    uid: builtins.int
    @property
    def expr(self) -> global___Expr: ...
    @property
    def symbol(self) -> google.protobuf.wrappers_pb2.StringValue: ...
    @property
    def var_id(self) -> global___VarId: ...
    def __init__(
        self,
        *,
        expr: global___Expr | None = ...,
        symbol: google.protobuf.wrappers_pb2.StringValue | None = ...,
        uid: builtins.int = ...,
        var_id: global___VarId | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["expr", b"expr", "symbol", b"symbol", "var_id", b"var_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["expr", b"expr", "symbol", b"symbol", "uid", b"uid", "var_id", b"var_id"]) -> None: ...

global___Assign = Assign

@typing.final
class BigDecimalVal(google.protobuf.message.Message):
    """const.ir:28"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SCALE_FIELD_NUMBER: builtins.int
    SPECIAL_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    UNSCALED_VALUE_FIELD_NUMBER: builtins.int
    scale: builtins.int
    unscaled_value: builtins.bytes
    @property
    def special(self) -> google.protobuf.wrappers_pb2.StringValue: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        scale: builtins.int = ...,
        special: google.protobuf.wrappers_pb2.StringValue | None = ...,
        src: global___SrcPosition | None = ...,
        unscaled_value: builtins.bytes = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["special", b"special", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["scale", b"scale", "special", b"special", "src", b"src", "unscaled_value", b"unscaled_value"]) -> None: ...

global___BigDecimalVal = BigDecimalVal

@typing.final
class BigIntVal(google.protobuf.message.Message):
    """const.ir:24"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SRC_FIELD_NUMBER: builtins.int
    V_FIELD_NUMBER: builtins.int
    v: builtins.bytes
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        src: global___SrcPosition | None = ...,
        v: builtins.bytes = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["src", b"src", "v", b"v"]) -> None: ...

global___BigIntVal = BigIntVal

@typing.final
class BinOp(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ADD_FIELD_NUMBER: builtins.int
    AND_FIELD_NUMBER: builtins.int
    BIT_AND_FIELD_NUMBER: builtins.int
    BIT_OR_FIELD_NUMBER: builtins.int
    BIT_XOR_FIELD_NUMBER: builtins.int
    DIV_FIELD_NUMBER: builtins.int
    EQ_FIELD_NUMBER: builtins.int
    GEQ_FIELD_NUMBER: builtins.int
    GT_FIELD_NUMBER: builtins.int
    LEQ_FIELD_NUMBER: builtins.int
    LT_FIELD_NUMBER: builtins.int
    MOD_FIELD_NUMBER: builtins.int
    MUL_FIELD_NUMBER: builtins.int
    NEQ_FIELD_NUMBER: builtins.int
    OR_FIELD_NUMBER: builtins.int
    POW_FIELD_NUMBER: builtins.int
    SUB_FIELD_NUMBER: builtins.int
    @property
    def add(self) -> global___Add: ...
    @property
    def bit_and(self) -> global___BitAnd: ...
    @property
    def bit_or(self) -> global___BitOr: ...
    @property
    def bit_xor(self) -> global___BitXor: ...
    @property
    def div(self) -> global___Div: ...
    @property
    def eq(self) -> global___Eq: ...
    @property
    def geq(self) -> global___Geq: ...
    @property
    def gt(self) -> global___Gt: ...
    @property
    def leq(self) -> global___Leq: ...
    @property
    def lt(self) -> global___Lt: ...
    @property
    def mod(self) -> global___Mod: ...
    @property
    def mul(self) -> global___Mul: ...
    @property
    def neq(self) -> global___Neq: ...
    @property
    def pow(self) -> global___Pow: ...
    @property
    def sub(self) -> global___Sub: ...
    def __init__(
        self,
        *,
        add: global___Add | None = ...,
        bit_and: global___BitAnd | None = ...,
        bit_or: global___BitOr | None = ...,
        bit_xor: global___BitXor | None = ...,
        div: global___Div | None = ...,
        eq: global___Eq | None = ...,
        geq: global___Geq | None = ...,
        gt: global___Gt | None = ...,
        leq: global___Leq | None = ...,
        lt: global___Lt | None = ...,
        mod: global___Mod | None = ...,
        mul: global___Mul | None = ...,
        neq: global___Neq | None = ...,
        pow: global___Pow | None = ...,
        sub: global___Sub | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["add", b"add", "and", b"and", "bit_and", b"bit_and", "bit_or", b"bit_or", "bit_xor", b"bit_xor", "div", b"div", "eq", b"eq", "geq", b"geq", "gt", b"gt", "leq", b"leq", "lt", b"lt", "mod", b"mod", "mul", b"mul", "neq", b"neq", "or", b"or", "pow", b"pow", "sub", b"sub", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["add", b"add", "and", b"and", "bit_and", b"bit_and", "bit_or", b"bit_or", "bit_xor", b"bit_xor", "div", b"div", "eq", b"eq", "geq", b"geq", "gt", b"gt", "leq", b"leq", "lt", b"lt", "mod", b"mod", "mul", b"mul", "neq", b"neq", "or", b"or", "pow", b"pow", "sub", b"sub", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["add", "and", "bit_and", "bit_or", "bit_xor", "div", "eq", "geq", "gt", "leq", "lt", "mod", "mul", "neq", "or", "pow", "sub"] | None: ...

global___BinOp = BinOp

@typing.final
class BinaryVal(google.protobuf.message.Message):
    """const.ir:42"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SRC_FIELD_NUMBER: builtins.int
    V_FIELD_NUMBER: builtins.int
    v: builtins.bytes
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        src: global___SrcPosition | None = ...,
        v: builtins.bytes = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["src", b"src", "v", b"v"]) -> None: ...

global___BinaryVal = BinaryVal

@typing.final
class BitAnd(google.protobuf.message.Message):
    """op.ir:58"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LHS_FIELD_NUMBER: builtins.int
    RHS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def lhs(self) -> global___Expr: ...
    @property
    def rhs(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        lhs: global___Expr | None = ...,
        rhs: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> None: ...

global___BitAnd = BitAnd

@typing.final
class BitOr(google.protobuf.message.Message):
    """op.ir:60"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LHS_FIELD_NUMBER: builtins.int
    RHS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def lhs(self) -> global___Expr: ...
    @property
    def rhs(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        lhs: global___Expr | None = ...,
        rhs: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> None: ...

global___BitOr = BitOr

@typing.final
class BitXor(google.protobuf.message.Message):
    """op.ir:62"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LHS_FIELD_NUMBER: builtins.int
    RHS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def lhs(self) -> global___Expr: ...
    @property
    def rhs(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        lhs: global___Expr | None = ...,
        rhs: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> None: ...

global___BitXor = BitXor

@typing.final
class BoolVal(google.protobuf.message.Message):
    """const.ir:16"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SRC_FIELD_NUMBER: builtins.int
    V_FIELD_NUMBER: builtins.int
    v: builtins.bool
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        src: global___SrcPosition | None = ...,
        v: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["src", b"src", "v", b"v"]) -> None: ...

global___BoolVal = BoolVal

@typing.final
class BuiltinFn(google.protobuf.message.Message):
    """fn.ir:26"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def name(self) -> global___SpNameRef: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        name: global___SpNameRef | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["name", b"name", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["name", b"name", "src", b"src"]) -> None: ...

global___BuiltinFn = BuiltinFn

@typing.final
class CallTableFunctionExpr(google.protobuf.message.Message):
    """fn.ir:144"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def name(self) -> global___SpNameRef: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        name: global___SpNameRef | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["name", b"name", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["name", b"name", "src", b"src"]) -> None: ...

global___CallTableFunctionExpr = CallTableFunctionExpr

@typing.final
class Const(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BIG_DECIMAL_VAL_FIELD_NUMBER: builtins.int
    BIG_INT_VAL_FIELD_NUMBER: builtins.int
    BINARY_VAL_FIELD_NUMBER: builtins.int
    BOOL_VAL_FIELD_NUMBER: builtins.int
    FLOAT64_VAL_FIELD_NUMBER: builtins.int
    INT64_VAL_FIELD_NUMBER: builtins.int
    NULL_VAL_FIELD_NUMBER: builtins.int
    PYTHON_DATE_VAL_FIELD_NUMBER: builtins.int
    PYTHON_TIME_VAL_FIELD_NUMBER: builtins.int
    PYTHON_TIMESTAMP_VAL_FIELD_NUMBER: builtins.int
    REDACTED_CONST_FIELD_NUMBER: builtins.int
    SP_DATATYPE_VAL_FIELD_NUMBER: builtins.int
    STRING_VAL_FIELD_NUMBER: builtins.int
    @property
    def big_decimal_val(self) -> global___BigDecimalVal: ...
    @property
    def big_int_val(self) -> global___BigIntVal: ...
    @property
    def binary_val(self) -> global___BinaryVal: ...
    @property
    def bool_val(self) -> global___BoolVal: ...
    @property
    def float64_val(self) -> global___Float64Val: ...
    @property
    def int64_val(self) -> global___Int64Val: ...
    @property
    def null_val(self) -> global___NullVal: ...
    @property
    def python_date_val(self) -> global___PythonDateVal: ...
    @property
    def python_time_val(self) -> global___PythonTimeVal: ...
    @property
    def python_timestamp_val(self) -> global___PythonTimestampVal: ...
    @property
    def redacted_const(self) -> global___RedactedConst: ...
    @property
    def sp_datatype_val(self) -> global___SpDatatypeVal: ...
    @property
    def string_val(self) -> global___StringVal: ...
    def __init__(
        self,
        *,
        big_decimal_val: global___BigDecimalVal | None = ...,
        big_int_val: global___BigIntVal | None = ...,
        binary_val: global___BinaryVal | None = ...,
        bool_val: global___BoolVal | None = ...,
        float64_val: global___Float64Val | None = ...,
        int64_val: global___Int64Val | None = ...,
        null_val: global___NullVal | None = ...,
        python_date_val: global___PythonDateVal | None = ...,
        python_time_val: global___PythonTimeVal | None = ...,
        python_timestamp_val: global___PythonTimestampVal | None = ...,
        redacted_const: global___RedactedConst | None = ...,
        sp_datatype_val: global___SpDatatypeVal | None = ...,
        string_val: global___StringVal | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["big_decimal_val", b"big_decimal_val", "big_int_val", b"big_int_val", "binary_val", b"binary_val", "bool_val", b"bool_val", "float64_val", b"float64_val", "int64_val", b"int64_val", "null_val", b"null_val", "python_date_val", b"python_date_val", "python_time_val", b"python_time_val", "python_timestamp_val", b"python_timestamp_val", "redacted_const", b"redacted_const", "sp_datatype_val", b"sp_datatype_val", "string_val", b"string_val", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["big_decimal_val", b"big_decimal_val", "big_int_val", b"big_int_val", "binary_val", b"binary_val", "bool_val", b"bool_val", "float64_val", b"float64_val", "int64_val", b"int64_val", "null_val", b"null_val", "python_date_val", b"python_date_val", "python_time_val", b"python_time_val", "python_timestamp_val", b"python_timestamp_val", "redacted_const", b"redacted_const", "sp_datatype_val", b"sp_datatype_val", "string_val", b"string_val", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["big_decimal_val", "big_int_val", "binary_val", "bool_val", "float64_val", "int64_val", "null_val", "python_date_val", "python_time_val", "python_timestamp_val", "redacted_const", "sp_datatype_val", "string_val"] | None: ...

global___Const = Const

@typing.final
class Div(google.protobuf.message.Message):
    """op.ir:48"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LHS_FIELD_NUMBER: builtins.int
    RHS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def lhs(self) -> global___Expr: ...
    @property
    def rhs(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        lhs: global___Expr | None = ...,
        rhs: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> None: ...

global___Div = Div

@typing.final
class Eq(google.protobuf.message.Message):
    """op.ir:24"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LHS_FIELD_NUMBER: builtins.int
    RHS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def lhs(self) -> global___Expr: ...
    @property
    def rhs(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        lhs: global___Expr | None = ...,
        rhs: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> None: ...

global___Eq = Eq

@typing.final
class Error(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    EXTENSION_ERROR_FIELD_NUMBER: builtins.int
    SESSION_RESET_REQUIRED_ERROR_FIELD_NUMBER: builtins.int
    @property
    def extension_error(self) -> global___ExtensionError: ...
    @property
    def session_reset_required_error(self) -> global___SessionResetRequiredError: ...
    def __init__(
        self,
        *,
        extension_error: global___ExtensionError | None = ...,
        session_reset_required_error: global___SessionResetRequiredError | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["extension_error", b"extension_error", "session_reset_required_error", b"session_reset_required_error", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["extension_error", b"extension_error", "session_reset_required_error", b"session_reset_required_error", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["extension_error", "session_reset_required_error"] | None: ...

global___Error = Error

@typing.final
class Eval(google.protobuf.message.Message):
    """ast.ir:44"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    UID_FIELD_NUMBER: builtins.int
    VAR_ID_FIELD_NUMBER: builtins.int
    uid: builtins.int
    @property
    def var_id(self) -> global___VarId: ...
    def __init__(
        self,
        *,
        uid: builtins.int = ...,
        var_id: global___VarId | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["var_id", b"var_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["uid", b"uid", "var_id", b"var_id"]) -> None: ...

global___Eval = Eval

@typing.final
class EvalOk(google.protobuf.message.Message):
    """ast.ir:60"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATA_FIELD_NUMBER: builtins.int
    UID_FIELD_NUMBER: builtins.int
    VAR_ID_FIELD_NUMBER: builtins.int
    uid: builtins.int
    @property
    def data(self) -> global___EvalResult: ...
    @property
    def var_id(self) -> global___VarId: ...
    def __init__(
        self,
        *,
        data: global___EvalResult | None = ...,
        uid: builtins.int = ...,
        var_id: global___VarId | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["data", b"data", "var_id", b"var_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["data", b"data", "uid", b"uid", "var_id", b"var_id"]) -> None: ...

global___EvalOk = EvalOk

@typing.final
class EvalResult(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TRAIT_CONST_FIELD_NUMBER: builtins.int
    BIG_DECIMAL_VAL_FIELD_NUMBER: builtins.int
    BIG_INT_VAL_FIELD_NUMBER: builtins.int
    BINARY_VAL_FIELD_NUMBER: builtins.int
    BOOL_VAL_FIELD_NUMBER: builtins.int
    EXTENSION_EVAL_RESULT_FIELD_NUMBER: builtins.int
    FLOAT64_VAL_FIELD_NUMBER: builtins.int
    INT64_VAL_FIELD_NUMBER: builtins.int
    NULL_VAL_FIELD_NUMBER: builtins.int
    PYTHON_DATE_VAL_FIELD_NUMBER: builtins.int
    PYTHON_TIME_VAL_FIELD_NUMBER: builtins.int
    PYTHON_TIMESTAMP_VAL_FIELD_NUMBER: builtins.int
    REDACTED_CONST_FIELD_NUMBER: builtins.int
    SF_QUERY_RESULT_FIELD_NUMBER: builtins.int
    SHOW_RESULT_FIELD_NUMBER: builtins.int
    SP_DATATYPE_VAL_FIELD_NUMBER: builtins.int
    STRING_VAL_FIELD_NUMBER: builtins.int
    @property
    def trait_const(self) -> global___Const: ...
    @property
    def big_decimal_val(self) -> global___BigDecimalVal: ...
    @property
    def big_int_val(self) -> global___BigIntVal: ...
    @property
    def binary_val(self) -> global___BinaryVal: ...
    @property
    def bool_val(self) -> global___BoolVal: ...
    @property
    def extension_eval_result(self) -> global___ExtensionEvalResult: ...
    @property
    def float64_val(self) -> global___Float64Val: ...
    @property
    def int64_val(self) -> global___Int64Val: ...
    @property
    def null_val(self) -> global___NullVal: ...
    @property
    def python_date_val(self) -> global___PythonDateVal: ...
    @property
    def python_time_val(self) -> global___PythonTimeVal: ...
    @property
    def python_timestamp_val(self) -> global___PythonTimestampVal: ...
    @property
    def redacted_const(self) -> global___RedactedConst: ...
    @property
    def sf_query_result(self) -> global___SfQueryResult: ...
    @property
    def show_result(self) -> global___ShowResult: ...
    @property
    def sp_datatype_val(self) -> global___SpDatatypeVal: ...
    @property
    def string_val(self) -> global___StringVal: ...
    def __init__(
        self,
        *,
        trait_const: global___Const | None = ...,
        big_decimal_val: global___BigDecimalVal | None = ...,
        big_int_val: global___BigIntVal | None = ...,
        binary_val: global___BinaryVal | None = ...,
        bool_val: global___BoolVal | None = ...,
        extension_eval_result: global___ExtensionEvalResult | None = ...,
        float64_val: global___Float64Val | None = ...,
        int64_val: global___Int64Val | None = ...,
        null_val: global___NullVal | None = ...,
        python_date_val: global___PythonDateVal | None = ...,
        python_time_val: global___PythonTimeVal | None = ...,
        python_timestamp_val: global___PythonTimestampVal | None = ...,
        redacted_const: global___RedactedConst | None = ...,
        sf_query_result: global___SfQueryResult | None = ...,
        show_result: global___ShowResult | None = ...,
        sp_datatype_val: global___SpDatatypeVal | None = ...,
        string_val: global___StringVal | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["big_decimal_val", b"big_decimal_val", "big_int_val", b"big_int_val", "binary_val", b"binary_val", "bool_val", b"bool_val", "extension_eval_result", b"extension_eval_result", "float64_val", b"float64_val", "int64_val", b"int64_val", "null_val", b"null_val", "python_date_val", b"python_date_val", "python_time_val", b"python_time_val", "python_timestamp_val", b"python_timestamp_val", "redacted_const", b"redacted_const", "sf_query_result", b"sf_query_result", "show_result", b"show_result", "sp_datatype_val", b"sp_datatype_val", "string_val", b"string_val", "trait_const", b"trait_const", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["big_decimal_val", b"big_decimal_val", "big_int_val", b"big_int_val", "binary_val", b"binary_val", "bool_val", b"bool_val", "extension_eval_result", b"extension_eval_result", "float64_val", b"float64_val", "int64_val", b"int64_val", "null_val", b"null_val", "python_date_val", b"python_date_val", "python_time_val", b"python_time_val", "python_timestamp_val", b"python_timestamp_val", "redacted_const", b"redacted_const", "sf_query_result", b"sf_query_result", "show_result", b"show_result", "sp_datatype_val", b"sp_datatype_val", "string_val", b"string_val", "trait_const", b"trait_const", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["trait_const", "big_decimal_val", "big_int_val", "binary_val", "bool_val", "extension_eval_result", "float64_val", "int64_val", "null_val", "python_date_val", "python_time_val", "python_timestamp_val", "redacted_const", "sf_query_result", "show_result", "sp_datatype_val", "string_val"] | None: ...

global___EvalResult = EvalResult

@typing.final
class Expr(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TRAIT_ABSTRACT_EXTENSION_EXPR_FIELD_NUMBER: builtins.int
    TRAIT_ABSTRACT_TRUNCATED_EXPR_FIELD_NUMBER: builtins.int
    TRAIT_BIN_OP_FIELD_NUMBER: builtins.int
    TRAIT_CONST_FIELD_NUMBER: builtins.int
    TRAIT_FN_ID_REF_EXPR_FIELD_NUMBER: builtins.int
    TRAIT_FN_NAME_REF_EXPR_FIELD_NUMBER: builtins.int
    TRAIT_FN_REF_EXPR_FIELD_NUMBER: builtins.int
    TRAIT_SP_COLUMN_FN_FIELD_NUMBER: builtins.int
    TRAIT_SP_DATAFRAME_EXPR_FIELD_NUMBER: builtins.int
    TRAIT_SP_DATAFRAME_WRITER_FIELD_NUMBER: builtins.int
    TRAIT_SP_MATCHED_CLAUSE_FIELD_NUMBER: builtins.int
    TRAIT_SP_RELATIONAL_GROUPED_DATAFRAME_EXPR_FIELD_NUMBER: builtins.int
    TRAIT_SP_WRITE_FILE_FIELD_NUMBER: builtins.int
    TRAIT_UNARY_OP_FIELD_NUMBER: builtins.int
    ADD_FIELD_NUMBER: builtins.int
    AND_FIELD_NUMBER: builtins.int
    APPLY_EXPR_FIELD_NUMBER: builtins.int
    BIG_DECIMAL_VAL_FIELD_NUMBER: builtins.int
    BIG_INT_VAL_FIELD_NUMBER: builtins.int
    BINARY_VAL_FIELD_NUMBER: builtins.int
    BIT_AND_FIELD_NUMBER: builtins.int
    BIT_OR_FIELD_NUMBER: builtins.int
    BIT_XOR_FIELD_NUMBER: builtins.int
    BOOL_VAL_FIELD_NUMBER: builtins.int
    BUILTIN_FN_FIELD_NUMBER: builtins.int
    CALL_TABLE_FUNCTION_EXPR_FIELD_NUMBER: builtins.int
    DIV_FIELD_NUMBER: builtins.int
    EQ_FIELD_NUMBER: builtins.int
    EXTENSION_DATAFRAME_EXPR_FIELD_NUMBER: builtins.int
    EXTENSION_EXPR_FIELD_NUMBER: builtins.int
    EXTENSION_RELATIONAL_GROUPED_DATAFRAME_EXPR_FIELD_NUMBER: builtins.int
    FLOAT64_VAL_FIELD_NUMBER: builtins.int
    GEQ_FIELD_NUMBER: builtins.int
    GT_FIELD_NUMBER: builtins.int
    INDIRECT_TABLE_FN_ID_REF_FIELD_NUMBER: builtins.int
    INDIRECT_TABLE_FN_NAME_REF_FIELD_NUMBER: builtins.int
    INT64_VAL_FIELD_NUMBER: builtins.int
    LEQ_FIELD_NUMBER: builtins.int
    LIST_VAL_FIELD_NUMBER: builtins.int
    LT_FIELD_NUMBER: builtins.int
    MOD_FIELD_NUMBER: builtins.int
    MUL_FIELD_NUMBER: builtins.int
    NEG_FIELD_NUMBER: builtins.int
    NEQ_FIELD_NUMBER: builtins.int
    NOT_FIELD_NUMBER: builtins.int
    NULL_VAL_FIELD_NUMBER: builtins.int
    OBJECT_GET_ITEM_FIELD_NUMBER: builtins.int
    OR_FIELD_NUMBER: builtins.int
    POW_FIELD_NUMBER: builtins.int
    PYTHON_DATE_VAL_FIELD_NUMBER: builtins.int
    PYTHON_TIME_VAL_FIELD_NUMBER: builtins.int
    PYTHON_TIMESTAMP_VAL_FIELD_NUMBER: builtins.int
    REDACTED_CONST_FIELD_NUMBER: builtins.int
    SEQ_MAP_VAL_FIELD_NUMBER: builtins.int
    SP_COLUMN_ALIAS_FIELD_NUMBER: builtins.int
    SP_COLUMN_APPLY__INT_FIELD_NUMBER: builtins.int
    SP_COLUMN_APPLY__STRING_FIELD_NUMBER: builtins.int
    SP_COLUMN_ASC_FIELD_NUMBER: builtins.int
    SP_COLUMN_BETWEEN_FIELD_NUMBER: builtins.int
    SP_COLUMN_CASE_WHEN_FIELD_NUMBER: builtins.int
    SP_COLUMN_CAST_FIELD_NUMBER: builtins.int
    SP_COLUMN_DESC_FIELD_NUMBER: builtins.int
    SP_COLUMN_EQUAL_NAN_FIELD_NUMBER: builtins.int
    SP_COLUMN_EQUAL_NULL_FIELD_NUMBER: builtins.int
    SP_COLUMN_IN_FIELD_NUMBER: builtins.int
    SP_COLUMN_IS_NOT_NULL_FIELD_NUMBER: builtins.int
    SP_COLUMN_IS_NULL_FIELD_NUMBER: builtins.int
    SP_COLUMN_OVER_FIELD_NUMBER: builtins.int
    SP_COLUMN_SQL_EXPR_FIELD_NUMBER: builtins.int
    SP_COLUMN_STRING_COLLATE_FIELD_NUMBER: builtins.int
    SP_COLUMN_STRING_CONTAINS_FIELD_NUMBER: builtins.int
    SP_COLUMN_STRING_ENDS_WITH_FIELD_NUMBER: builtins.int
    SP_COLUMN_STRING_LIKE_FIELD_NUMBER: builtins.int
    SP_COLUMN_STRING_REGEXP_FIELD_NUMBER: builtins.int
    SP_COLUMN_STRING_STARTS_WITH_FIELD_NUMBER: builtins.int
    SP_COLUMN_STRING_SUBSTR_FIELD_NUMBER: builtins.int
    SP_COLUMN_TRY_CAST_FIELD_NUMBER: builtins.int
    SP_COLUMN_WITHIN_GROUP_FIELD_NUMBER: builtins.int
    SP_CREATE_DATAFRAME_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_AGG_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_ALIAS_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_ANALYTICS_COMPUTE_LAG_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_ANALYTICS_COMPUTE_LEAD_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_ANALYTICS_CUMULATIVE_AGG_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_ANALYTICS_MOVING_AGG_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_ANALYTICS_TIME_SERIES_AGG_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_CACHE_RESULT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_COL_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_COLLECT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_COPY_INTO_TABLE_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_COUNT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_CREATE_OR_REPLACE_DYNAMIC_TABLE_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_CREATE_OR_REPLACE_VIEW_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_CROSS_JOIN_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_CUBE_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_DESCRIBE_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_DISTINCT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_DROP_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_DROP_DUPLICATES_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_EXCEPT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_FILTER_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_FIRST_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_FLATTEN_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_GROUP_BY_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_GROUP_BY_GROUPING_SETS_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_INTERSECT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_JOIN_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_JOIN_TABLE_FUNCTION_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_LIMIT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_NA_DROP__PYTHON_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_NA_DROP__SCALA_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_NA_FILL_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_NA_REPLACE_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_NATURAL_JOIN_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_PIVOT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_RANDOM_SPLIT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_REF_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_RENAME_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_ROLLUP_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_SAMPLE_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_SELECT__COLUMNS_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_SELECT__EXPRS_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_SHOW_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_SORT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_STAT_APPROX_QUANTILE_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_STAT_CORR_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_STAT_COV_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_STAT_CROSS_TAB_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_STAT_SAMPLE_BY_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_TO_DF_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_TO_LOCAL_ITERATOR_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_TO_PANDAS_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_TO_PANDAS_BATCHES_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_UNION_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_UNION_ALL_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_UNION_ALL_BY_NAME_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_UNION_BY_NAME_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_UNPIVOT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_WITH_COLUMN_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_WITH_COLUMN_RENAMED_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_WITH_COLUMNS_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_WRITE_FIELD_NUMBER: builtins.int
    SP_DATATYPE_VAL_FIELD_NUMBER: builtins.int
    SP_FLATTEN_FIELD_NUMBER: builtins.int
    SP_FN_REF_FIELD_NUMBER: builtins.int
    SP_GENERATOR_FIELD_NUMBER: builtins.int
    SP_GROUPING_SETS_FIELD_NUMBER: builtins.int
    SP_MERGE_DELETE_WHEN_MATCHED_CLAUSE_FIELD_NUMBER: builtins.int
    SP_MERGE_INSERT_WHEN_NOT_MATCHED_CLAUSE_FIELD_NUMBER: builtins.int
    SP_MERGE_UPDATE_WHEN_MATCHED_CLAUSE_FIELD_NUMBER: builtins.int
    SP_RANGE_FIELD_NUMBER: builtins.int
    SP_READ_AVRO_FIELD_NUMBER: builtins.int
    SP_READ_CSV_FIELD_NUMBER: builtins.int
    SP_READ_JSON_FIELD_NUMBER: builtins.int
    SP_READ_ORC_FIELD_NUMBER: builtins.int
    SP_READ_PARQUET_FIELD_NUMBER: builtins.int
    SP_READ_TABLE_FIELD_NUMBER: builtins.int
    SP_READ_XML_FIELD_NUMBER: builtins.int
    SP_RELATIONAL_GROUPED_DATAFRAME_AGG_FIELD_NUMBER: builtins.int
    SP_RELATIONAL_GROUPED_DATAFRAME_APPLY_IN_PANDAS_FIELD_NUMBER: builtins.int
    SP_RELATIONAL_GROUPED_DATAFRAME_BUILTIN_FIELD_NUMBER: builtins.int
    SP_RELATIONAL_GROUPED_DATAFRAME_PIVOT_FIELD_NUMBER: builtins.int
    SP_RELATIONAL_GROUPED_DATAFRAME_REF_FIELD_NUMBER: builtins.int
    SP_ROW_FIELD_NUMBER: builtins.int
    SP_SESSION_TABLE_FUNCTION_FIELD_NUMBER: builtins.int
    SP_SQL_FIELD_NUMBER: builtins.int
    SP_TABLE_FIELD_NUMBER: builtins.int
    SP_TABLE_DELETE_FIELD_NUMBER: builtins.int
    SP_TABLE_DROP_TABLE_FIELD_NUMBER: builtins.int
    SP_TABLE_FN_CALL_ALIAS_FIELD_NUMBER: builtins.int
    SP_TABLE_FN_CALL_OVER_FIELD_NUMBER: builtins.int
    SP_TABLE_MERGE_FIELD_NUMBER: builtins.int
    SP_TABLE_SAMPLE_FIELD_NUMBER: builtins.int
    SP_TABLE_UPDATE_FIELD_NUMBER: builtins.int
    SP_TO_SNOWPARK_PANDAS_FIELD_NUMBER: builtins.int
    SP_WRITE_COPY_INTO_LOCATION_FIELD_NUMBER: builtins.int
    SP_WRITE_CSV_FIELD_NUMBER: builtins.int
    SP_WRITE_JSON_FIELD_NUMBER: builtins.int
    SP_WRITE_PANDAS_FIELD_NUMBER: builtins.int
    SP_WRITE_PARQUET_FIELD_NUMBER: builtins.int
    SP_WRITE_TABLE_FIELD_NUMBER: builtins.int
    STORED_PROCEDURE_FIELD_NUMBER: builtins.int
    STRING_VAL_FIELD_NUMBER: builtins.int
    SUB_FIELD_NUMBER: builtins.int
    TRUNCATED_DATAFRAME_EXPR_FIELD_NUMBER: builtins.int
    TRUNCATED_EXPR_FIELD_NUMBER: builtins.int
    TRUNCATED_RELATIONAL_GROUPED_DATAFRAME_EXPR_FIELD_NUMBER: builtins.int
    TUPLE_VAL_FIELD_NUMBER: builtins.int
    UDAF_FIELD_NUMBER: builtins.int
    UDF_FIELD_NUMBER: builtins.int
    UDTF_FIELD_NUMBER: builtins.int
    @property
    def trait_abstract_extension_expr(self) -> global___AbstractExtensionExpr: ...
    @property
    def trait_abstract_truncated_expr(self) -> global___AbstractTruncatedExpr: ...
    @property
    def trait_bin_op(self) -> global___BinOp: ...
    @property
    def trait_const(self) -> global___Const: ...
    @property
    def trait_fn_id_ref_expr(self) -> global___FnIdRefExpr: ...
    @property
    def trait_fn_name_ref_expr(self) -> global___FnNameRefExpr: ...
    @property
    def trait_fn_ref_expr(self) -> global___FnRefExpr: ...
    @property
    def trait_sp_column_fn(self) -> global___SpColumnFn: ...
    @property
    def trait_sp_dataframe_expr(self) -> global___SpDataframeExpr: ...
    @property
    def trait_sp_dataframe_writer(self) -> global___SpDataframeWriter: ...
    @property
    def trait_sp_matched_clause(self) -> global___SpMatchedClause: ...
    @property
    def trait_sp_relational_grouped_dataframe_expr(self) -> global___SpRelationalGroupedDataframeExpr: ...
    @property
    def trait_sp_write_file(self) -> global___SpWriteFile: ...
    @property
    def trait_unary_op(self) -> global___UnaryOp: ...
    @property
    def add(self) -> global___Add: ...
    @property
    def apply_expr(self) -> global___ApplyExpr: ...
    @property
    def big_decimal_val(self) -> global___BigDecimalVal: ...
    @property
    def big_int_val(self) -> global___BigIntVal: ...
    @property
    def binary_val(self) -> global___BinaryVal: ...
    @property
    def bit_and(self) -> global___BitAnd: ...
    @property
    def bit_or(self) -> global___BitOr: ...
    @property
    def bit_xor(self) -> global___BitXor: ...
    @property
    def bool_val(self) -> global___BoolVal: ...
    @property
    def builtin_fn(self) -> global___BuiltinFn: ...
    @property
    def call_table_function_expr(self) -> global___CallTableFunctionExpr: ...
    @property
    def div(self) -> global___Div: ...
    @property
    def eq(self) -> global___Eq: ...
    @property
    def extension_dataframe_expr(self) -> global___ExtensionDataframeExpr: ...
    @property
    def extension_expr(self) -> global___ExtensionExpr: ...
    @property
    def extension_relational_grouped_dataframe_expr(self) -> global___ExtensionRelationalGroupedDataframeExpr: ...
    @property
    def float64_val(self) -> global___Float64Val: ...
    @property
    def geq(self) -> global___Geq: ...
    @property
    def gt(self) -> global___Gt: ...
    @property
    def indirect_table_fn_id_ref(self) -> global___IndirectTableFnIdRef: ...
    @property
    def indirect_table_fn_name_ref(self) -> global___IndirectTableFnNameRef: ...
    @property
    def int64_val(self) -> global___Int64Val: ...
    @property
    def leq(self) -> global___Leq: ...
    @property
    def list_val(self) -> global___ListVal: ...
    @property
    def lt(self) -> global___Lt: ...
    @property
    def mod(self) -> global___Mod: ...
    @property
    def mul(self) -> global___Mul: ...
    @property
    def neg(self) -> global___Neg: ...
    @property
    def neq(self) -> global___Neq: ...
    @property
    def null_val(self) -> global___NullVal: ...
    @property
    def object_get_item(self) -> global___ObjectGetItem: ...
    @property
    def pow(self) -> global___Pow: ...
    @property
    def python_date_val(self) -> global___PythonDateVal: ...
    @property
    def python_time_val(self) -> global___PythonTimeVal: ...
    @property
    def python_timestamp_val(self) -> global___PythonTimestampVal: ...
    @property
    def redacted_const(self) -> global___RedactedConst: ...
    @property
    def seq_map_val(self) -> global___SeqMapVal: ...
    @property
    def sp_column_alias(self) -> global___SpColumnAlias: ...
    @property
    def sp_column_apply__int(self) -> global___SpColumnApply_Int: ...
    @property
    def sp_column_apply__string(self) -> global___SpColumnApply_String: ...
    @property
    def sp_column_asc(self) -> global___SpColumnAsc: ...
    @property
    def sp_column_between(self) -> global___SpColumnBetween: ...
    @property
    def sp_column_case_when(self) -> global___SpColumnCaseWhen: ...
    @property
    def sp_column_cast(self) -> global___SpColumnCast: ...
    @property
    def sp_column_desc(self) -> global___SpColumnDesc: ...
    @property
    def sp_column_equal_nan(self) -> global___SpColumnEqualNan: ...
    @property
    def sp_column_equal_null(self) -> global___SpColumnEqualNull: ...
    @property
    def sp_column_in(self) -> global___SpColumnIn: ...
    @property
    def sp_column_is_not_null(self) -> global___SpColumnIsNotNull: ...
    @property
    def sp_column_is_null(self) -> global___SpColumnIsNull: ...
    @property
    def sp_column_over(self) -> global___SpColumnOver: ...
    @property
    def sp_column_sql_expr(self) -> global___SpColumnSqlExpr: ...
    @property
    def sp_column_string_collate(self) -> global___SpColumnStringCollate: ...
    @property
    def sp_column_string_contains(self) -> global___SpColumnStringContains: ...
    @property
    def sp_column_string_ends_with(self) -> global___SpColumnStringEndsWith: ...
    @property
    def sp_column_string_like(self) -> global___SpColumnStringLike: ...
    @property
    def sp_column_string_regexp(self) -> global___SpColumnStringRegexp: ...
    @property
    def sp_column_string_starts_with(self) -> global___SpColumnStringStartsWith: ...
    @property
    def sp_column_string_substr(self) -> global___SpColumnStringSubstr: ...
    @property
    def sp_column_try_cast(self) -> global___SpColumnTryCast: ...
    @property
    def sp_column_within_group(self) -> global___SpColumnWithinGroup: ...
    @property
    def sp_create_dataframe(self) -> global___SpCreateDataframe: ...
    @property
    def sp_dataframe_agg(self) -> global___SpDataframeAgg: ...
    @property
    def sp_dataframe_alias(self) -> global___SpDataframeAlias: ...
    @property
    def sp_dataframe_analytics_compute_lag(self) -> global___SpDataframeAnalyticsComputeLag: ...
    @property
    def sp_dataframe_analytics_compute_lead(self) -> global___SpDataframeAnalyticsComputeLead: ...
    @property
    def sp_dataframe_analytics_cumulative_agg(self) -> global___SpDataframeAnalyticsCumulativeAgg: ...
    @property
    def sp_dataframe_analytics_moving_agg(self) -> global___SpDataframeAnalyticsMovingAgg: ...
    @property
    def sp_dataframe_analytics_time_series_agg(self) -> global___SpDataframeAnalyticsTimeSeriesAgg: ...
    @property
    def sp_dataframe_cache_result(self) -> global___SpDataframeCacheResult: ...
    @property
    def sp_dataframe_col(self) -> global___SpDataframeCol: ...
    @property
    def sp_dataframe_collect(self) -> global___SpDataframeCollect: ...
    @property
    def sp_dataframe_copy_into_table(self) -> global___SpDataframeCopyIntoTable: ...
    @property
    def sp_dataframe_count(self) -> global___SpDataframeCount: ...
    @property
    def sp_dataframe_create_or_replace_dynamic_table(self) -> global___SpDataframeCreateOrReplaceDynamicTable: ...
    @property
    def sp_dataframe_create_or_replace_view(self) -> global___SpDataframeCreateOrReplaceView: ...
    @property
    def sp_dataframe_cross_join(self) -> global___SpDataframeCrossJoin: ...
    @property
    def sp_dataframe_cube(self) -> global___SpDataframeCube: ...
    @property
    def sp_dataframe_describe(self) -> global___SpDataframeDescribe: ...
    @property
    def sp_dataframe_distinct(self) -> global___SpDataframeDistinct: ...
    @property
    def sp_dataframe_drop(self) -> global___SpDataframeDrop: ...
    @property
    def sp_dataframe_drop_duplicates(self) -> global___SpDataframeDropDuplicates: ...
    @property
    def sp_dataframe_except(self) -> global___SpDataframeExcept: ...
    @property
    def sp_dataframe_filter(self) -> global___SpDataframeFilter: ...
    @property
    def sp_dataframe_first(self) -> global___SpDataframeFirst: ...
    @property
    def sp_dataframe_flatten(self) -> global___SpDataframeFlatten: ...
    @property
    def sp_dataframe_group_by(self) -> global___SpDataframeGroupBy: ...
    @property
    def sp_dataframe_group_by_grouping_sets(self) -> global___SpDataframeGroupByGroupingSets: ...
    @property
    def sp_dataframe_intersect(self) -> global___SpDataframeIntersect: ...
    @property
    def sp_dataframe_join(self) -> global___SpDataframeJoin: ...
    @property
    def sp_dataframe_join_table_function(self) -> global___SpDataframeJoinTableFunction: ...
    @property
    def sp_dataframe_limit(self) -> global___SpDataframeLimit: ...
    @property
    def sp_dataframe_na_drop__python(self) -> global___SpDataframeNaDrop_Python: ...
    @property
    def sp_dataframe_na_drop__scala(self) -> global___SpDataframeNaDrop_Scala: ...
    @property
    def sp_dataframe_na_fill(self) -> global___SpDataframeNaFill: ...
    @property
    def sp_dataframe_na_replace(self) -> global___SpDataframeNaReplace: ...
    @property
    def sp_dataframe_natural_join(self) -> global___SpDataframeNaturalJoin: ...
    @property
    def sp_dataframe_pivot(self) -> global___SpDataframePivot: ...
    @property
    def sp_dataframe_random_split(self) -> global___SpDataframeRandomSplit: ...
    @property
    def sp_dataframe_ref(self) -> global___SpDataframeRef: ...
    @property
    def sp_dataframe_rename(self) -> global___SpDataframeRename: ...
    @property
    def sp_dataframe_rollup(self) -> global___SpDataframeRollup: ...
    @property
    def sp_dataframe_sample(self) -> global___SpDataframeSample: ...
    @property
    def sp_dataframe_select__columns(self) -> global___SpDataframeSelect_Columns: ...
    @property
    def sp_dataframe_select__exprs(self) -> global___SpDataframeSelect_Exprs: ...
    @property
    def sp_dataframe_show(self) -> global___SpDataframeShow: ...
    @property
    def sp_dataframe_sort(self) -> global___SpDataframeSort: ...
    @property
    def sp_dataframe_stat_approx_quantile(self) -> global___SpDataframeStatApproxQuantile: ...
    @property
    def sp_dataframe_stat_corr(self) -> global___SpDataframeStatCorr: ...
    @property
    def sp_dataframe_stat_cov(self) -> global___SpDataframeStatCov: ...
    @property
    def sp_dataframe_stat_cross_tab(self) -> global___SpDataframeStatCrossTab: ...
    @property
    def sp_dataframe_stat_sample_by(self) -> global___SpDataframeStatSampleBy: ...
    @property
    def sp_dataframe_to_df(self) -> global___SpDataframeToDf: ...
    @property
    def sp_dataframe_to_local_iterator(self) -> global___SpDataframeToLocalIterator: ...
    @property
    def sp_dataframe_to_pandas(self) -> global___SpDataframeToPandas: ...
    @property
    def sp_dataframe_to_pandas_batches(self) -> global___SpDataframeToPandasBatches: ...
    @property
    def sp_dataframe_union(self) -> global___SpDataframeUnion: ...
    @property
    def sp_dataframe_union_all(self) -> global___SpDataframeUnionAll: ...
    @property
    def sp_dataframe_union_all_by_name(self) -> global___SpDataframeUnionAllByName: ...
    @property
    def sp_dataframe_union_by_name(self) -> global___SpDataframeUnionByName: ...
    @property
    def sp_dataframe_unpivot(self) -> global___SpDataframeUnpivot: ...
    @property
    def sp_dataframe_with_column(self) -> global___SpDataframeWithColumn: ...
    @property
    def sp_dataframe_with_column_renamed(self) -> global___SpDataframeWithColumnRenamed: ...
    @property
    def sp_dataframe_with_columns(self) -> global___SpDataframeWithColumns: ...
    @property
    def sp_dataframe_write(self) -> global___SpDataframeWrite: ...
    @property
    def sp_datatype_val(self) -> global___SpDatatypeVal: ...
    @property
    def sp_flatten(self) -> global___SpFlatten: ...
    @property
    def sp_fn_ref(self) -> global___SpFnRef: ...
    @property
    def sp_generator(self) -> global___SpGenerator: ...
    @property
    def sp_grouping_sets(self) -> global___SpGroupingSets: ...
    @property
    def sp_merge_delete_when_matched_clause(self) -> global___SpMergeDeleteWhenMatchedClause: ...
    @property
    def sp_merge_insert_when_not_matched_clause(self) -> global___SpMergeInsertWhenNotMatchedClause: ...
    @property
    def sp_merge_update_when_matched_clause(self) -> global___SpMergeUpdateWhenMatchedClause: ...
    @property
    def sp_range(self) -> global___SpRange: ...
    @property
    def sp_read_avro(self) -> global___SpReadAvro: ...
    @property
    def sp_read_csv(self) -> global___SpReadCsv: ...
    @property
    def sp_read_json(self) -> global___SpReadJson: ...
    @property
    def sp_read_orc(self) -> global___SpReadOrc: ...
    @property
    def sp_read_parquet(self) -> global___SpReadParquet: ...
    @property
    def sp_read_table(self) -> global___SpReadTable: ...
    @property
    def sp_read_xml(self) -> global___SpReadXml: ...
    @property
    def sp_relational_grouped_dataframe_agg(self) -> global___SpRelationalGroupedDataframeAgg: ...
    @property
    def sp_relational_grouped_dataframe_apply_in_pandas(self) -> global___SpRelationalGroupedDataframeApplyInPandas: ...
    @property
    def sp_relational_grouped_dataframe_builtin(self) -> global___SpRelationalGroupedDataframeBuiltin: ...
    @property
    def sp_relational_grouped_dataframe_pivot(self) -> global___SpRelationalGroupedDataframePivot: ...
    @property
    def sp_relational_grouped_dataframe_ref(self) -> global___SpRelationalGroupedDataframeRef: ...
    @property
    def sp_row(self) -> global___SpRow: ...
    @property
    def sp_session_table_function(self) -> global___SpSessionTableFunction: ...
    @property
    def sp_sql(self) -> global___SpSql: ...
    @property
    def sp_table(self) -> global___SpTable: ...
    @property
    def sp_table_delete(self) -> global___SpTableDelete: ...
    @property
    def sp_table_drop_table(self) -> global___SpTableDropTable: ...
    @property
    def sp_table_fn_call_alias(self) -> global___SpTableFnCallAlias: ...
    @property
    def sp_table_fn_call_over(self) -> global___SpTableFnCallOver: ...
    @property
    def sp_table_merge(self) -> global___SpTableMerge: ...
    @property
    def sp_table_sample(self) -> global___SpTableSample: ...
    @property
    def sp_table_update(self) -> global___SpTableUpdate: ...
    @property
    def sp_to_snowpark_pandas(self) -> global___SpToSnowparkPandas: ...
    @property
    def sp_write_copy_into_location(self) -> global___SpWriteCopyIntoLocation: ...
    @property
    def sp_write_csv(self) -> global___SpWriteCsv: ...
    @property
    def sp_write_json(self) -> global___SpWriteJson: ...
    @property
    def sp_write_pandas(self) -> global___SpWritePandas: ...
    @property
    def sp_write_parquet(self) -> global___SpWriteParquet: ...
    @property
    def sp_write_table(self) -> global___SpWriteTable: ...
    @property
    def stored_procedure(self) -> global___StoredProcedure: ...
    @property
    def string_val(self) -> global___StringVal: ...
    @property
    def sub(self) -> global___Sub: ...
    @property
    def truncated_dataframe_expr(self) -> global___TruncatedDataframeExpr: ...
    @property
    def truncated_expr(self) -> global___TruncatedExpr: ...
    @property
    def truncated_relational_grouped_dataframe_expr(self) -> global___TruncatedRelationalGroupedDataframeExpr: ...
    @property
    def tuple_val(self) -> global___TupleVal: ...
    @property
    def udaf(self) -> global___Udaf: ...
    @property
    def udf(self) -> global___Udf: ...
    @property
    def udtf(self) -> global___Udtf: ...
    def __init__(
        self,
        *,
        trait_abstract_extension_expr: global___AbstractExtensionExpr | None = ...,
        trait_abstract_truncated_expr: global___AbstractTruncatedExpr | None = ...,
        trait_bin_op: global___BinOp | None = ...,
        trait_const: global___Const | None = ...,
        trait_fn_id_ref_expr: global___FnIdRefExpr | None = ...,
        trait_fn_name_ref_expr: global___FnNameRefExpr | None = ...,
        trait_fn_ref_expr: global___FnRefExpr | None = ...,
        trait_sp_column_fn: global___SpColumnFn | None = ...,
        trait_sp_dataframe_expr: global___SpDataframeExpr | None = ...,
        trait_sp_dataframe_writer: global___SpDataframeWriter | None = ...,
        trait_sp_matched_clause: global___SpMatchedClause | None = ...,
        trait_sp_relational_grouped_dataframe_expr: global___SpRelationalGroupedDataframeExpr | None = ...,
        trait_sp_write_file: global___SpWriteFile | None = ...,
        trait_unary_op: global___UnaryOp | None = ...,
        add: global___Add | None = ...,
        apply_expr: global___ApplyExpr | None = ...,
        big_decimal_val: global___BigDecimalVal | None = ...,
        big_int_val: global___BigIntVal | None = ...,
        binary_val: global___BinaryVal | None = ...,
        bit_and: global___BitAnd | None = ...,
        bit_or: global___BitOr | None = ...,
        bit_xor: global___BitXor | None = ...,
        bool_val: global___BoolVal | None = ...,
        builtin_fn: global___BuiltinFn | None = ...,
        call_table_function_expr: global___CallTableFunctionExpr | None = ...,
        div: global___Div | None = ...,
        eq: global___Eq | None = ...,
        extension_dataframe_expr: global___ExtensionDataframeExpr | None = ...,
        extension_expr: global___ExtensionExpr | None = ...,
        extension_relational_grouped_dataframe_expr: global___ExtensionRelationalGroupedDataframeExpr | None = ...,
        float64_val: global___Float64Val | None = ...,
        geq: global___Geq | None = ...,
        gt: global___Gt | None = ...,
        indirect_table_fn_id_ref: global___IndirectTableFnIdRef | None = ...,
        indirect_table_fn_name_ref: global___IndirectTableFnNameRef | None = ...,
        int64_val: global___Int64Val | None = ...,
        leq: global___Leq | None = ...,
        list_val: global___ListVal | None = ...,
        lt: global___Lt | None = ...,
        mod: global___Mod | None = ...,
        mul: global___Mul | None = ...,
        neg: global___Neg | None = ...,
        neq: global___Neq | None = ...,
        null_val: global___NullVal | None = ...,
        object_get_item: global___ObjectGetItem | None = ...,
        pow: global___Pow | None = ...,
        python_date_val: global___PythonDateVal | None = ...,
        python_time_val: global___PythonTimeVal | None = ...,
        python_timestamp_val: global___PythonTimestampVal | None = ...,
        redacted_const: global___RedactedConst | None = ...,
        seq_map_val: global___SeqMapVal | None = ...,
        sp_column_alias: global___SpColumnAlias | None = ...,
        sp_column_apply__int: global___SpColumnApply_Int | None = ...,
        sp_column_apply__string: global___SpColumnApply_String | None = ...,
        sp_column_asc: global___SpColumnAsc | None = ...,
        sp_column_between: global___SpColumnBetween | None = ...,
        sp_column_case_when: global___SpColumnCaseWhen | None = ...,
        sp_column_cast: global___SpColumnCast | None = ...,
        sp_column_desc: global___SpColumnDesc | None = ...,
        sp_column_equal_nan: global___SpColumnEqualNan | None = ...,
        sp_column_equal_null: global___SpColumnEqualNull | None = ...,
        sp_column_in: global___SpColumnIn | None = ...,
        sp_column_is_not_null: global___SpColumnIsNotNull | None = ...,
        sp_column_is_null: global___SpColumnIsNull | None = ...,
        sp_column_over: global___SpColumnOver | None = ...,
        sp_column_sql_expr: global___SpColumnSqlExpr | None = ...,
        sp_column_string_collate: global___SpColumnStringCollate | None = ...,
        sp_column_string_contains: global___SpColumnStringContains | None = ...,
        sp_column_string_ends_with: global___SpColumnStringEndsWith | None = ...,
        sp_column_string_like: global___SpColumnStringLike | None = ...,
        sp_column_string_regexp: global___SpColumnStringRegexp | None = ...,
        sp_column_string_starts_with: global___SpColumnStringStartsWith | None = ...,
        sp_column_string_substr: global___SpColumnStringSubstr | None = ...,
        sp_column_try_cast: global___SpColumnTryCast | None = ...,
        sp_column_within_group: global___SpColumnWithinGroup | None = ...,
        sp_create_dataframe: global___SpCreateDataframe | None = ...,
        sp_dataframe_agg: global___SpDataframeAgg | None = ...,
        sp_dataframe_alias: global___SpDataframeAlias | None = ...,
        sp_dataframe_analytics_compute_lag: global___SpDataframeAnalyticsComputeLag | None = ...,
        sp_dataframe_analytics_compute_lead: global___SpDataframeAnalyticsComputeLead | None = ...,
        sp_dataframe_analytics_cumulative_agg: global___SpDataframeAnalyticsCumulativeAgg | None = ...,
        sp_dataframe_analytics_moving_agg: global___SpDataframeAnalyticsMovingAgg | None = ...,
        sp_dataframe_analytics_time_series_agg: global___SpDataframeAnalyticsTimeSeriesAgg | None = ...,
        sp_dataframe_cache_result: global___SpDataframeCacheResult | None = ...,
        sp_dataframe_col: global___SpDataframeCol | None = ...,
        sp_dataframe_collect: global___SpDataframeCollect | None = ...,
        sp_dataframe_copy_into_table: global___SpDataframeCopyIntoTable | None = ...,
        sp_dataframe_count: global___SpDataframeCount | None = ...,
        sp_dataframe_create_or_replace_dynamic_table: global___SpDataframeCreateOrReplaceDynamicTable | None = ...,
        sp_dataframe_create_or_replace_view: global___SpDataframeCreateOrReplaceView | None = ...,
        sp_dataframe_cross_join: global___SpDataframeCrossJoin | None = ...,
        sp_dataframe_cube: global___SpDataframeCube | None = ...,
        sp_dataframe_describe: global___SpDataframeDescribe | None = ...,
        sp_dataframe_distinct: global___SpDataframeDistinct | None = ...,
        sp_dataframe_drop: global___SpDataframeDrop | None = ...,
        sp_dataframe_drop_duplicates: global___SpDataframeDropDuplicates | None = ...,
        sp_dataframe_except: global___SpDataframeExcept | None = ...,
        sp_dataframe_filter: global___SpDataframeFilter | None = ...,
        sp_dataframe_first: global___SpDataframeFirst | None = ...,
        sp_dataframe_flatten: global___SpDataframeFlatten | None = ...,
        sp_dataframe_group_by: global___SpDataframeGroupBy | None = ...,
        sp_dataframe_group_by_grouping_sets: global___SpDataframeGroupByGroupingSets | None = ...,
        sp_dataframe_intersect: global___SpDataframeIntersect | None = ...,
        sp_dataframe_join: global___SpDataframeJoin | None = ...,
        sp_dataframe_join_table_function: global___SpDataframeJoinTableFunction | None = ...,
        sp_dataframe_limit: global___SpDataframeLimit | None = ...,
        sp_dataframe_na_drop__python: global___SpDataframeNaDrop_Python | None = ...,
        sp_dataframe_na_drop__scala: global___SpDataframeNaDrop_Scala | None = ...,
        sp_dataframe_na_fill: global___SpDataframeNaFill | None = ...,
        sp_dataframe_na_replace: global___SpDataframeNaReplace | None = ...,
        sp_dataframe_natural_join: global___SpDataframeNaturalJoin | None = ...,
        sp_dataframe_pivot: global___SpDataframePivot | None = ...,
        sp_dataframe_random_split: global___SpDataframeRandomSplit | None = ...,
        sp_dataframe_ref: global___SpDataframeRef | None = ...,
        sp_dataframe_rename: global___SpDataframeRename | None = ...,
        sp_dataframe_rollup: global___SpDataframeRollup | None = ...,
        sp_dataframe_sample: global___SpDataframeSample | None = ...,
        sp_dataframe_select__columns: global___SpDataframeSelect_Columns | None = ...,
        sp_dataframe_select__exprs: global___SpDataframeSelect_Exprs | None = ...,
        sp_dataframe_show: global___SpDataframeShow | None = ...,
        sp_dataframe_sort: global___SpDataframeSort | None = ...,
        sp_dataframe_stat_approx_quantile: global___SpDataframeStatApproxQuantile | None = ...,
        sp_dataframe_stat_corr: global___SpDataframeStatCorr | None = ...,
        sp_dataframe_stat_cov: global___SpDataframeStatCov | None = ...,
        sp_dataframe_stat_cross_tab: global___SpDataframeStatCrossTab | None = ...,
        sp_dataframe_stat_sample_by: global___SpDataframeStatSampleBy | None = ...,
        sp_dataframe_to_df: global___SpDataframeToDf | None = ...,
        sp_dataframe_to_local_iterator: global___SpDataframeToLocalIterator | None = ...,
        sp_dataframe_to_pandas: global___SpDataframeToPandas | None = ...,
        sp_dataframe_to_pandas_batches: global___SpDataframeToPandasBatches | None = ...,
        sp_dataframe_union: global___SpDataframeUnion | None = ...,
        sp_dataframe_union_all: global___SpDataframeUnionAll | None = ...,
        sp_dataframe_union_all_by_name: global___SpDataframeUnionAllByName | None = ...,
        sp_dataframe_union_by_name: global___SpDataframeUnionByName | None = ...,
        sp_dataframe_unpivot: global___SpDataframeUnpivot | None = ...,
        sp_dataframe_with_column: global___SpDataframeWithColumn | None = ...,
        sp_dataframe_with_column_renamed: global___SpDataframeWithColumnRenamed | None = ...,
        sp_dataframe_with_columns: global___SpDataframeWithColumns | None = ...,
        sp_dataframe_write: global___SpDataframeWrite | None = ...,
        sp_datatype_val: global___SpDatatypeVal | None = ...,
        sp_flatten: global___SpFlatten | None = ...,
        sp_fn_ref: global___SpFnRef | None = ...,
        sp_generator: global___SpGenerator | None = ...,
        sp_grouping_sets: global___SpGroupingSets | None = ...,
        sp_merge_delete_when_matched_clause: global___SpMergeDeleteWhenMatchedClause | None = ...,
        sp_merge_insert_when_not_matched_clause: global___SpMergeInsertWhenNotMatchedClause | None = ...,
        sp_merge_update_when_matched_clause: global___SpMergeUpdateWhenMatchedClause | None = ...,
        sp_range: global___SpRange | None = ...,
        sp_read_avro: global___SpReadAvro | None = ...,
        sp_read_csv: global___SpReadCsv | None = ...,
        sp_read_json: global___SpReadJson | None = ...,
        sp_read_orc: global___SpReadOrc | None = ...,
        sp_read_parquet: global___SpReadParquet | None = ...,
        sp_read_table: global___SpReadTable | None = ...,
        sp_read_xml: global___SpReadXml | None = ...,
        sp_relational_grouped_dataframe_agg: global___SpRelationalGroupedDataframeAgg | None = ...,
        sp_relational_grouped_dataframe_apply_in_pandas: global___SpRelationalGroupedDataframeApplyInPandas | None = ...,
        sp_relational_grouped_dataframe_builtin: global___SpRelationalGroupedDataframeBuiltin | None = ...,
        sp_relational_grouped_dataframe_pivot: global___SpRelationalGroupedDataframePivot | None = ...,
        sp_relational_grouped_dataframe_ref: global___SpRelationalGroupedDataframeRef | None = ...,
        sp_row: global___SpRow | None = ...,
        sp_session_table_function: global___SpSessionTableFunction | None = ...,
        sp_sql: global___SpSql | None = ...,
        sp_table: global___SpTable | None = ...,
        sp_table_delete: global___SpTableDelete | None = ...,
        sp_table_drop_table: global___SpTableDropTable | None = ...,
        sp_table_fn_call_alias: global___SpTableFnCallAlias | None = ...,
        sp_table_fn_call_over: global___SpTableFnCallOver | None = ...,
        sp_table_merge: global___SpTableMerge | None = ...,
        sp_table_sample: global___SpTableSample | None = ...,
        sp_table_update: global___SpTableUpdate | None = ...,
        sp_to_snowpark_pandas: global___SpToSnowparkPandas | None = ...,
        sp_write_copy_into_location: global___SpWriteCopyIntoLocation | None = ...,
        sp_write_csv: global___SpWriteCsv | None = ...,
        sp_write_json: global___SpWriteJson | None = ...,
        sp_write_pandas: global___SpWritePandas | None = ...,
        sp_write_parquet: global___SpWriteParquet | None = ...,
        sp_write_table: global___SpWriteTable | None = ...,
        stored_procedure: global___StoredProcedure | None = ...,
        string_val: global___StringVal | None = ...,
        sub: global___Sub | None = ...,
        truncated_dataframe_expr: global___TruncatedDataframeExpr | None = ...,
        truncated_expr: global___TruncatedExpr | None = ...,
        truncated_relational_grouped_dataframe_expr: global___TruncatedRelationalGroupedDataframeExpr | None = ...,
        tuple_val: global___TupleVal | None = ...,
        udaf: global___Udaf | None = ...,
        udf: global___Udf | None = ...,
        udtf: global___Udtf | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["add", b"add", "and", b"and", "apply_expr", b"apply_expr", "big_decimal_val", b"big_decimal_val", "big_int_val", b"big_int_val", "binary_val", b"binary_val", "bit_and", b"bit_and", "bit_or", b"bit_or", "bit_xor", b"bit_xor", "bool_val", b"bool_val", "builtin_fn", b"builtin_fn", "call_table_function_expr", b"call_table_function_expr", "div", b"div", "eq", b"eq", "extension_dataframe_expr", b"extension_dataframe_expr", "extension_expr", b"extension_expr", "extension_relational_grouped_dataframe_expr", b"extension_relational_grouped_dataframe_expr", "float64_val", b"float64_val", "geq", b"geq", "gt", b"gt", "indirect_table_fn_id_ref", b"indirect_table_fn_id_ref", "indirect_table_fn_name_ref", b"indirect_table_fn_name_ref", "int64_val", b"int64_val", "leq", b"leq", "list_val", b"list_val", "lt", b"lt", "mod", b"mod", "mul", b"mul", "neg", b"neg", "neq", b"neq", "not", b"not", "null_val", b"null_val", "object_get_item", b"object_get_item", "or", b"or", "pow", b"pow", "python_date_val", b"python_date_val", "python_time_val", b"python_time_val", "python_timestamp_val", b"python_timestamp_val", "redacted_const", b"redacted_const", "seq_map_val", b"seq_map_val", "sp_column_alias", b"sp_column_alias", "sp_column_apply__int", b"sp_column_apply__int", "sp_column_apply__string", b"sp_column_apply__string", "sp_column_asc", b"sp_column_asc", "sp_column_between", b"sp_column_between", "sp_column_case_when", b"sp_column_case_when", "sp_column_cast", b"sp_column_cast", "sp_column_desc", b"sp_column_desc", "sp_column_equal_nan", b"sp_column_equal_nan", "sp_column_equal_null", b"sp_column_equal_null", "sp_column_in", b"sp_column_in", "sp_column_is_not_null", b"sp_column_is_not_null", "sp_column_is_null", b"sp_column_is_null", "sp_column_over", b"sp_column_over", "sp_column_sql_expr", b"sp_column_sql_expr", "sp_column_string_collate", b"sp_column_string_collate", "sp_column_string_contains", b"sp_column_string_contains", "sp_column_string_ends_with", b"sp_column_string_ends_with", "sp_column_string_like", b"sp_column_string_like", "sp_column_string_regexp", b"sp_column_string_regexp", "sp_column_string_starts_with", b"sp_column_string_starts_with", "sp_column_string_substr", b"sp_column_string_substr", "sp_column_try_cast", b"sp_column_try_cast", "sp_column_within_group", b"sp_column_within_group", "sp_create_dataframe", b"sp_create_dataframe", "sp_dataframe_agg", b"sp_dataframe_agg", "sp_dataframe_alias", b"sp_dataframe_alias", "sp_dataframe_analytics_compute_lag", b"sp_dataframe_analytics_compute_lag", "sp_dataframe_analytics_compute_lead", b"sp_dataframe_analytics_compute_lead", "sp_dataframe_analytics_cumulative_agg", b"sp_dataframe_analytics_cumulative_agg", "sp_dataframe_analytics_moving_agg", b"sp_dataframe_analytics_moving_agg", "sp_dataframe_analytics_time_series_agg", b"sp_dataframe_analytics_time_series_agg", "sp_dataframe_cache_result", b"sp_dataframe_cache_result", "sp_dataframe_col", b"sp_dataframe_col", "sp_dataframe_collect", b"sp_dataframe_collect", "sp_dataframe_copy_into_table", b"sp_dataframe_copy_into_table", "sp_dataframe_count", b"sp_dataframe_count", "sp_dataframe_create_or_replace_dynamic_table", b"sp_dataframe_create_or_replace_dynamic_table", "sp_dataframe_create_or_replace_view", b"sp_dataframe_create_or_replace_view", "sp_dataframe_cross_join", b"sp_dataframe_cross_join", "sp_dataframe_cube", b"sp_dataframe_cube", "sp_dataframe_describe", b"sp_dataframe_describe", "sp_dataframe_distinct", b"sp_dataframe_distinct", "sp_dataframe_drop", b"sp_dataframe_drop", "sp_dataframe_drop_duplicates", b"sp_dataframe_drop_duplicates", "sp_dataframe_except", b"sp_dataframe_except", "sp_dataframe_filter", b"sp_dataframe_filter", "sp_dataframe_first", b"sp_dataframe_first", "sp_dataframe_flatten", b"sp_dataframe_flatten", "sp_dataframe_group_by", b"sp_dataframe_group_by", "sp_dataframe_group_by_grouping_sets", b"sp_dataframe_group_by_grouping_sets", "sp_dataframe_intersect", b"sp_dataframe_intersect", "sp_dataframe_join", b"sp_dataframe_join", "sp_dataframe_join_table_function", b"sp_dataframe_join_table_function", "sp_dataframe_limit", b"sp_dataframe_limit", "sp_dataframe_na_drop__python", b"sp_dataframe_na_drop__python", "sp_dataframe_na_drop__scala", b"sp_dataframe_na_drop__scala", "sp_dataframe_na_fill", b"sp_dataframe_na_fill", "sp_dataframe_na_replace", b"sp_dataframe_na_replace", "sp_dataframe_natural_join", b"sp_dataframe_natural_join", "sp_dataframe_pivot", b"sp_dataframe_pivot", "sp_dataframe_random_split", b"sp_dataframe_random_split", "sp_dataframe_ref", b"sp_dataframe_ref", "sp_dataframe_rename", b"sp_dataframe_rename", "sp_dataframe_rollup", b"sp_dataframe_rollup", "sp_dataframe_sample", b"sp_dataframe_sample", "sp_dataframe_select__columns", b"sp_dataframe_select__columns", "sp_dataframe_select__exprs", b"sp_dataframe_select__exprs", "sp_dataframe_show", b"sp_dataframe_show", "sp_dataframe_sort", b"sp_dataframe_sort", "sp_dataframe_stat_approx_quantile", b"sp_dataframe_stat_approx_quantile", "sp_dataframe_stat_corr", b"sp_dataframe_stat_corr", "sp_dataframe_stat_cov", b"sp_dataframe_stat_cov", "sp_dataframe_stat_cross_tab", b"sp_dataframe_stat_cross_tab", "sp_dataframe_stat_sample_by", b"sp_dataframe_stat_sample_by", "sp_dataframe_to_df", b"sp_dataframe_to_df", "sp_dataframe_to_local_iterator", b"sp_dataframe_to_local_iterator", "sp_dataframe_to_pandas", b"sp_dataframe_to_pandas", "sp_dataframe_to_pandas_batches", b"sp_dataframe_to_pandas_batches", "sp_dataframe_union", b"sp_dataframe_union", "sp_dataframe_union_all", b"sp_dataframe_union_all", "sp_dataframe_union_all_by_name", b"sp_dataframe_union_all_by_name", "sp_dataframe_union_by_name", b"sp_dataframe_union_by_name", "sp_dataframe_unpivot", b"sp_dataframe_unpivot", "sp_dataframe_with_column", b"sp_dataframe_with_column", "sp_dataframe_with_column_renamed", b"sp_dataframe_with_column_renamed", "sp_dataframe_with_columns", b"sp_dataframe_with_columns", "sp_dataframe_write", b"sp_dataframe_write", "sp_datatype_val", b"sp_datatype_val", "sp_flatten", b"sp_flatten", "sp_fn_ref", b"sp_fn_ref", "sp_generator", b"sp_generator", "sp_grouping_sets", b"sp_grouping_sets", "sp_merge_delete_when_matched_clause", b"sp_merge_delete_when_matched_clause", "sp_merge_insert_when_not_matched_clause", b"sp_merge_insert_when_not_matched_clause", "sp_merge_update_when_matched_clause", b"sp_merge_update_when_matched_clause", "sp_range", b"sp_range", "sp_read_avro", b"sp_read_avro", "sp_read_csv", b"sp_read_csv", "sp_read_json", b"sp_read_json", "sp_read_orc", b"sp_read_orc", "sp_read_parquet", b"sp_read_parquet", "sp_read_table", b"sp_read_table", "sp_read_xml", b"sp_read_xml", "sp_relational_grouped_dataframe_agg", b"sp_relational_grouped_dataframe_agg", "sp_relational_grouped_dataframe_apply_in_pandas", b"sp_relational_grouped_dataframe_apply_in_pandas", "sp_relational_grouped_dataframe_builtin", b"sp_relational_grouped_dataframe_builtin", "sp_relational_grouped_dataframe_pivot", b"sp_relational_grouped_dataframe_pivot", "sp_relational_grouped_dataframe_ref", b"sp_relational_grouped_dataframe_ref", "sp_row", b"sp_row", "sp_session_table_function", b"sp_session_table_function", "sp_sql", b"sp_sql", "sp_table", b"sp_table", "sp_table_delete", b"sp_table_delete", "sp_table_drop_table", b"sp_table_drop_table", "sp_table_fn_call_alias", b"sp_table_fn_call_alias", "sp_table_fn_call_over", b"sp_table_fn_call_over", "sp_table_merge", b"sp_table_merge", "sp_table_sample", b"sp_table_sample", "sp_table_update", b"sp_table_update", "sp_to_snowpark_pandas", b"sp_to_snowpark_pandas", "sp_write_copy_into_location", b"sp_write_copy_into_location", "sp_write_csv", b"sp_write_csv", "sp_write_json", b"sp_write_json", "sp_write_pandas", b"sp_write_pandas", "sp_write_parquet", b"sp_write_parquet", "sp_write_table", b"sp_write_table", "stored_procedure", b"stored_procedure", "string_val", b"string_val", "sub", b"sub", "trait_abstract_extension_expr", b"trait_abstract_extension_expr", "trait_abstract_truncated_expr", b"trait_abstract_truncated_expr", "trait_bin_op", b"trait_bin_op", "trait_const", b"trait_const", "trait_fn_id_ref_expr", b"trait_fn_id_ref_expr", "trait_fn_name_ref_expr", b"trait_fn_name_ref_expr", "trait_fn_ref_expr", b"trait_fn_ref_expr", "trait_sp_column_fn", b"trait_sp_column_fn", "trait_sp_dataframe_expr", b"trait_sp_dataframe_expr", "trait_sp_dataframe_writer", b"trait_sp_dataframe_writer", "trait_sp_matched_clause", b"trait_sp_matched_clause", "trait_sp_relational_grouped_dataframe_expr", b"trait_sp_relational_grouped_dataframe_expr", "trait_sp_write_file", b"trait_sp_write_file", "trait_unary_op", b"trait_unary_op", "truncated_dataframe_expr", b"truncated_dataframe_expr", "truncated_expr", b"truncated_expr", "truncated_relational_grouped_dataframe_expr", b"truncated_relational_grouped_dataframe_expr", "tuple_val", b"tuple_val", "udaf", b"udaf", "udf", b"udf", "udtf", b"udtf", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["add", b"add", "and", b"and", "apply_expr", b"apply_expr", "big_decimal_val", b"big_decimal_val", "big_int_val", b"big_int_val", "binary_val", b"binary_val", "bit_and", b"bit_and", "bit_or", b"bit_or", "bit_xor", b"bit_xor", "bool_val", b"bool_val", "builtin_fn", b"builtin_fn", "call_table_function_expr", b"call_table_function_expr", "div", b"div", "eq", b"eq", "extension_dataframe_expr", b"extension_dataframe_expr", "extension_expr", b"extension_expr", "extension_relational_grouped_dataframe_expr", b"extension_relational_grouped_dataframe_expr", "float64_val", b"float64_val", "geq", b"geq", "gt", b"gt", "indirect_table_fn_id_ref", b"indirect_table_fn_id_ref", "indirect_table_fn_name_ref", b"indirect_table_fn_name_ref", "int64_val", b"int64_val", "leq", b"leq", "list_val", b"list_val", "lt", b"lt", "mod", b"mod", "mul", b"mul", "neg", b"neg", "neq", b"neq", "not", b"not", "null_val", b"null_val", "object_get_item", b"object_get_item", "or", b"or", "pow", b"pow", "python_date_val", b"python_date_val", "python_time_val", b"python_time_val", "python_timestamp_val", b"python_timestamp_val", "redacted_const", b"redacted_const", "seq_map_val", b"seq_map_val", "sp_column_alias", b"sp_column_alias", "sp_column_apply__int", b"sp_column_apply__int", "sp_column_apply__string", b"sp_column_apply__string", "sp_column_asc", b"sp_column_asc", "sp_column_between", b"sp_column_between", "sp_column_case_when", b"sp_column_case_when", "sp_column_cast", b"sp_column_cast", "sp_column_desc", b"sp_column_desc", "sp_column_equal_nan", b"sp_column_equal_nan", "sp_column_equal_null", b"sp_column_equal_null", "sp_column_in", b"sp_column_in", "sp_column_is_not_null", b"sp_column_is_not_null", "sp_column_is_null", b"sp_column_is_null", "sp_column_over", b"sp_column_over", "sp_column_sql_expr", b"sp_column_sql_expr", "sp_column_string_collate", b"sp_column_string_collate", "sp_column_string_contains", b"sp_column_string_contains", "sp_column_string_ends_with", b"sp_column_string_ends_with", "sp_column_string_like", b"sp_column_string_like", "sp_column_string_regexp", b"sp_column_string_regexp", "sp_column_string_starts_with", b"sp_column_string_starts_with", "sp_column_string_substr", b"sp_column_string_substr", "sp_column_try_cast", b"sp_column_try_cast", "sp_column_within_group", b"sp_column_within_group", "sp_create_dataframe", b"sp_create_dataframe", "sp_dataframe_agg", b"sp_dataframe_agg", "sp_dataframe_alias", b"sp_dataframe_alias", "sp_dataframe_analytics_compute_lag", b"sp_dataframe_analytics_compute_lag", "sp_dataframe_analytics_compute_lead", b"sp_dataframe_analytics_compute_lead", "sp_dataframe_analytics_cumulative_agg", b"sp_dataframe_analytics_cumulative_agg", "sp_dataframe_analytics_moving_agg", b"sp_dataframe_analytics_moving_agg", "sp_dataframe_analytics_time_series_agg", b"sp_dataframe_analytics_time_series_agg", "sp_dataframe_cache_result", b"sp_dataframe_cache_result", "sp_dataframe_col", b"sp_dataframe_col", "sp_dataframe_collect", b"sp_dataframe_collect", "sp_dataframe_copy_into_table", b"sp_dataframe_copy_into_table", "sp_dataframe_count", b"sp_dataframe_count", "sp_dataframe_create_or_replace_dynamic_table", b"sp_dataframe_create_or_replace_dynamic_table", "sp_dataframe_create_or_replace_view", b"sp_dataframe_create_or_replace_view", "sp_dataframe_cross_join", b"sp_dataframe_cross_join", "sp_dataframe_cube", b"sp_dataframe_cube", "sp_dataframe_describe", b"sp_dataframe_describe", "sp_dataframe_distinct", b"sp_dataframe_distinct", "sp_dataframe_drop", b"sp_dataframe_drop", "sp_dataframe_drop_duplicates", b"sp_dataframe_drop_duplicates", "sp_dataframe_except", b"sp_dataframe_except", "sp_dataframe_filter", b"sp_dataframe_filter", "sp_dataframe_first", b"sp_dataframe_first", "sp_dataframe_flatten", b"sp_dataframe_flatten", "sp_dataframe_group_by", b"sp_dataframe_group_by", "sp_dataframe_group_by_grouping_sets", b"sp_dataframe_group_by_grouping_sets", "sp_dataframe_intersect", b"sp_dataframe_intersect", "sp_dataframe_join", b"sp_dataframe_join", "sp_dataframe_join_table_function", b"sp_dataframe_join_table_function", "sp_dataframe_limit", b"sp_dataframe_limit", "sp_dataframe_na_drop__python", b"sp_dataframe_na_drop__python", "sp_dataframe_na_drop__scala", b"sp_dataframe_na_drop__scala", "sp_dataframe_na_fill", b"sp_dataframe_na_fill", "sp_dataframe_na_replace", b"sp_dataframe_na_replace", "sp_dataframe_natural_join", b"sp_dataframe_natural_join", "sp_dataframe_pivot", b"sp_dataframe_pivot", "sp_dataframe_random_split", b"sp_dataframe_random_split", "sp_dataframe_ref", b"sp_dataframe_ref", "sp_dataframe_rename", b"sp_dataframe_rename", "sp_dataframe_rollup", b"sp_dataframe_rollup", "sp_dataframe_sample", b"sp_dataframe_sample", "sp_dataframe_select__columns", b"sp_dataframe_select__columns", "sp_dataframe_select__exprs", b"sp_dataframe_select__exprs", "sp_dataframe_show", b"sp_dataframe_show", "sp_dataframe_sort", b"sp_dataframe_sort", "sp_dataframe_stat_approx_quantile", b"sp_dataframe_stat_approx_quantile", "sp_dataframe_stat_corr", b"sp_dataframe_stat_corr", "sp_dataframe_stat_cov", b"sp_dataframe_stat_cov", "sp_dataframe_stat_cross_tab", b"sp_dataframe_stat_cross_tab", "sp_dataframe_stat_sample_by", b"sp_dataframe_stat_sample_by", "sp_dataframe_to_df", b"sp_dataframe_to_df", "sp_dataframe_to_local_iterator", b"sp_dataframe_to_local_iterator", "sp_dataframe_to_pandas", b"sp_dataframe_to_pandas", "sp_dataframe_to_pandas_batches", b"sp_dataframe_to_pandas_batches", "sp_dataframe_union", b"sp_dataframe_union", "sp_dataframe_union_all", b"sp_dataframe_union_all", "sp_dataframe_union_all_by_name", b"sp_dataframe_union_all_by_name", "sp_dataframe_union_by_name", b"sp_dataframe_union_by_name", "sp_dataframe_unpivot", b"sp_dataframe_unpivot", "sp_dataframe_with_column", b"sp_dataframe_with_column", "sp_dataframe_with_column_renamed", b"sp_dataframe_with_column_renamed", "sp_dataframe_with_columns", b"sp_dataframe_with_columns", "sp_dataframe_write", b"sp_dataframe_write", "sp_datatype_val", b"sp_datatype_val", "sp_flatten", b"sp_flatten", "sp_fn_ref", b"sp_fn_ref", "sp_generator", b"sp_generator", "sp_grouping_sets", b"sp_grouping_sets", "sp_merge_delete_when_matched_clause", b"sp_merge_delete_when_matched_clause", "sp_merge_insert_when_not_matched_clause", b"sp_merge_insert_when_not_matched_clause", "sp_merge_update_when_matched_clause", b"sp_merge_update_when_matched_clause", "sp_range", b"sp_range", "sp_read_avro", b"sp_read_avro", "sp_read_csv", b"sp_read_csv", "sp_read_json", b"sp_read_json", "sp_read_orc", b"sp_read_orc", "sp_read_parquet", b"sp_read_parquet", "sp_read_table", b"sp_read_table", "sp_read_xml", b"sp_read_xml", "sp_relational_grouped_dataframe_agg", b"sp_relational_grouped_dataframe_agg", "sp_relational_grouped_dataframe_apply_in_pandas", b"sp_relational_grouped_dataframe_apply_in_pandas", "sp_relational_grouped_dataframe_builtin", b"sp_relational_grouped_dataframe_builtin", "sp_relational_grouped_dataframe_pivot", b"sp_relational_grouped_dataframe_pivot", "sp_relational_grouped_dataframe_ref", b"sp_relational_grouped_dataframe_ref", "sp_row", b"sp_row", "sp_session_table_function", b"sp_session_table_function", "sp_sql", b"sp_sql", "sp_table", b"sp_table", "sp_table_delete", b"sp_table_delete", "sp_table_drop_table", b"sp_table_drop_table", "sp_table_fn_call_alias", b"sp_table_fn_call_alias", "sp_table_fn_call_over", b"sp_table_fn_call_over", "sp_table_merge", b"sp_table_merge", "sp_table_sample", b"sp_table_sample", "sp_table_update", b"sp_table_update", "sp_to_snowpark_pandas", b"sp_to_snowpark_pandas", "sp_write_copy_into_location", b"sp_write_copy_into_location", "sp_write_csv", b"sp_write_csv", "sp_write_json", b"sp_write_json", "sp_write_pandas", b"sp_write_pandas", "sp_write_parquet", b"sp_write_parquet", "sp_write_table", b"sp_write_table", "stored_procedure", b"stored_procedure", "string_val", b"string_val", "sub", b"sub", "trait_abstract_extension_expr", b"trait_abstract_extension_expr", "trait_abstract_truncated_expr", b"trait_abstract_truncated_expr", "trait_bin_op", b"trait_bin_op", "trait_const", b"trait_const", "trait_fn_id_ref_expr", b"trait_fn_id_ref_expr", "trait_fn_name_ref_expr", b"trait_fn_name_ref_expr", "trait_fn_ref_expr", b"trait_fn_ref_expr", "trait_sp_column_fn", b"trait_sp_column_fn", "trait_sp_dataframe_expr", b"trait_sp_dataframe_expr", "trait_sp_dataframe_writer", b"trait_sp_dataframe_writer", "trait_sp_matched_clause", b"trait_sp_matched_clause", "trait_sp_relational_grouped_dataframe_expr", b"trait_sp_relational_grouped_dataframe_expr", "trait_sp_write_file", b"trait_sp_write_file", "trait_unary_op", b"trait_unary_op", "truncated_dataframe_expr", b"truncated_dataframe_expr", "truncated_expr", b"truncated_expr", "truncated_relational_grouped_dataframe_expr", b"truncated_relational_grouped_dataframe_expr", "tuple_val", b"tuple_val", "udaf", b"udaf", "udf", b"udf", "udtf", b"udtf", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["trait_abstract_extension_expr", "trait_abstract_truncated_expr", "trait_bin_op", "trait_const", "trait_fn_id_ref_expr", "trait_fn_name_ref_expr", "trait_fn_ref_expr", "trait_sp_column_fn", "trait_sp_dataframe_expr", "trait_sp_dataframe_writer", "trait_sp_matched_clause", "trait_sp_relational_grouped_dataframe_expr", "trait_sp_write_file", "trait_unary_op", "add", "and", "apply_expr", "big_decimal_val", "big_int_val", "binary_val", "bit_and", "bit_or", "bit_xor", "bool_val", "builtin_fn", "call_table_function_expr", "div", "eq", "extension_dataframe_expr", "extension_expr", "extension_relational_grouped_dataframe_expr", "float64_val", "geq", "gt", "indirect_table_fn_id_ref", "indirect_table_fn_name_ref", "int64_val", "leq", "list_val", "lt", "mod", "mul", "neg", "neq", "not", "null_val", "object_get_item", "or", "pow", "python_date_val", "python_time_val", "python_timestamp_val", "redacted_const", "seq_map_val", "sp_column_alias", "sp_column_apply__int", "sp_column_apply__string", "sp_column_asc", "sp_column_between", "sp_column_case_when", "sp_column_cast", "sp_column_desc", "sp_column_equal_nan", "sp_column_equal_null", "sp_column_in", "sp_column_is_not_null", "sp_column_is_null", "sp_column_over", "sp_column_sql_expr", "sp_column_string_collate", "sp_column_string_contains", "sp_column_string_ends_with", "sp_column_string_like", "sp_column_string_regexp", "sp_column_string_starts_with", "sp_column_string_substr", "sp_column_try_cast", "sp_column_within_group", "sp_create_dataframe", "sp_dataframe_agg", "sp_dataframe_alias", "sp_dataframe_analytics_compute_lag", "sp_dataframe_analytics_compute_lead", "sp_dataframe_analytics_cumulative_agg", "sp_dataframe_analytics_moving_agg", "sp_dataframe_analytics_time_series_agg", "sp_dataframe_cache_result", "sp_dataframe_col", "sp_dataframe_collect", "sp_dataframe_copy_into_table", "sp_dataframe_count", "sp_dataframe_create_or_replace_dynamic_table", "sp_dataframe_create_or_replace_view", "sp_dataframe_cross_join", "sp_dataframe_cube", "sp_dataframe_describe", "sp_dataframe_distinct", "sp_dataframe_drop", "sp_dataframe_drop_duplicates", "sp_dataframe_except", "sp_dataframe_filter", "sp_dataframe_first", "sp_dataframe_flatten", "sp_dataframe_group_by", "sp_dataframe_group_by_grouping_sets", "sp_dataframe_intersect", "sp_dataframe_join", "sp_dataframe_join_table_function", "sp_dataframe_limit", "sp_dataframe_na_drop__python", "sp_dataframe_na_drop__scala", "sp_dataframe_na_fill", "sp_dataframe_na_replace", "sp_dataframe_natural_join", "sp_dataframe_pivot", "sp_dataframe_random_split", "sp_dataframe_ref", "sp_dataframe_rename", "sp_dataframe_rollup", "sp_dataframe_sample", "sp_dataframe_select__columns", "sp_dataframe_select__exprs", "sp_dataframe_show", "sp_dataframe_sort", "sp_dataframe_stat_approx_quantile", "sp_dataframe_stat_corr", "sp_dataframe_stat_cov", "sp_dataframe_stat_cross_tab", "sp_dataframe_stat_sample_by", "sp_dataframe_to_df", "sp_dataframe_to_local_iterator", "sp_dataframe_to_pandas", "sp_dataframe_to_pandas_batches", "sp_dataframe_union", "sp_dataframe_union_all", "sp_dataframe_union_all_by_name", "sp_dataframe_union_by_name", "sp_dataframe_unpivot", "sp_dataframe_with_column", "sp_dataframe_with_column_renamed", "sp_dataframe_with_columns", "sp_dataframe_write", "sp_datatype_val", "sp_flatten", "sp_fn_ref", "sp_generator", "sp_grouping_sets", "sp_merge_delete_when_matched_clause", "sp_merge_insert_when_not_matched_clause", "sp_merge_update_when_matched_clause", "sp_range", "sp_read_avro", "sp_read_csv", "sp_read_json", "sp_read_orc", "sp_read_parquet", "sp_read_table", "sp_read_xml", "sp_relational_grouped_dataframe_agg", "sp_relational_grouped_dataframe_apply_in_pandas", "sp_relational_grouped_dataframe_builtin", "sp_relational_grouped_dataframe_pivot", "sp_relational_grouped_dataframe_ref", "sp_row", "sp_session_table_function", "sp_sql", "sp_table", "sp_table_delete", "sp_table_drop_table", "sp_table_fn_call_alias", "sp_table_fn_call_over", "sp_table_merge", "sp_table_sample", "sp_table_update", "sp_to_snowpark_pandas", "sp_write_copy_into_location", "sp_write_csv", "sp_write_json", "sp_write_pandas", "sp_write_parquet", "sp_write_table", "stored_procedure", "string_val", "sub", "truncated_dataframe_expr", "truncated_expr", "truncated_relational_grouped_dataframe_expr", "tuple_val", "udaf", "udf", "udtf"] | None: ...

global___Expr = Expr

@typing.final
class ExprArgList(google.protobuf.message.Message):
    """ast.ir:125"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ARGS_FIELD_NUMBER: builtins.int
    VARIADIC_FIELD_NUMBER: builtins.int
    variadic: builtins.bool
    @property
    def args(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Expr]: ...
    def __init__(
        self,
        *,
        args: collections.abc.Iterable[global___Expr] | None = ...,
        variadic: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["args", b"args", "variadic", b"variadic"]) -> None: ...

global___ExprArgList = ExprArgList

@typing.final
class ExtensionDataframeExpr(google.protobuf.message.Message):
    """dataframe.ir:7"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ATTRS_FIELD_NUMBER: builtins.int
    KIND_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    kind: builtins.str
    @property
    def attrs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_Expr]: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        attrs: collections.abc.Iterable[global___Tuple_String_Expr] | None = ...,
        kind: builtins.str = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["attrs", b"attrs", "kind", b"kind", "src", b"src"]) -> None: ...

global___ExtensionDataframeExpr = ExtensionDataframeExpr

@typing.final
class ExtensionError(google.protobuf.message.Message):
    """ast.ir:71"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ATTRS_FIELD_NUMBER: builtins.int
    KIND_FIELD_NUMBER: builtins.int
    UID_FIELD_NUMBER: builtins.int
    VAR_ID_FIELD_NUMBER: builtins.int
    kind: builtins.str
    uid: builtins.int
    @property
    def attrs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_Expr]: ...
    @property
    def var_id(self) -> global___VarId: ...
    def __init__(
        self,
        *,
        attrs: collections.abc.Iterable[global___Tuple_String_Expr] | None = ...,
        kind: builtins.str = ...,
        uid: builtins.int = ...,
        var_id: global___VarId | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["var_id", b"var_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["attrs", b"attrs", "kind", b"kind", "uid", b"uid", "var_id", b"var_id"]) -> None: ...

global___ExtensionError = ExtensionError

@typing.final
class ExtensionEvalResult(google.protobuf.message.Message):
    """ast.ir:90"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ATTRS_FIELD_NUMBER: builtins.int
    KIND_FIELD_NUMBER: builtins.int
    kind: builtins.str
    @property
    def attrs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_Expr]: ...
    def __init__(
        self,
        *,
        attrs: collections.abc.Iterable[global___Tuple_String_Expr] | None = ...,
        kind: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["attrs", b"attrs", "kind", b"kind"]) -> None: ...

global___ExtensionEvalResult = ExtensionEvalResult

@typing.final
class ExtensionExpr(google.protobuf.message.Message):
    """expr.ir:37"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ATTRS_FIELD_NUMBER: builtins.int
    KIND_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    kind: builtins.str
    @property
    def attrs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_Expr]: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        attrs: collections.abc.Iterable[global___Tuple_String_Expr] | None = ...,
        kind: builtins.str = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["attrs", b"attrs", "kind", b"kind", "src", b"src"]) -> None: ...

global___ExtensionExpr = ExtensionExpr

@typing.final
class ExtensionRelationalGroupedDataframeExpr(google.protobuf.message.Message):
    """dataframe-grouped.ir:3"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ATTRS_FIELD_NUMBER: builtins.int
    KIND_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    kind: builtins.str
    @property
    def attrs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_Expr]: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        attrs: collections.abc.Iterable[global___Tuple_String_Expr] | None = ...,
        kind: builtins.str = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["attrs", b"attrs", "kind", b"kind", "src", b"src"]) -> None: ...

global___ExtensionRelationalGroupedDataframeExpr = ExtensionRelationalGroupedDataframeExpr

@typing.final
class ExtensionStmt(google.protobuf.message.Message):
    """ast.ir:49"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ATTRS_FIELD_NUMBER: builtins.int
    KIND_FIELD_NUMBER: builtins.int
    kind: builtins.str
    @property
    def attrs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_Expr]: ...
    def __init__(
        self,
        *,
        attrs: collections.abc.Iterable[global___Tuple_String_Expr] | None = ...,
        kind: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["attrs", b"attrs", "kind", b"kind"]) -> None: ...

global___ExtensionStmt = ExtensionStmt

@typing.final
class Float64Val(google.protobuf.message.Message):
    """const.ir:34"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SRC_FIELD_NUMBER: builtins.int
    V_FIELD_NUMBER: builtins.int
    v: builtins.float
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        src: global___SrcPosition | None = ...,
        v: builtins.float = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["src", b"src", "v", b"v"]) -> None: ...

global___Float64Val = Float64Val

@typing.final
class FnIdRefExpr(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INDIRECT_TABLE_FN_ID_REF_FIELD_NUMBER: builtins.int
    SP_FN_REF_FIELD_NUMBER: builtins.int
    @property
    def indirect_table_fn_id_ref(self) -> global___IndirectTableFnIdRef: ...
    @property
    def sp_fn_ref(self) -> global___SpFnRef: ...
    def __init__(
        self,
        *,
        indirect_table_fn_id_ref: global___IndirectTableFnIdRef | None = ...,
        sp_fn_ref: global___SpFnRef | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["indirect_table_fn_id_ref", b"indirect_table_fn_id_ref", "sp_fn_ref", b"sp_fn_ref", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["indirect_table_fn_id_ref", b"indirect_table_fn_id_ref", "sp_fn_ref", b"sp_fn_ref", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["indirect_table_fn_id_ref", "sp_fn_ref"] | None: ...

global___FnIdRefExpr = FnIdRefExpr

@typing.final
class FnNameRefExpr(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BUILTIN_FN_FIELD_NUMBER: builtins.int
    CALL_TABLE_FUNCTION_EXPR_FIELD_NUMBER: builtins.int
    INDIRECT_TABLE_FN_NAME_REF_FIELD_NUMBER: builtins.int
    STORED_PROCEDURE_FIELD_NUMBER: builtins.int
    UDAF_FIELD_NUMBER: builtins.int
    UDF_FIELD_NUMBER: builtins.int
    UDTF_FIELD_NUMBER: builtins.int
    @property
    def builtin_fn(self) -> global___BuiltinFn: ...
    @property
    def call_table_function_expr(self) -> global___CallTableFunctionExpr: ...
    @property
    def indirect_table_fn_name_ref(self) -> global___IndirectTableFnNameRef: ...
    @property
    def stored_procedure(self) -> global___StoredProcedure: ...
    @property
    def udaf(self) -> global___Udaf: ...
    @property
    def udf(self) -> global___Udf: ...
    @property
    def udtf(self) -> global___Udtf: ...
    def __init__(
        self,
        *,
        builtin_fn: global___BuiltinFn | None = ...,
        call_table_function_expr: global___CallTableFunctionExpr | None = ...,
        indirect_table_fn_name_ref: global___IndirectTableFnNameRef | None = ...,
        stored_procedure: global___StoredProcedure | None = ...,
        udaf: global___Udaf | None = ...,
        udf: global___Udf | None = ...,
        udtf: global___Udtf | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["builtin_fn", b"builtin_fn", "call_table_function_expr", b"call_table_function_expr", "indirect_table_fn_name_ref", b"indirect_table_fn_name_ref", "stored_procedure", b"stored_procedure", "udaf", b"udaf", "udf", b"udf", "udtf", b"udtf", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["builtin_fn", b"builtin_fn", "call_table_function_expr", b"call_table_function_expr", "indirect_table_fn_name_ref", b"indirect_table_fn_name_ref", "stored_procedure", b"stored_procedure", "udaf", b"udaf", "udf", b"udf", "udtf", b"udtf", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["builtin_fn", "call_table_function_expr", "indirect_table_fn_name_ref", "stored_procedure", "udaf", "udf", "udtf"] | None: ...

global___FnNameRefExpr = FnNameRefExpr

@typing.final
class FnRefExpr(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TRAIT_FN_ID_REF_EXPR_FIELD_NUMBER: builtins.int
    TRAIT_FN_NAME_REF_EXPR_FIELD_NUMBER: builtins.int
    BUILTIN_FN_FIELD_NUMBER: builtins.int
    CALL_TABLE_FUNCTION_EXPR_FIELD_NUMBER: builtins.int
    INDIRECT_TABLE_FN_ID_REF_FIELD_NUMBER: builtins.int
    INDIRECT_TABLE_FN_NAME_REF_FIELD_NUMBER: builtins.int
    SP_FN_REF_FIELD_NUMBER: builtins.int
    STORED_PROCEDURE_FIELD_NUMBER: builtins.int
    UDAF_FIELD_NUMBER: builtins.int
    UDF_FIELD_NUMBER: builtins.int
    UDTF_FIELD_NUMBER: builtins.int
    @property
    def trait_fn_id_ref_expr(self) -> global___FnIdRefExpr: ...
    @property
    def trait_fn_name_ref_expr(self) -> global___FnNameRefExpr: ...
    @property
    def builtin_fn(self) -> global___BuiltinFn: ...
    @property
    def call_table_function_expr(self) -> global___CallTableFunctionExpr: ...
    @property
    def indirect_table_fn_id_ref(self) -> global___IndirectTableFnIdRef: ...
    @property
    def indirect_table_fn_name_ref(self) -> global___IndirectTableFnNameRef: ...
    @property
    def sp_fn_ref(self) -> global___SpFnRef: ...
    @property
    def stored_procedure(self) -> global___StoredProcedure: ...
    @property
    def udaf(self) -> global___Udaf: ...
    @property
    def udf(self) -> global___Udf: ...
    @property
    def udtf(self) -> global___Udtf: ...
    def __init__(
        self,
        *,
        trait_fn_id_ref_expr: global___FnIdRefExpr | None = ...,
        trait_fn_name_ref_expr: global___FnNameRefExpr | None = ...,
        builtin_fn: global___BuiltinFn | None = ...,
        call_table_function_expr: global___CallTableFunctionExpr | None = ...,
        indirect_table_fn_id_ref: global___IndirectTableFnIdRef | None = ...,
        indirect_table_fn_name_ref: global___IndirectTableFnNameRef | None = ...,
        sp_fn_ref: global___SpFnRef | None = ...,
        stored_procedure: global___StoredProcedure | None = ...,
        udaf: global___Udaf | None = ...,
        udf: global___Udf | None = ...,
        udtf: global___Udtf | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["builtin_fn", b"builtin_fn", "call_table_function_expr", b"call_table_function_expr", "indirect_table_fn_id_ref", b"indirect_table_fn_id_ref", "indirect_table_fn_name_ref", b"indirect_table_fn_name_ref", "sp_fn_ref", b"sp_fn_ref", "stored_procedure", b"stored_procedure", "trait_fn_id_ref_expr", b"trait_fn_id_ref_expr", "trait_fn_name_ref_expr", b"trait_fn_name_ref_expr", "udaf", b"udaf", "udf", b"udf", "udtf", b"udtf", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["builtin_fn", b"builtin_fn", "call_table_function_expr", b"call_table_function_expr", "indirect_table_fn_id_ref", b"indirect_table_fn_id_ref", "indirect_table_fn_name_ref", b"indirect_table_fn_name_ref", "sp_fn_ref", b"sp_fn_ref", "stored_procedure", b"stored_procedure", "trait_fn_id_ref_expr", b"trait_fn_id_ref_expr", "trait_fn_name_ref_expr", b"trait_fn_name_ref_expr", "udaf", b"udaf", "udf", b"udf", "udtf", b"udtf", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["trait_fn_id_ref_expr", "trait_fn_name_ref_expr", "builtin_fn", "call_table_function_expr", "indirect_table_fn_id_ref", "indirect_table_fn_name_ref", "sp_fn_ref", "stored_procedure", "udaf", "udf", "udtf"] | None: ...

global___FnRefExpr = FnRefExpr

@typing.final
class Geq(google.protobuf.message.Message):
    """op.ir:34"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LHS_FIELD_NUMBER: builtins.int
    RHS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def lhs(self) -> global___Expr: ...
    @property
    def rhs(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        lhs: global___Expr | None = ...,
        rhs: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> None: ...

global___Geq = Geq

@typing.final
class Gt(google.protobuf.message.Message):
    """op.ir:32"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LHS_FIELD_NUMBER: builtins.int
    RHS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def lhs(self) -> global___Expr: ...
    @property
    def rhs(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        lhs: global___Expr | None = ...,
        rhs: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> None: ...

global___Gt = Gt

@typing.final
class HasSrcPosition(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TRAIT_ABSTRACT_EXTENSION_EXPR_FIELD_NUMBER: builtins.int
    TRAIT_ABSTRACT_TRUNCATED_EXPR_FIELD_NUMBER: builtins.int
    TRAIT_BIN_OP_FIELD_NUMBER: builtins.int
    TRAIT_CONST_FIELD_NUMBER: builtins.int
    TRAIT_EXPR_FIELD_NUMBER: builtins.int
    TRAIT_FN_ID_REF_EXPR_FIELD_NUMBER: builtins.int
    TRAIT_FN_NAME_REF_EXPR_FIELD_NUMBER: builtins.int
    TRAIT_FN_REF_EXPR_FIELD_NUMBER: builtins.int
    TRAIT_SP_COLUMN_FN_FIELD_NUMBER: builtins.int
    TRAIT_SP_DATAFRAME_EXPR_FIELD_NUMBER: builtins.int
    TRAIT_SP_DATAFRAME_READER_FIELD_NUMBER: builtins.int
    TRAIT_SP_DATAFRAME_WRITER_FIELD_NUMBER: builtins.int
    TRAIT_SP_MATCHED_CLAUSE_FIELD_NUMBER: builtins.int
    TRAIT_SP_RELATIONAL_GROUPED_DATAFRAME_EXPR_FIELD_NUMBER: builtins.int
    TRAIT_SP_WINDOW_SPEC_EXPR_FIELD_NUMBER: builtins.int
    TRAIT_SP_WRITE_FILE_FIELD_NUMBER: builtins.int
    TRAIT_UNARY_OP_FIELD_NUMBER: builtins.int
    ADD_FIELD_NUMBER: builtins.int
    AND_FIELD_NUMBER: builtins.int
    APPLY_EXPR_FIELD_NUMBER: builtins.int
    BIG_DECIMAL_VAL_FIELD_NUMBER: builtins.int
    BIG_INT_VAL_FIELD_NUMBER: builtins.int
    BINARY_VAL_FIELD_NUMBER: builtins.int
    BIT_AND_FIELD_NUMBER: builtins.int
    BIT_OR_FIELD_NUMBER: builtins.int
    BIT_XOR_FIELD_NUMBER: builtins.int
    BOOL_VAL_FIELD_NUMBER: builtins.int
    BUILTIN_FN_FIELD_NUMBER: builtins.int
    CALL_TABLE_FUNCTION_EXPR_FIELD_NUMBER: builtins.int
    DIV_FIELD_NUMBER: builtins.int
    EQ_FIELD_NUMBER: builtins.int
    EXTENSION_DATAFRAME_EXPR_FIELD_NUMBER: builtins.int
    EXTENSION_EXPR_FIELD_NUMBER: builtins.int
    EXTENSION_RELATIONAL_GROUPED_DATAFRAME_EXPR_FIELD_NUMBER: builtins.int
    FLOAT64_VAL_FIELD_NUMBER: builtins.int
    GEQ_FIELD_NUMBER: builtins.int
    GT_FIELD_NUMBER: builtins.int
    INDIRECT_TABLE_FN_ID_REF_FIELD_NUMBER: builtins.int
    INDIRECT_TABLE_FN_NAME_REF_FIELD_NUMBER: builtins.int
    INT64_VAL_FIELD_NUMBER: builtins.int
    LEQ_FIELD_NUMBER: builtins.int
    LIST_VAL_FIELD_NUMBER: builtins.int
    LT_FIELD_NUMBER: builtins.int
    MOD_FIELD_NUMBER: builtins.int
    MUL_FIELD_NUMBER: builtins.int
    NEG_FIELD_NUMBER: builtins.int
    NEQ_FIELD_NUMBER: builtins.int
    NOT_FIELD_NUMBER: builtins.int
    NULL_VAL_FIELD_NUMBER: builtins.int
    OBJECT_GET_ITEM_FIELD_NUMBER: builtins.int
    OR_FIELD_NUMBER: builtins.int
    POW_FIELD_NUMBER: builtins.int
    PYTHON_DATE_VAL_FIELD_NUMBER: builtins.int
    PYTHON_TIME_VAL_FIELD_NUMBER: builtins.int
    PYTHON_TIMESTAMP_VAL_FIELD_NUMBER: builtins.int
    REDACTED_CONST_FIELD_NUMBER: builtins.int
    SEQ_MAP_VAL_FIELD_NUMBER: builtins.int
    SP_CASE_EXPR_FIELD_NUMBER: builtins.int
    SP_COLUMN_ALIAS_FIELD_NUMBER: builtins.int
    SP_COLUMN_APPLY__INT_FIELD_NUMBER: builtins.int
    SP_COLUMN_APPLY__STRING_FIELD_NUMBER: builtins.int
    SP_COLUMN_ASC_FIELD_NUMBER: builtins.int
    SP_COLUMN_BETWEEN_FIELD_NUMBER: builtins.int
    SP_COLUMN_CASE_WHEN_FIELD_NUMBER: builtins.int
    SP_COLUMN_CAST_FIELD_NUMBER: builtins.int
    SP_COLUMN_DESC_FIELD_NUMBER: builtins.int
    SP_COLUMN_EQUAL_NAN_FIELD_NUMBER: builtins.int
    SP_COLUMN_EQUAL_NULL_FIELD_NUMBER: builtins.int
    SP_COLUMN_IN_FIELD_NUMBER: builtins.int
    SP_COLUMN_IS_NOT_NULL_FIELD_NUMBER: builtins.int
    SP_COLUMN_IS_NULL_FIELD_NUMBER: builtins.int
    SP_COLUMN_OVER_FIELD_NUMBER: builtins.int
    SP_COLUMN_SQL_EXPR_FIELD_NUMBER: builtins.int
    SP_COLUMN_STRING_COLLATE_FIELD_NUMBER: builtins.int
    SP_COLUMN_STRING_CONTAINS_FIELD_NUMBER: builtins.int
    SP_COLUMN_STRING_ENDS_WITH_FIELD_NUMBER: builtins.int
    SP_COLUMN_STRING_LIKE_FIELD_NUMBER: builtins.int
    SP_COLUMN_STRING_REGEXP_FIELD_NUMBER: builtins.int
    SP_COLUMN_STRING_STARTS_WITH_FIELD_NUMBER: builtins.int
    SP_COLUMN_STRING_SUBSTR_FIELD_NUMBER: builtins.int
    SP_COLUMN_TRY_CAST_FIELD_NUMBER: builtins.int
    SP_COLUMN_WITHIN_GROUP_FIELD_NUMBER: builtins.int
    SP_CREATE_DATAFRAME_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_AGG_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_ALIAS_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_ANALYTICS_COMPUTE_LAG_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_ANALYTICS_COMPUTE_LEAD_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_ANALYTICS_CUMULATIVE_AGG_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_ANALYTICS_MOVING_AGG_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_ANALYTICS_TIME_SERIES_AGG_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_CACHE_RESULT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_COL_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_COLLECT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_COPY_INTO_TABLE_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_COUNT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_CREATE_OR_REPLACE_DYNAMIC_TABLE_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_CREATE_OR_REPLACE_VIEW_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_CROSS_JOIN_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_CUBE_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_DESCRIBE_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_DISTINCT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_DROP_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_DROP_DUPLICATES_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_EXCEPT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_FILTER_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_FIRST_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_FLATTEN_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_GROUP_BY_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_GROUP_BY_GROUPING_SETS_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_INTERSECT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_JOIN_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_JOIN_TABLE_FUNCTION_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_LIMIT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_NA_DROP__PYTHON_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_NA_DROP__SCALA_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_NA_FILL_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_NA_REPLACE_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_NATURAL_JOIN_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_PIVOT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_RANDOM_SPLIT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_READER_INIT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_READER_OPTION_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_READER_OPTIONS_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_READER_SCHEMA_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_READER_WITH_METADATA_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_REF_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_RENAME_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_ROLLUP_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_SAMPLE_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_SELECT__COLUMNS_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_SELECT__EXPRS_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_SHOW_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_SORT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_STAT_APPROX_QUANTILE_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_STAT_CORR_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_STAT_COV_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_STAT_CROSS_TAB_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_STAT_SAMPLE_BY_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_TO_DF_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_TO_LOCAL_ITERATOR_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_TO_PANDAS_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_TO_PANDAS_BATCHES_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_UNION_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_UNION_ALL_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_UNION_ALL_BY_NAME_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_UNION_BY_NAME_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_UNPIVOT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_WITH_COLUMN_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_WITH_COLUMN_RENAMED_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_WITH_COLUMNS_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_WRITE_FIELD_NUMBER: builtins.int
    SP_DATATYPE_VAL_FIELD_NUMBER: builtins.int
    SP_FLATTEN_FIELD_NUMBER: builtins.int
    SP_FN_REF_FIELD_NUMBER: builtins.int
    SP_GENERATOR_FIELD_NUMBER: builtins.int
    SP_GROUPING_SETS_FIELD_NUMBER: builtins.int
    SP_MERGE_DELETE_WHEN_MATCHED_CLAUSE_FIELD_NUMBER: builtins.int
    SP_MERGE_INSERT_WHEN_NOT_MATCHED_CLAUSE_FIELD_NUMBER: builtins.int
    SP_MERGE_UPDATE_WHEN_MATCHED_CLAUSE_FIELD_NUMBER: builtins.int
    SP_NAME_REF_FIELD_NUMBER: builtins.int
    SP_RANGE_FIELD_NUMBER: builtins.int
    SP_READ_AVRO_FIELD_NUMBER: builtins.int
    SP_READ_CSV_FIELD_NUMBER: builtins.int
    SP_READ_JSON_FIELD_NUMBER: builtins.int
    SP_READ_ORC_FIELD_NUMBER: builtins.int
    SP_READ_PARQUET_FIELD_NUMBER: builtins.int
    SP_READ_TABLE_FIELD_NUMBER: builtins.int
    SP_READ_XML_FIELD_NUMBER: builtins.int
    SP_RELATIONAL_GROUPED_DATAFRAME_AGG_FIELD_NUMBER: builtins.int
    SP_RELATIONAL_GROUPED_DATAFRAME_APPLY_IN_PANDAS_FIELD_NUMBER: builtins.int
    SP_RELATIONAL_GROUPED_DATAFRAME_BUILTIN_FIELD_NUMBER: builtins.int
    SP_RELATIONAL_GROUPED_DATAFRAME_PIVOT_FIELD_NUMBER: builtins.int
    SP_RELATIONAL_GROUPED_DATAFRAME_REF_FIELD_NUMBER: builtins.int
    SP_ROW_FIELD_NUMBER: builtins.int
    SP_SESSION_TABLE_FUNCTION_FIELD_NUMBER: builtins.int
    SP_SQL_FIELD_NUMBER: builtins.int
    SP_TABLE_FIELD_NUMBER: builtins.int
    SP_TABLE_DELETE_FIELD_NUMBER: builtins.int
    SP_TABLE_DROP_TABLE_FIELD_NUMBER: builtins.int
    SP_TABLE_FN_CALL_ALIAS_FIELD_NUMBER: builtins.int
    SP_TABLE_FN_CALL_OVER_FIELD_NUMBER: builtins.int
    SP_TABLE_MERGE_FIELD_NUMBER: builtins.int
    SP_TABLE_SAMPLE_FIELD_NUMBER: builtins.int
    SP_TABLE_UPDATE_FIELD_NUMBER: builtins.int
    SP_TO_SNOWPARK_PANDAS_FIELD_NUMBER: builtins.int
    SP_WINDOW_SPEC_EMPTY_FIELD_NUMBER: builtins.int
    SP_WINDOW_SPEC_ORDER_BY_FIELD_NUMBER: builtins.int
    SP_WINDOW_SPEC_PARTITION_BY_FIELD_NUMBER: builtins.int
    SP_WINDOW_SPEC_RANGE_BETWEEN_FIELD_NUMBER: builtins.int
    SP_WINDOW_SPEC_ROWS_BETWEEN_FIELD_NUMBER: builtins.int
    SP_WRITE_COPY_INTO_LOCATION_FIELD_NUMBER: builtins.int
    SP_WRITE_CSV_FIELD_NUMBER: builtins.int
    SP_WRITE_JSON_FIELD_NUMBER: builtins.int
    SP_WRITE_PANDAS_FIELD_NUMBER: builtins.int
    SP_WRITE_PARQUET_FIELD_NUMBER: builtins.int
    SP_WRITE_TABLE_FIELD_NUMBER: builtins.int
    STORED_PROCEDURE_FIELD_NUMBER: builtins.int
    STRING_VAL_FIELD_NUMBER: builtins.int
    SUB_FIELD_NUMBER: builtins.int
    TRUNCATED_DATAFRAME_EXPR_FIELD_NUMBER: builtins.int
    TRUNCATED_EXPR_FIELD_NUMBER: builtins.int
    TRUNCATED_RELATIONAL_GROUPED_DATAFRAME_EXPR_FIELD_NUMBER: builtins.int
    TUPLE_VAL_FIELD_NUMBER: builtins.int
    UDAF_FIELD_NUMBER: builtins.int
    UDF_FIELD_NUMBER: builtins.int
    UDTF_FIELD_NUMBER: builtins.int
    @property
    def trait_abstract_extension_expr(self) -> global___AbstractExtensionExpr: ...
    @property
    def trait_abstract_truncated_expr(self) -> global___AbstractTruncatedExpr: ...
    @property
    def trait_bin_op(self) -> global___BinOp: ...
    @property
    def trait_const(self) -> global___Const: ...
    @property
    def trait_expr(self) -> global___Expr: ...
    @property
    def trait_fn_id_ref_expr(self) -> global___FnIdRefExpr: ...
    @property
    def trait_fn_name_ref_expr(self) -> global___FnNameRefExpr: ...
    @property
    def trait_fn_ref_expr(self) -> global___FnRefExpr: ...
    @property
    def trait_sp_column_fn(self) -> global___SpColumnFn: ...
    @property
    def trait_sp_dataframe_expr(self) -> global___SpDataframeExpr: ...
    @property
    def trait_sp_dataframe_reader(self) -> global___SpDataframeReader: ...
    @property
    def trait_sp_dataframe_writer(self) -> global___SpDataframeWriter: ...
    @property
    def trait_sp_matched_clause(self) -> global___SpMatchedClause: ...
    @property
    def trait_sp_relational_grouped_dataframe_expr(self) -> global___SpRelationalGroupedDataframeExpr: ...
    @property
    def trait_sp_window_spec_expr(self) -> global___SpWindowSpecExpr: ...
    @property
    def trait_sp_write_file(self) -> global___SpWriteFile: ...
    @property
    def trait_unary_op(self) -> global___UnaryOp: ...
    @property
    def add(self) -> global___Add: ...
    @property
    def apply_expr(self) -> global___ApplyExpr: ...
    @property
    def big_decimal_val(self) -> global___BigDecimalVal: ...
    @property
    def big_int_val(self) -> global___BigIntVal: ...
    @property
    def binary_val(self) -> global___BinaryVal: ...
    @property
    def bit_and(self) -> global___BitAnd: ...
    @property
    def bit_or(self) -> global___BitOr: ...
    @property
    def bit_xor(self) -> global___BitXor: ...
    @property
    def bool_val(self) -> global___BoolVal: ...
    @property
    def builtin_fn(self) -> global___BuiltinFn: ...
    @property
    def call_table_function_expr(self) -> global___CallTableFunctionExpr: ...
    @property
    def div(self) -> global___Div: ...
    @property
    def eq(self) -> global___Eq: ...
    @property
    def extension_dataframe_expr(self) -> global___ExtensionDataframeExpr: ...
    @property
    def extension_expr(self) -> global___ExtensionExpr: ...
    @property
    def extension_relational_grouped_dataframe_expr(self) -> global___ExtensionRelationalGroupedDataframeExpr: ...
    @property
    def float64_val(self) -> global___Float64Val: ...
    @property
    def geq(self) -> global___Geq: ...
    @property
    def gt(self) -> global___Gt: ...
    @property
    def indirect_table_fn_id_ref(self) -> global___IndirectTableFnIdRef: ...
    @property
    def indirect_table_fn_name_ref(self) -> global___IndirectTableFnNameRef: ...
    @property
    def int64_val(self) -> global___Int64Val: ...
    @property
    def leq(self) -> global___Leq: ...
    @property
    def list_val(self) -> global___ListVal: ...
    @property
    def lt(self) -> global___Lt: ...
    @property
    def mod(self) -> global___Mod: ...
    @property
    def mul(self) -> global___Mul: ...
    @property
    def neg(self) -> global___Neg: ...
    @property
    def neq(self) -> global___Neq: ...
    @property
    def null_val(self) -> global___NullVal: ...
    @property
    def object_get_item(self) -> global___ObjectGetItem: ...
    @property
    def pow(self) -> global___Pow: ...
    @property
    def python_date_val(self) -> global___PythonDateVal: ...
    @property
    def python_time_val(self) -> global___PythonTimeVal: ...
    @property
    def python_timestamp_val(self) -> global___PythonTimestampVal: ...
    @property
    def redacted_const(self) -> global___RedactedConst: ...
    @property
    def seq_map_val(self) -> global___SeqMapVal: ...
    @property
    def sp_case_expr(self) -> global___SpCaseExpr: ...
    @property
    def sp_column_alias(self) -> global___SpColumnAlias: ...
    @property
    def sp_column_apply__int(self) -> global___SpColumnApply_Int: ...
    @property
    def sp_column_apply__string(self) -> global___SpColumnApply_String: ...
    @property
    def sp_column_asc(self) -> global___SpColumnAsc: ...
    @property
    def sp_column_between(self) -> global___SpColumnBetween: ...
    @property
    def sp_column_case_when(self) -> global___SpColumnCaseWhen: ...
    @property
    def sp_column_cast(self) -> global___SpColumnCast: ...
    @property
    def sp_column_desc(self) -> global___SpColumnDesc: ...
    @property
    def sp_column_equal_nan(self) -> global___SpColumnEqualNan: ...
    @property
    def sp_column_equal_null(self) -> global___SpColumnEqualNull: ...
    @property
    def sp_column_in(self) -> global___SpColumnIn: ...
    @property
    def sp_column_is_not_null(self) -> global___SpColumnIsNotNull: ...
    @property
    def sp_column_is_null(self) -> global___SpColumnIsNull: ...
    @property
    def sp_column_over(self) -> global___SpColumnOver: ...
    @property
    def sp_column_sql_expr(self) -> global___SpColumnSqlExpr: ...
    @property
    def sp_column_string_collate(self) -> global___SpColumnStringCollate: ...
    @property
    def sp_column_string_contains(self) -> global___SpColumnStringContains: ...
    @property
    def sp_column_string_ends_with(self) -> global___SpColumnStringEndsWith: ...
    @property
    def sp_column_string_like(self) -> global___SpColumnStringLike: ...
    @property
    def sp_column_string_regexp(self) -> global___SpColumnStringRegexp: ...
    @property
    def sp_column_string_starts_with(self) -> global___SpColumnStringStartsWith: ...
    @property
    def sp_column_string_substr(self) -> global___SpColumnStringSubstr: ...
    @property
    def sp_column_try_cast(self) -> global___SpColumnTryCast: ...
    @property
    def sp_column_within_group(self) -> global___SpColumnWithinGroup: ...
    @property
    def sp_create_dataframe(self) -> global___SpCreateDataframe: ...
    @property
    def sp_dataframe_agg(self) -> global___SpDataframeAgg: ...
    @property
    def sp_dataframe_alias(self) -> global___SpDataframeAlias: ...
    @property
    def sp_dataframe_analytics_compute_lag(self) -> global___SpDataframeAnalyticsComputeLag: ...
    @property
    def sp_dataframe_analytics_compute_lead(self) -> global___SpDataframeAnalyticsComputeLead: ...
    @property
    def sp_dataframe_analytics_cumulative_agg(self) -> global___SpDataframeAnalyticsCumulativeAgg: ...
    @property
    def sp_dataframe_analytics_moving_agg(self) -> global___SpDataframeAnalyticsMovingAgg: ...
    @property
    def sp_dataframe_analytics_time_series_agg(self) -> global___SpDataframeAnalyticsTimeSeriesAgg: ...
    @property
    def sp_dataframe_cache_result(self) -> global___SpDataframeCacheResult: ...
    @property
    def sp_dataframe_col(self) -> global___SpDataframeCol: ...
    @property
    def sp_dataframe_collect(self) -> global___SpDataframeCollect: ...
    @property
    def sp_dataframe_copy_into_table(self) -> global___SpDataframeCopyIntoTable: ...
    @property
    def sp_dataframe_count(self) -> global___SpDataframeCount: ...
    @property
    def sp_dataframe_create_or_replace_dynamic_table(self) -> global___SpDataframeCreateOrReplaceDynamicTable: ...
    @property
    def sp_dataframe_create_or_replace_view(self) -> global___SpDataframeCreateOrReplaceView: ...
    @property
    def sp_dataframe_cross_join(self) -> global___SpDataframeCrossJoin: ...
    @property
    def sp_dataframe_cube(self) -> global___SpDataframeCube: ...
    @property
    def sp_dataframe_describe(self) -> global___SpDataframeDescribe: ...
    @property
    def sp_dataframe_distinct(self) -> global___SpDataframeDistinct: ...
    @property
    def sp_dataframe_drop(self) -> global___SpDataframeDrop: ...
    @property
    def sp_dataframe_drop_duplicates(self) -> global___SpDataframeDropDuplicates: ...
    @property
    def sp_dataframe_except(self) -> global___SpDataframeExcept: ...
    @property
    def sp_dataframe_filter(self) -> global___SpDataframeFilter: ...
    @property
    def sp_dataframe_first(self) -> global___SpDataframeFirst: ...
    @property
    def sp_dataframe_flatten(self) -> global___SpDataframeFlatten: ...
    @property
    def sp_dataframe_group_by(self) -> global___SpDataframeGroupBy: ...
    @property
    def sp_dataframe_group_by_grouping_sets(self) -> global___SpDataframeGroupByGroupingSets: ...
    @property
    def sp_dataframe_intersect(self) -> global___SpDataframeIntersect: ...
    @property
    def sp_dataframe_join(self) -> global___SpDataframeJoin: ...
    @property
    def sp_dataframe_join_table_function(self) -> global___SpDataframeJoinTableFunction: ...
    @property
    def sp_dataframe_limit(self) -> global___SpDataframeLimit: ...
    @property
    def sp_dataframe_na_drop__python(self) -> global___SpDataframeNaDrop_Python: ...
    @property
    def sp_dataframe_na_drop__scala(self) -> global___SpDataframeNaDrop_Scala: ...
    @property
    def sp_dataframe_na_fill(self) -> global___SpDataframeNaFill: ...
    @property
    def sp_dataframe_na_replace(self) -> global___SpDataframeNaReplace: ...
    @property
    def sp_dataframe_natural_join(self) -> global___SpDataframeNaturalJoin: ...
    @property
    def sp_dataframe_pivot(self) -> global___SpDataframePivot: ...
    @property
    def sp_dataframe_random_split(self) -> global___SpDataframeRandomSplit: ...
    @property
    def sp_dataframe_reader_init(self) -> global___SpDataframeReaderInit: ...
    @property
    def sp_dataframe_reader_option(self) -> global___SpDataframeReaderOption: ...
    @property
    def sp_dataframe_reader_options(self) -> global___SpDataframeReaderOptions: ...
    @property
    def sp_dataframe_reader_schema(self) -> global___SpDataframeReaderSchema: ...
    @property
    def sp_dataframe_reader_with_metadata(self) -> global___SpDataframeReaderWithMetadata: ...
    @property
    def sp_dataframe_ref(self) -> global___SpDataframeRef: ...
    @property
    def sp_dataframe_rename(self) -> global___SpDataframeRename: ...
    @property
    def sp_dataframe_rollup(self) -> global___SpDataframeRollup: ...
    @property
    def sp_dataframe_sample(self) -> global___SpDataframeSample: ...
    @property
    def sp_dataframe_select__columns(self) -> global___SpDataframeSelect_Columns: ...
    @property
    def sp_dataframe_select__exprs(self) -> global___SpDataframeSelect_Exprs: ...
    @property
    def sp_dataframe_show(self) -> global___SpDataframeShow: ...
    @property
    def sp_dataframe_sort(self) -> global___SpDataframeSort: ...
    @property
    def sp_dataframe_stat_approx_quantile(self) -> global___SpDataframeStatApproxQuantile: ...
    @property
    def sp_dataframe_stat_corr(self) -> global___SpDataframeStatCorr: ...
    @property
    def sp_dataframe_stat_cov(self) -> global___SpDataframeStatCov: ...
    @property
    def sp_dataframe_stat_cross_tab(self) -> global___SpDataframeStatCrossTab: ...
    @property
    def sp_dataframe_stat_sample_by(self) -> global___SpDataframeStatSampleBy: ...
    @property
    def sp_dataframe_to_df(self) -> global___SpDataframeToDf: ...
    @property
    def sp_dataframe_to_local_iterator(self) -> global___SpDataframeToLocalIterator: ...
    @property
    def sp_dataframe_to_pandas(self) -> global___SpDataframeToPandas: ...
    @property
    def sp_dataframe_to_pandas_batches(self) -> global___SpDataframeToPandasBatches: ...
    @property
    def sp_dataframe_union(self) -> global___SpDataframeUnion: ...
    @property
    def sp_dataframe_union_all(self) -> global___SpDataframeUnionAll: ...
    @property
    def sp_dataframe_union_all_by_name(self) -> global___SpDataframeUnionAllByName: ...
    @property
    def sp_dataframe_union_by_name(self) -> global___SpDataframeUnionByName: ...
    @property
    def sp_dataframe_unpivot(self) -> global___SpDataframeUnpivot: ...
    @property
    def sp_dataframe_with_column(self) -> global___SpDataframeWithColumn: ...
    @property
    def sp_dataframe_with_column_renamed(self) -> global___SpDataframeWithColumnRenamed: ...
    @property
    def sp_dataframe_with_columns(self) -> global___SpDataframeWithColumns: ...
    @property
    def sp_dataframe_write(self) -> global___SpDataframeWrite: ...
    @property
    def sp_datatype_val(self) -> global___SpDatatypeVal: ...
    @property
    def sp_flatten(self) -> global___SpFlatten: ...
    @property
    def sp_fn_ref(self) -> global___SpFnRef: ...
    @property
    def sp_generator(self) -> global___SpGenerator: ...
    @property
    def sp_grouping_sets(self) -> global___SpGroupingSets: ...
    @property
    def sp_merge_delete_when_matched_clause(self) -> global___SpMergeDeleteWhenMatchedClause: ...
    @property
    def sp_merge_insert_when_not_matched_clause(self) -> global___SpMergeInsertWhenNotMatchedClause: ...
    @property
    def sp_merge_update_when_matched_clause(self) -> global___SpMergeUpdateWhenMatchedClause: ...
    @property
    def sp_name_ref(self) -> global___SpNameRef: ...
    @property
    def sp_range(self) -> global___SpRange: ...
    @property
    def sp_read_avro(self) -> global___SpReadAvro: ...
    @property
    def sp_read_csv(self) -> global___SpReadCsv: ...
    @property
    def sp_read_json(self) -> global___SpReadJson: ...
    @property
    def sp_read_orc(self) -> global___SpReadOrc: ...
    @property
    def sp_read_parquet(self) -> global___SpReadParquet: ...
    @property
    def sp_read_table(self) -> global___SpReadTable: ...
    @property
    def sp_read_xml(self) -> global___SpReadXml: ...
    @property
    def sp_relational_grouped_dataframe_agg(self) -> global___SpRelationalGroupedDataframeAgg: ...
    @property
    def sp_relational_grouped_dataframe_apply_in_pandas(self) -> global___SpRelationalGroupedDataframeApplyInPandas: ...
    @property
    def sp_relational_grouped_dataframe_builtin(self) -> global___SpRelationalGroupedDataframeBuiltin: ...
    @property
    def sp_relational_grouped_dataframe_pivot(self) -> global___SpRelationalGroupedDataframePivot: ...
    @property
    def sp_relational_grouped_dataframe_ref(self) -> global___SpRelationalGroupedDataframeRef: ...
    @property
    def sp_row(self) -> global___SpRow: ...
    @property
    def sp_session_table_function(self) -> global___SpSessionTableFunction: ...
    @property
    def sp_sql(self) -> global___SpSql: ...
    @property
    def sp_table(self) -> global___SpTable: ...
    @property
    def sp_table_delete(self) -> global___SpTableDelete: ...
    @property
    def sp_table_drop_table(self) -> global___SpTableDropTable: ...
    @property
    def sp_table_fn_call_alias(self) -> global___SpTableFnCallAlias: ...
    @property
    def sp_table_fn_call_over(self) -> global___SpTableFnCallOver: ...
    @property
    def sp_table_merge(self) -> global___SpTableMerge: ...
    @property
    def sp_table_sample(self) -> global___SpTableSample: ...
    @property
    def sp_table_update(self) -> global___SpTableUpdate: ...
    @property
    def sp_to_snowpark_pandas(self) -> global___SpToSnowparkPandas: ...
    @property
    def sp_window_spec_empty(self) -> global___SpWindowSpecEmpty: ...
    @property
    def sp_window_spec_order_by(self) -> global___SpWindowSpecOrderBy: ...
    @property
    def sp_window_spec_partition_by(self) -> global___SpWindowSpecPartitionBy: ...
    @property
    def sp_window_spec_range_between(self) -> global___SpWindowSpecRangeBetween: ...
    @property
    def sp_window_spec_rows_between(self) -> global___SpWindowSpecRowsBetween: ...
    @property
    def sp_write_copy_into_location(self) -> global___SpWriteCopyIntoLocation: ...
    @property
    def sp_write_csv(self) -> global___SpWriteCsv: ...
    @property
    def sp_write_json(self) -> global___SpWriteJson: ...
    @property
    def sp_write_pandas(self) -> global___SpWritePandas: ...
    @property
    def sp_write_parquet(self) -> global___SpWriteParquet: ...
    @property
    def sp_write_table(self) -> global___SpWriteTable: ...
    @property
    def stored_procedure(self) -> global___StoredProcedure: ...
    @property
    def string_val(self) -> global___StringVal: ...
    @property
    def sub(self) -> global___Sub: ...
    @property
    def truncated_dataframe_expr(self) -> global___TruncatedDataframeExpr: ...
    @property
    def truncated_expr(self) -> global___TruncatedExpr: ...
    @property
    def truncated_relational_grouped_dataframe_expr(self) -> global___TruncatedRelationalGroupedDataframeExpr: ...
    @property
    def tuple_val(self) -> global___TupleVal: ...
    @property
    def udaf(self) -> global___Udaf: ...
    @property
    def udf(self) -> global___Udf: ...
    @property
    def udtf(self) -> global___Udtf: ...
    def __init__(
        self,
        *,
        trait_abstract_extension_expr: global___AbstractExtensionExpr | None = ...,
        trait_abstract_truncated_expr: global___AbstractTruncatedExpr | None = ...,
        trait_bin_op: global___BinOp | None = ...,
        trait_const: global___Const | None = ...,
        trait_expr: global___Expr | None = ...,
        trait_fn_id_ref_expr: global___FnIdRefExpr | None = ...,
        trait_fn_name_ref_expr: global___FnNameRefExpr | None = ...,
        trait_fn_ref_expr: global___FnRefExpr | None = ...,
        trait_sp_column_fn: global___SpColumnFn | None = ...,
        trait_sp_dataframe_expr: global___SpDataframeExpr | None = ...,
        trait_sp_dataframe_reader: global___SpDataframeReader | None = ...,
        trait_sp_dataframe_writer: global___SpDataframeWriter | None = ...,
        trait_sp_matched_clause: global___SpMatchedClause | None = ...,
        trait_sp_relational_grouped_dataframe_expr: global___SpRelationalGroupedDataframeExpr | None = ...,
        trait_sp_window_spec_expr: global___SpWindowSpecExpr | None = ...,
        trait_sp_write_file: global___SpWriteFile | None = ...,
        trait_unary_op: global___UnaryOp | None = ...,
        add: global___Add | None = ...,
        apply_expr: global___ApplyExpr | None = ...,
        big_decimal_val: global___BigDecimalVal | None = ...,
        big_int_val: global___BigIntVal | None = ...,
        binary_val: global___BinaryVal | None = ...,
        bit_and: global___BitAnd | None = ...,
        bit_or: global___BitOr | None = ...,
        bit_xor: global___BitXor | None = ...,
        bool_val: global___BoolVal | None = ...,
        builtin_fn: global___BuiltinFn | None = ...,
        call_table_function_expr: global___CallTableFunctionExpr | None = ...,
        div: global___Div | None = ...,
        eq: global___Eq | None = ...,
        extension_dataframe_expr: global___ExtensionDataframeExpr | None = ...,
        extension_expr: global___ExtensionExpr | None = ...,
        extension_relational_grouped_dataframe_expr: global___ExtensionRelationalGroupedDataframeExpr | None = ...,
        float64_val: global___Float64Val | None = ...,
        geq: global___Geq | None = ...,
        gt: global___Gt | None = ...,
        indirect_table_fn_id_ref: global___IndirectTableFnIdRef | None = ...,
        indirect_table_fn_name_ref: global___IndirectTableFnNameRef | None = ...,
        int64_val: global___Int64Val | None = ...,
        leq: global___Leq | None = ...,
        list_val: global___ListVal | None = ...,
        lt: global___Lt | None = ...,
        mod: global___Mod | None = ...,
        mul: global___Mul | None = ...,
        neg: global___Neg | None = ...,
        neq: global___Neq | None = ...,
        null_val: global___NullVal | None = ...,
        object_get_item: global___ObjectGetItem | None = ...,
        pow: global___Pow | None = ...,
        python_date_val: global___PythonDateVal | None = ...,
        python_time_val: global___PythonTimeVal | None = ...,
        python_timestamp_val: global___PythonTimestampVal | None = ...,
        redacted_const: global___RedactedConst | None = ...,
        seq_map_val: global___SeqMapVal | None = ...,
        sp_case_expr: global___SpCaseExpr | None = ...,
        sp_column_alias: global___SpColumnAlias | None = ...,
        sp_column_apply__int: global___SpColumnApply_Int | None = ...,
        sp_column_apply__string: global___SpColumnApply_String | None = ...,
        sp_column_asc: global___SpColumnAsc | None = ...,
        sp_column_between: global___SpColumnBetween | None = ...,
        sp_column_case_when: global___SpColumnCaseWhen | None = ...,
        sp_column_cast: global___SpColumnCast | None = ...,
        sp_column_desc: global___SpColumnDesc | None = ...,
        sp_column_equal_nan: global___SpColumnEqualNan | None = ...,
        sp_column_equal_null: global___SpColumnEqualNull | None = ...,
        sp_column_in: global___SpColumnIn | None = ...,
        sp_column_is_not_null: global___SpColumnIsNotNull | None = ...,
        sp_column_is_null: global___SpColumnIsNull | None = ...,
        sp_column_over: global___SpColumnOver | None = ...,
        sp_column_sql_expr: global___SpColumnSqlExpr | None = ...,
        sp_column_string_collate: global___SpColumnStringCollate | None = ...,
        sp_column_string_contains: global___SpColumnStringContains | None = ...,
        sp_column_string_ends_with: global___SpColumnStringEndsWith | None = ...,
        sp_column_string_like: global___SpColumnStringLike | None = ...,
        sp_column_string_regexp: global___SpColumnStringRegexp | None = ...,
        sp_column_string_starts_with: global___SpColumnStringStartsWith | None = ...,
        sp_column_string_substr: global___SpColumnStringSubstr | None = ...,
        sp_column_try_cast: global___SpColumnTryCast | None = ...,
        sp_column_within_group: global___SpColumnWithinGroup | None = ...,
        sp_create_dataframe: global___SpCreateDataframe | None = ...,
        sp_dataframe_agg: global___SpDataframeAgg | None = ...,
        sp_dataframe_alias: global___SpDataframeAlias | None = ...,
        sp_dataframe_analytics_compute_lag: global___SpDataframeAnalyticsComputeLag | None = ...,
        sp_dataframe_analytics_compute_lead: global___SpDataframeAnalyticsComputeLead | None = ...,
        sp_dataframe_analytics_cumulative_agg: global___SpDataframeAnalyticsCumulativeAgg | None = ...,
        sp_dataframe_analytics_moving_agg: global___SpDataframeAnalyticsMovingAgg | None = ...,
        sp_dataframe_analytics_time_series_agg: global___SpDataframeAnalyticsTimeSeriesAgg | None = ...,
        sp_dataframe_cache_result: global___SpDataframeCacheResult | None = ...,
        sp_dataframe_col: global___SpDataframeCol | None = ...,
        sp_dataframe_collect: global___SpDataframeCollect | None = ...,
        sp_dataframe_copy_into_table: global___SpDataframeCopyIntoTable | None = ...,
        sp_dataframe_count: global___SpDataframeCount | None = ...,
        sp_dataframe_create_or_replace_dynamic_table: global___SpDataframeCreateOrReplaceDynamicTable | None = ...,
        sp_dataframe_create_or_replace_view: global___SpDataframeCreateOrReplaceView | None = ...,
        sp_dataframe_cross_join: global___SpDataframeCrossJoin | None = ...,
        sp_dataframe_cube: global___SpDataframeCube | None = ...,
        sp_dataframe_describe: global___SpDataframeDescribe | None = ...,
        sp_dataframe_distinct: global___SpDataframeDistinct | None = ...,
        sp_dataframe_drop: global___SpDataframeDrop | None = ...,
        sp_dataframe_drop_duplicates: global___SpDataframeDropDuplicates | None = ...,
        sp_dataframe_except: global___SpDataframeExcept | None = ...,
        sp_dataframe_filter: global___SpDataframeFilter | None = ...,
        sp_dataframe_first: global___SpDataframeFirst | None = ...,
        sp_dataframe_flatten: global___SpDataframeFlatten | None = ...,
        sp_dataframe_group_by: global___SpDataframeGroupBy | None = ...,
        sp_dataframe_group_by_grouping_sets: global___SpDataframeGroupByGroupingSets | None = ...,
        sp_dataframe_intersect: global___SpDataframeIntersect | None = ...,
        sp_dataframe_join: global___SpDataframeJoin | None = ...,
        sp_dataframe_join_table_function: global___SpDataframeJoinTableFunction | None = ...,
        sp_dataframe_limit: global___SpDataframeLimit | None = ...,
        sp_dataframe_na_drop__python: global___SpDataframeNaDrop_Python | None = ...,
        sp_dataframe_na_drop__scala: global___SpDataframeNaDrop_Scala | None = ...,
        sp_dataframe_na_fill: global___SpDataframeNaFill | None = ...,
        sp_dataframe_na_replace: global___SpDataframeNaReplace | None = ...,
        sp_dataframe_natural_join: global___SpDataframeNaturalJoin | None = ...,
        sp_dataframe_pivot: global___SpDataframePivot | None = ...,
        sp_dataframe_random_split: global___SpDataframeRandomSplit | None = ...,
        sp_dataframe_reader_init: global___SpDataframeReaderInit | None = ...,
        sp_dataframe_reader_option: global___SpDataframeReaderOption | None = ...,
        sp_dataframe_reader_options: global___SpDataframeReaderOptions | None = ...,
        sp_dataframe_reader_schema: global___SpDataframeReaderSchema | None = ...,
        sp_dataframe_reader_with_metadata: global___SpDataframeReaderWithMetadata | None = ...,
        sp_dataframe_ref: global___SpDataframeRef | None = ...,
        sp_dataframe_rename: global___SpDataframeRename | None = ...,
        sp_dataframe_rollup: global___SpDataframeRollup | None = ...,
        sp_dataframe_sample: global___SpDataframeSample | None = ...,
        sp_dataframe_select__columns: global___SpDataframeSelect_Columns | None = ...,
        sp_dataframe_select__exprs: global___SpDataframeSelect_Exprs | None = ...,
        sp_dataframe_show: global___SpDataframeShow | None = ...,
        sp_dataframe_sort: global___SpDataframeSort | None = ...,
        sp_dataframe_stat_approx_quantile: global___SpDataframeStatApproxQuantile | None = ...,
        sp_dataframe_stat_corr: global___SpDataframeStatCorr | None = ...,
        sp_dataframe_stat_cov: global___SpDataframeStatCov | None = ...,
        sp_dataframe_stat_cross_tab: global___SpDataframeStatCrossTab | None = ...,
        sp_dataframe_stat_sample_by: global___SpDataframeStatSampleBy | None = ...,
        sp_dataframe_to_df: global___SpDataframeToDf | None = ...,
        sp_dataframe_to_local_iterator: global___SpDataframeToLocalIterator | None = ...,
        sp_dataframe_to_pandas: global___SpDataframeToPandas | None = ...,
        sp_dataframe_to_pandas_batches: global___SpDataframeToPandasBatches | None = ...,
        sp_dataframe_union: global___SpDataframeUnion | None = ...,
        sp_dataframe_union_all: global___SpDataframeUnionAll | None = ...,
        sp_dataframe_union_all_by_name: global___SpDataframeUnionAllByName | None = ...,
        sp_dataframe_union_by_name: global___SpDataframeUnionByName | None = ...,
        sp_dataframe_unpivot: global___SpDataframeUnpivot | None = ...,
        sp_dataframe_with_column: global___SpDataframeWithColumn | None = ...,
        sp_dataframe_with_column_renamed: global___SpDataframeWithColumnRenamed | None = ...,
        sp_dataframe_with_columns: global___SpDataframeWithColumns | None = ...,
        sp_dataframe_write: global___SpDataframeWrite | None = ...,
        sp_datatype_val: global___SpDatatypeVal | None = ...,
        sp_flatten: global___SpFlatten | None = ...,
        sp_fn_ref: global___SpFnRef | None = ...,
        sp_generator: global___SpGenerator | None = ...,
        sp_grouping_sets: global___SpGroupingSets | None = ...,
        sp_merge_delete_when_matched_clause: global___SpMergeDeleteWhenMatchedClause | None = ...,
        sp_merge_insert_when_not_matched_clause: global___SpMergeInsertWhenNotMatchedClause | None = ...,
        sp_merge_update_when_matched_clause: global___SpMergeUpdateWhenMatchedClause | None = ...,
        sp_name_ref: global___SpNameRef | None = ...,
        sp_range: global___SpRange | None = ...,
        sp_read_avro: global___SpReadAvro | None = ...,
        sp_read_csv: global___SpReadCsv | None = ...,
        sp_read_json: global___SpReadJson | None = ...,
        sp_read_orc: global___SpReadOrc | None = ...,
        sp_read_parquet: global___SpReadParquet | None = ...,
        sp_read_table: global___SpReadTable | None = ...,
        sp_read_xml: global___SpReadXml | None = ...,
        sp_relational_grouped_dataframe_agg: global___SpRelationalGroupedDataframeAgg | None = ...,
        sp_relational_grouped_dataframe_apply_in_pandas: global___SpRelationalGroupedDataframeApplyInPandas | None = ...,
        sp_relational_grouped_dataframe_builtin: global___SpRelationalGroupedDataframeBuiltin | None = ...,
        sp_relational_grouped_dataframe_pivot: global___SpRelationalGroupedDataframePivot | None = ...,
        sp_relational_grouped_dataframe_ref: global___SpRelationalGroupedDataframeRef | None = ...,
        sp_row: global___SpRow | None = ...,
        sp_session_table_function: global___SpSessionTableFunction | None = ...,
        sp_sql: global___SpSql | None = ...,
        sp_table: global___SpTable | None = ...,
        sp_table_delete: global___SpTableDelete | None = ...,
        sp_table_drop_table: global___SpTableDropTable | None = ...,
        sp_table_fn_call_alias: global___SpTableFnCallAlias | None = ...,
        sp_table_fn_call_over: global___SpTableFnCallOver | None = ...,
        sp_table_merge: global___SpTableMerge | None = ...,
        sp_table_sample: global___SpTableSample | None = ...,
        sp_table_update: global___SpTableUpdate | None = ...,
        sp_to_snowpark_pandas: global___SpToSnowparkPandas | None = ...,
        sp_window_spec_empty: global___SpWindowSpecEmpty | None = ...,
        sp_window_spec_order_by: global___SpWindowSpecOrderBy | None = ...,
        sp_window_spec_partition_by: global___SpWindowSpecPartitionBy | None = ...,
        sp_window_spec_range_between: global___SpWindowSpecRangeBetween | None = ...,
        sp_window_spec_rows_between: global___SpWindowSpecRowsBetween | None = ...,
        sp_write_copy_into_location: global___SpWriteCopyIntoLocation | None = ...,
        sp_write_csv: global___SpWriteCsv | None = ...,
        sp_write_json: global___SpWriteJson | None = ...,
        sp_write_pandas: global___SpWritePandas | None = ...,
        sp_write_parquet: global___SpWriteParquet | None = ...,
        sp_write_table: global___SpWriteTable | None = ...,
        stored_procedure: global___StoredProcedure | None = ...,
        string_val: global___StringVal | None = ...,
        sub: global___Sub | None = ...,
        truncated_dataframe_expr: global___TruncatedDataframeExpr | None = ...,
        truncated_expr: global___TruncatedExpr | None = ...,
        truncated_relational_grouped_dataframe_expr: global___TruncatedRelationalGroupedDataframeExpr | None = ...,
        tuple_val: global___TupleVal | None = ...,
        udaf: global___Udaf | None = ...,
        udf: global___Udf | None = ...,
        udtf: global___Udtf | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["add", b"add", "and", b"and", "apply_expr", b"apply_expr", "big_decimal_val", b"big_decimal_val", "big_int_val", b"big_int_val", "binary_val", b"binary_val", "bit_and", b"bit_and", "bit_or", b"bit_or", "bit_xor", b"bit_xor", "bool_val", b"bool_val", "builtin_fn", b"builtin_fn", "call_table_function_expr", b"call_table_function_expr", "div", b"div", "eq", b"eq", "extension_dataframe_expr", b"extension_dataframe_expr", "extension_expr", b"extension_expr", "extension_relational_grouped_dataframe_expr", b"extension_relational_grouped_dataframe_expr", "float64_val", b"float64_val", "geq", b"geq", "gt", b"gt", "indirect_table_fn_id_ref", b"indirect_table_fn_id_ref", "indirect_table_fn_name_ref", b"indirect_table_fn_name_ref", "int64_val", b"int64_val", "leq", b"leq", "list_val", b"list_val", "lt", b"lt", "mod", b"mod", "mul", b"mul", "neg", b"neg", "neq", b"neq", "not", b"not", "null_val", b"null_val", "object_get_item", b"object_get_item", "or", b"or", "pow", b"pow", "python_date_val", b"python_date_val", "python_time_val", b"python_time_val", "python_timestamp_val", b"python_timestamp_val", "redacted_const", b"redacted_const", "seq_map_val", b"seq_map_val", "sp_case_expr", b"sp_case_expr", "sp_column_alias", b"sp_column_alias", "sp_column_apply__int", b"sp_column_apply__int", "sp_column_apply__string", b"sp_column_apply__string", "sp_column_asc", b"sp_column_asc", "sp_column_between", b"sp_column_between", "sp_column_case_when", b"sp_column_case_when", "sp_column_cast", b"sp_column_cast", "sp_column_desc", b"sp_column_desc", "sp_column_equal_nan", b"sp_column_equal_nan", "sp_column_equal_null", b"sp_column_equal_null", "sp_column_in", b"sp_column_in", "sp_column_is_not_null", b"sp_column_is_not_null", "sp_column_is_null", b"sp_column_is_null", "sp_column_over", b"sp_column_over", "sp_column_sql_expr", b"sp_column_sql_expr", "sp_column_string_collate", b"sp_column_string_collate", "sp_column_string_contains", b"sp_column_string_contains", "sp_column_string_ends_with", b"sp_column_string_ends_with", "sp_column_string_like", b"sp_column_string_like", "sp_column_string_regexp", b"sp_column_string_regexp", "sp_column_string_starts_with", b"sp_column_string_starts_with", "sp_column_string_substr", b"sp_column_string_substr", "sp_column_try_cast", b"sp_column_try_cast", "sp_column_within_group", b"sp_column_within_group", "sp_create_dataframe", b"sp_create_dataframe", "sp_dataframe_agg", b"sp_dataframe_agg", "sp_dataframe_alias", b"sp_dataframe_alias", "sp_dataframe_analytics_compute_lag", b"sp_dataframe_analytics_compute_lag", "sp_dataframe_analytics_compute_lead", b"sp_dataframe_analytics_compute_lead", "sp_dataframe_analytics_cumulative_agg", b"sp_dataframe_analytics_cumulative_agg", "sp_dataframe_analytics_moving_agg", b"sp_dataframe_analytics_moving_agg", "sp_dataframe_analytics_time_series_agg", b"sp_dataframe_analytics_time_series_agg", "sp_dataframe_cache_result", b"sp_dataframe_cache_result", "sp_dataframe_col", b"sp_dataframe_col", "sp_dataframe_collect", b"sp_dataframe_collect", "sp_dataframe_copy_into_table", b"sp_dataframe_copy_into_table", "sp_dataframe_count", b"sp_dataframe_count", "sp_dataframe_create_or_replace_dynamic_table", b"sp_dataframe_create_or_replace_dynamic_table", "sp_dataframe_create_or_replace_view", b"sp_dataframe_create_or_replace_view", "sp_dataframe_cross_join", b"sp_dataframe_cross_join", "sp_dataframe_cube", b"sp_dataframe_cube", "sp_dataframe_describe", b"sp_dataframe_describe", "sp_dataframe_distinct", b"sp_dataframe_distinct", "sp_dataframe_drop", b"sp_dataframe_drop", "sp_dataframe_drop_duplicates", b"sp_dataframe_drop_duplicates", "sp_dataframe_except", b"sp_dataframe_except", "sp_dataframe_filter", b"sp_dataframe_filter", "sp_dataframe_first", b"sp_dataframe_first", "sp_dataframe_flatten", b"sp_dataframe_flatten", "sp_dataframe_group_by", b"sp_dataframe_group_by", "sp_dataframe_group_by_grouping_sets", b"sp_dataframe_group_by_grouping_sets", "sp_dataframe_intersect", b"sp_dataframe_intersect", "sp_dataframe_join", b"sp_dataframe_join", "sp_dataframe_join_table_function", b"sp_dataframe_join_table_function", "sp_dataframe_limit", b"sp_dataframe_limit", "sp_dataframe_na_drop__python", b"sp_dataframe_na_drop__python", "sp_dataframe_na_drop__scala", b"sp_dataframe_na_drop__scala", "sp_dataframe_na_fill", b"sp_dataframe_na_fill", "sp_dataframe_na_replace", b"sp_dataframe_na_replace", "sp_dataframe_natural_join", b"sp_dataframe_natural_join", "sp_dataframe_pivot", b"sp_dataframe_pivot", "sp_dataframe_random_split", b"sp_dataframe_random_split", "sp_dataframe_reader_init", b"sp_dataframe_reader_init", "sp_dataframe_reader_option", b"sp_dataframe_reader_option", "sp_dataframe_reader_options", b"sp_dataframe_reader_options", "sp_dataframe_reader_schema", b"sp_dataframe_reader_schema", "sp_dataframe_reader_with_metadata", b"sp_dataframe_reader_with_metadata", "sp_dataframe_ref", b"sp_dataframe_ref", "sp_dataframe_rename", b"sp_dataframe_rename", "sp_dataframe_rollup", b"sp_dataframe_rollup", "sp_dataframe_sample", b"sp_dataframe_sample", "sp_dataframe_select__columns", b"sp_dataframe_select__columns", "sp_dataframe_select__exprs", b"sp_dataframe_select__exprs", "sp_dataframe_show", b"sp_dataframe_show", "sp_dataframe_sort", b"sp_dataframe_sort", "sp_dataframe_stat_approx_quantile", b"sp_dataframe_stat_approx_quantile", "sp_dataframe_stat_corr", b"sp_dataframe_stat_corr", "sp_dataframe_stat_cov", b"sp_dataframe_stat_cov", "sp_dataframe_stat_cross_tab", b"sp_dataframe_stat_cross_tab", "sp_dataframe_stat_sample_by", b"sp_dataframe_stat_sample_by", "sp_dataframe_to_df", b"sp_dataframe_to_df", "sp_dataframe_to_local_iterator", b"sp_dataframe_to_local_iterator", "sp_dataframe_to_pandas", b"sp_dataframe_to_pandas", "sp_dataframe_to_pandas_batches", b"sp_dataframe_to_pandas_batches", "sp_dataframe_union", b"sp_dataframe_union", "sp_dataframe_union_all", b"sp_dataframe_union_all", "sp_dataframe_union_all_by_name", b"sp_dataframe_union_all_by_name", "sp_dataframe_union_by_name", b"sp_dataframe_union_by_name", "sp_dataframe_unpivot", b"sp_dataframe_unpivot", "sp_dataframe_with_column", b"sp_dataframe_with_column", "sp_dataframe_with_column_renamed", b"sp_dataframe_with_column_renamed", "sp_dataframe_with_columns", b"sp_dataframe_with_columns", "sp_dataframe_write", b"sp_dataframe_write", "sp_datatype_val", b"sp_datatype_val", "sp_flatten", b"sp_flatten", "sp_fn_ref", b"sp_fn_ref", "sp_generator", b"sp_generator", "sp_grouping_sets", b"sp_grouping_sets", "sp_merge_delete_when_matched_clause", b"sp_merge_delete_when_matched_clause", "sp_merge_insert_when_not_matched_clause", b"sp_merge_insert_when_not_matched_clause", "sp_merge_update_when_matched_clause", b"sp_merge_update_when_matched_clause", "sp_name_ref", b"sp_name_ref", "sp_range", b"sp_range", "sp_read_avro", b"sp_read_avro", "sp_read_csv", b"sp_read_csv", "sp_read_json", b"sp_read_json", "sp_read_orc", b"sp_read_orc", "sp_read_parquet", b"sp_read_parquet", "sp_read_table", b"sp_read_table", "sp_read_xml", b"sp_read_xml", "sp_relational_grouped_dataframe_agg", b"sp_relational_grouped_dataframe_agg", "sp_relational_grouped_dataframe_apply_in_pandas", b"sp_relational_grouped_dataframe_apply_in_pandas", "sp_relational_grouped_dataframe_builtin", b"sp_relational_grouped_dataframe_builtin", "sp_relational_grouped_dataframe_pivot", b"sp_relational_grouped_dataframe_pivot", "sp_relational_grouped_dataframe_ref", b"sp_relational_grouped_dataframe_ref", "sp_row", b"sp_row", "sp_session_table_function", b"sp_session_table_function", "sp_sql", b"sp_sql", "sp_table", b"sp_table", "sp_table_delete", b"sp_table_delete", "sp_table_drop_table", b"sp_table_drop_table", "sp_table_fn_call_alias", b"sp_table_fn_call_alias", "sp_table_fn_call_over", b"sp_table_fn_call_over", "sp_table_merge", b"sp_table_merge", "sp_table_sample", b"sp_table_sample", "sp_table_update", b"sp_table_update", "sp_to_snowpark_pandas", b"sp_to_snowpark_pandas", "sp_window_spec_empty", b"sp_window_spec_empty", "sp_window_spec_order_by", b"sp_window_spec_order_by", "sp_window_spec_partition_by", b"sp_window_spec_partition_by", "sp_window_spec_range_between", b"sp_window_spec_range_between", "sp_window_spec_rows_between", b"sp_window_spec_rows_between", "sp_write_copy_into_location", b"sp_write_copy_into_location", "sp_write_csv", b"sp_write_csv", "sp_write_json", b"sp_write_json", "sp_write_pandas", b"sp_write_pandas", "sp_write_parquet", b"sp_write_parquet", "sp_write_table", b"sp_write_table", "stored_procedure", b"stored_procedure", "string_val", b"string_val", "sub", b"sub", "trait_abstract_extension_expr", b"trait_abstract_extension_expr", "trait_abstract_truncated_expr", b"trait_abstract_truncated_expr", "trait_bin_op", b"trait_bin_op", "trait_const", b"trait_const", "trait_expr", b"trait_expr", "trait_fn_id_ref_expr", b"trait_fn_id_ref_expr", "trait_fn_name_ref_expr", b"trait_fn_name_ref_expr", "trait_fn_ref_expr", b"trait_fn_ref_expr", "trait_sp_column_fn", b"trait_sp_column_fn", "trait_sp_dataframe_expr", b"trait_sp_dataframe_expr", "trait_sp_dataframe_reader", b"trait_sp_dataframe_reader", "trait_sp_dataframe_writer", b"trait_sp_dataframe_writer", "trait_sp_matched_clause", b"trait_sp_matched_clause", "trait_sp_relational_grouped_dataframe_expr", b"trait_sp_relational_grouped_dataframe_expr", "trait_sp_window_spec_expr", b"trait_sp_window_spec_expr", "trait_sp_write_file", b"trait_sp_write_file", "trait_unary_op", b"trait_unary_op", "truncated_dataframe_expr", b"truncated_dataframe_expr", "truncated_expr", b"truncated_expr", "truncated_relational_grouped_dataframe_expr", b"truncated_relational_grouped_dataframe_expr", "tuple_val", b"tuple_val", "udaf", b"udaf", "udf", b"udf", "udtf", b"udtf", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["add", b"add", "and", b"and", "apply_expr", b"apply_expr", "big_decimal_val", b"big_decimal_val", "big_int_val", b"big_int_val", "binary_val", b"binary_val", "bit_and", b"bit_and", "bit_or", b"bit_or", "bit_xor", b"bit_xor", "bool_val", b"bool_val", "builtin_fn", b"builtin_fn", "call_table_function_expr", b"call_table_function_expr", "div", b"div", "eq", b"eq", "extension_dataframe_expr", b"extension_dataframe_expr", "extension_expr", b"extension_expr", "extension_relational_grouped_dataframe_expr", b"extension_relational_grouped_dataframe_expr", "float64_val", b"float64_val", "geq", b"geq", "gt", b"gt", "indirect_table_fn_id_ref", b"indirect_table_fn_id_ref", "indirect_table_fn_name_ref", b"indirect_table_fn_name_ref", "int64_val", b"int64_val", "leq", b"leq", "list_val", b"list_val", "lt", b"lt", "mod", b"mod", "mul", b"mul", "neg", b"neg", "neq", b"neq", "not", b"not", "null_val", b"null_val", "object_get_item", b"object_get_item", "or", b"or", "pow", b"pow", "python_date_val", b"python_date_val", "python_time_val", b"python_time_val", "python_timestamp_val", b"python_timestamp_val", "redacted_const", b"redacted_const", "seq_map_val", b"seq_map_val", "sp_case_expr", b"sp_case_expr", "sp_column_alias", b"sp_column_alias", "sp_column_apply__int", b"sp_column_apply__int", "sp_column_apply__string", b"sp_column_apply__string", "sp_column_asc", b"sp_column_asc", "sp_column_between", b"sp_column_between", "sp_column_case_when", b"sp_column_case_when", "sp_column_cast", b"sp_column_cast", "sp_column_desc", b"sp_column_desc", "sp_column_equal_nan", b"sp_column_equal_nan", "sp_column_equal_null", b"sp_column_equal_null", "sp_column_in", b"sp_column_in", "sp_column_is_not_null", b"sp_column_is_not_null", "sp_column_is_null", b"sp_column_is_null", "sp_column_over", b"sp_column_over", "sp_column_sql_expr", b"sp_column_sql_expr", "sp_column_string_collate", b"sp_column_string_collate", "sp_column_string_contains", b"sp_column_string_contains", "sp_column_string_ends_with", b"sp_column_string_ends_with", "sp_column_string_like", b"sp_column_string_like", "sp_column_string_regexp", b"sp_column_string_regexp", "sp_column_string_starts_with", b"sp_column_string_starts_with", "sp_column_string_substr", b"sp_column_string_substr", "sp_column_try_cast", b"sp_column_try_cast", "sp_column_within_group", b"sp_column_within_group", "sp_create_dataframe", b"sp_create_dataframe", "sp_dataframe_agg", b"sp_dataframe_agg", "sp_dataframe_alias", b"sp_dataframe_alias", "sp_dataframe_analytics_compute_lag", b"sp_dataframe_analytics_compute_lag", "sp_dataframe_analytics_compute_lead", b"sp_dataframe_analytics_compute_lead", "sp_dataframe_analytics_cumulative_agg", b"sp_dataframe_analytics_cumulative_agg", "sp_dataframe_analytics_moving_agg", b"sp_dataframe_analytics_moving_agg", "sp_dataframe_analytics_time_series_agg", b"sp_dataframe_analytics_time_series_agg", "sp_dataframe_cache_result", b"sp_dataframe_cache_result", "sp_dataframe_col", b"sp_dataframe_col", "sp_dataframe_collect", b"sp_dataframe_collect", "sp_dataframe_copy_into_table", b"sp_dataframe_copy_into_table", "sp_dataframe_count", b"sp_dataframe_count", "sp_dataframe_create_or_replace_dynamic_table", b"sp_dataframe_create_or_replace_dynamic_table", "sp_dataframe_create_or_replace_view", b"sp_dataframe_create_or_replace_view", "sp_dataframe_cross_join", b"sp_dataframe_cross_join", "sp_dataframe_cube", b"sp_dataframe_cube", "sp_dataframe_describe", b"sp_dataframe_describe", "sp_dataframe_distinct", b"sp_dataframe_distinct", "sp_dataframe_drop", b"sp_dataframe_drop", "sp_dataframe_drop_duplicates", b"sp_dataframe_drop_duplicates", "sp_dataframe_except", b"sp_dataframe_except", "sp_dataframe_filter", b"sp_dataframe_filter", "sp_dataframe_first", b"sp_dataframe_first", "sp_dataframe_flatten", b"sp_dataframe_flatten", "sp_dataframe_group_by", b"sp_dataframe_group_by", "sp_dataframe_group_by_grouping_sets", b"sp_dataframe_group_by_grouping_sets", "sp_dataframe_intersect", b"sp_dataframe_intersect", "sp_dataframe_join", b"sp_dataframe_join", "sp_dataframe_join_table_function", b"sp_dataframe_join_table_function", "sp_dataframe_limit", b"sp_dataframe_limit", "sp_dataframe_na_drop__python", b"sp_dataframe_na_drop__python", "sp_dataframe_na_drop__scala", b"sp_dataframe_na_drop__scala", "sp_dataframe_na_fill", b"sp_dataframe_na_fill", "sp_dataframe_na_replace", b"sp_dataframe_na_replace", "sp_dataframe_natural_join", b"sp_dataframe_natural_join", "sp_dataframe_pivot", b"sp_dataframe_pivot", "sp_dataframe_random_split", b"sp_dataframe_random_split", "sp_dataframe_reader_init", b"sp_dataframe_reader_init", "sp_dataframe_reader_option", b"sp_dataframe_reader_option", "sp_dataframe_reader_options", b"sp_dataframe_reader_options", "sp_dataframe_reader_schema", b"sp_dataframe_reader_schema", "sp_dataframe_reader_with_metadata", b"sp_dataframe_reader_with_metadata", "sp_dataframe_ref", b"sp_dataframe_ref", "sp_dataframe_rename", b"sp_dataframe_rename", "sp_dataframe_rollup", b"sp_dataframe_rollup", "sp_dataframe_sample", b"sp_dataframe_sample", "sp_dataframe_select__columns", b"sp_dataframe_select__columns", "sp_dataframe_select__exprs", b"sp_dataframe_select__exprs", "sp_dataframe_show", b"sp_dataframe_show", "sp_dataframe_sort", b"sp_dataframe_sort", "sp_dataframe_stat_approx_quantile", b"sp_dataframe_stat_approx_quantile", "sp_dataframe_stat_corr", b"sp_dataframe_stat_corr", "sp_dataframe_stat_cov", b"sp_dataframe_stat_cov", "sp_dataframe_stat_cross_tab", b"sp_dataframe_stat_cross_tab", "sp_dataframe_stat_sample_by", b"sp_dataframe_stat_sample_by", "sp_dataframe_to_df", b"sp_dataframe_to_df", "sp_dataframe_to_local_iterator", b"sp_dataframe_to_local_iterator", "sp_dataframe_to_pandas", b"sp_dataframe_to_pandas", "sp_dataframe_to_pandas_batches", b"sp_dataframe_to_pandas_batches", "sp_dataframe_union", b"sp_dataframe_union", "sp_dataframe_union_all", b"sp_dataframe_union_all", "sp_dataframe_union_all_by_name", b"sp_dataframe_union_all_by_name", "sp_dataframe_union_by_name", b"sp_dataframe_union_by_name", "sp_dataframe_unpivot", b"sp_dataframe_unpivot", "sp_dataframe_with_column", b"sp_dataframe_with_column", "sp_dataframe_with_column_renamed", b"sp_dataframe_with_column_renamed", "sp_dataframe_with_columns", b"sp_dataframe_with_columns", "sp_dataframe_write", b"sp_dataframe_write", "sp_datatype_val", b"sp_datatype_val", "sp_flatten", b"sp_flatten", "sp_fn_ref", b"sp_fn_ref", "sp_generator", b"sp_generator", "sp_grouping_sets", b"sp_grouping_sets", "sp_merge_delete_when_matched_clause", b"sp_merge_delete_when_matched_clause", "sp_merge_insert_when_not_matched_clause", b"sp_merge_insert_when_not_matched_clause", "sp_merge_update_when_matched_clause", b"sp_merge_update_when_matched_clause", "sp_name_ref", b"sp_name_ref", "sp_range", b"sp_range", "sp_read_avro", b"sp_read_avro", "sp_read_csv", b"sp_read_csv", "sp_read_json", b"sp_read_json", "sp_read_orc", b"sp_read_orc", "sp_read_parquet", b"sp_read_parquet", "sp_read_table", b"sp_read_table", "sp_read_xml", b"sp_read_xml", "sp_relational_grouped_dataframe_agg", b"sp_relational_grouped_dataframe_agg", "sp_relational_grouped_dataframe_apply_in_pandas", b"sp_relational_grouped_dataframe_apply_in_pandas", "sp_relational_grouped_dataframe_builtin", b"sp_relational_grouped_dataframe_builtin", "sp_relational_grouped_dataframe_pivot", b"sp_relational_grouped_dataframe_pivot", "sp_relational_grouped_dataframe_ref", b"sp_relational_grouped_dataframe_ref", "sp_row", b"sp_row", "sp_session_table_function", b"sp_session_table_function", "sp_sql", b"sp_sql", "sp_table", b"sp_table", "sp_table_delete", b"sp_table_delete", "sp_table_drop_table", b"sp_table_drop_table", "sp_table_fn_call_alias", b"sp_table_fn_call_alias", "sp_table_fn_call_over", b"sp_table_fn_call_over", "sp_table_merge", b"sp_table_merge", "sp_table_sample", b"sp_table_sample", "sp_table_update", b"sp_table_update", "sp_to_snowpark_pandas", b"sp_to_snowpark_pandas", "sp_window_spec_empty", b"sp_window_spec_empty", "sp_window_spec_order_by", b"sp_window_spec_order_by", "sp_window_spec_partition_by", b"sp_window_spec_partition_by", "sp_window_spec_range_between", b"sp_window_spec_range_between", "sp_window_spec_rows_between", b"sp_window_spec_rows_between", "sp_write_copy_into_location", b"sp_write_copy_into_location", "sp_write_csv", b"sp_write_csv", "sp_write_json", b"sp_write_json", "sp_write_pandas", b"sp_write_pandas", "sp_write_parquet", b"sp_write_parquet", "sp_write_table", b"sp_write_table", "stored_procedure", b"stored_procedure", "string_val", b"string_val", "sub", b"sub", "trait_abstract_extension_expr", b"trait_abstract_extension_expr", "trait_abstract_truncated_expr", b"trait_abstract_truncated_expr", "trait_bin_op", b"trait_bin_op", "trait_const", b"trait_const", "trait_expr", b"trait_expr", "trait_fn_id_ref_expr", b"trait_fn_id_ref_expr", "trait_fn_name_ref_expr", b"trait_fn_name_ref_expr", "trait_fn_ref_expr", b"trait_fn_ref_expr", "trait_sp_column_fn", b"trait_sp_column_fn", "trait_sp_dataframe_expr", b"trait_sp_dataframe_expr", "trait_sp_dataframe_reader", b"trait_sp_dataframe_reader", "trait_sp_dataframe_writer", b"trait_sp_dataframe_writer", "trait_sp_matched_clause", b"trait_sp_matched_clause", "trait_sp_relational_grouped_dataframe_expr", b"trait_sp_relational_grouped_dataframe_expr", "trait_sp_window_spec_expr", b"trait_sp_window_spec_expr", "trait_sp_write_file", b"trait_sp_write_file", "trait_unary_op", b"trait_unary_op", "truncated_dataframe_expr", b"truncated_dataframe_expr", "truncated_expr", b"truncated_expr", "truncated_relational_grouped_dataframe_expr", b"truncated_relational_grouped_dataframe_expr", "tuple_val", b"tuple_val", "udaf", b"udaf", "udf", b"udf", "udtf", b"udtf", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["trait_abstract_extension_expr", "trait_abstract_truncated_expr", "trait_bin_op", "trait_const", "trait_expr", "trait_fn_id_ref_expr", "trait_fn_name_ref_expr", "trait_fn_ref_expr", "trait_sp_column_fn", "trait_sp_dataframe_expr", "trait_sp_dataframe_reader", "trait_sp_dataframe_writer", "trait_sp_matched_clause", "trait_sp_relational_grouped_dataframe_expr", "trait_sp_window_spec_expr", "trait_sp_write_file", "trait_unary_op", "add", "and", "apply_expr", "big_decimal_val", "big_int_val", "binary_val", "bit_and", "bit_or", "bit_xor", "bool_val", "builtin_fn", "call_table_function_expr", "div", "eq", "extension_dataframe_expr", "extension_expr", "extension_relational_grouped_dataframe_expr", "float64_val", "geq", "gt", "indirect_table_fn_id_ref", "indirect_table_fn_name_ref", "int64_val", "leq", "list_val", "lt", "mod", "mul", "neg", "neq", "not", "null_val", "object_get_item", "or", "pow", "python_date_val", "python_time_val", "python_timestamp_val", "redacted_const", "seq_map_val", "sp_case_expr", "sp_column_alias", "sp_column_apply__int", "sp_column_apply__string", "sp_column_asc", "sp_column_between", "sp_column_case_when", "sp_column_cast", "sp_column_desc", "sp_column_equal_nan", "sp_column_equal_null", "sp_column_in", "sp_column_is_not_null", "sp_column_is_null", "sp_column_over", "sp_column_sql_expr", "sp_column_string_collate", "sp_column_string_contains", "sp_column_string_ends_with", "sp_column_string_like", "sp_column_string_regexp", "sp_column_string_starts_with", "sp_column_string_substr", "sp_column_try_cast", "sp_column_within_group", "sp_create_dataframe", "sp_dataframe_agg", "sp_dataframe_alias", "sp_dataframe_analytics_compute_lag", "sp_dataframe_analytics_compute_lead", "sp_dataframe_analytics_cumulative_agg", "sp_dataframe_analytics_moving_agg", "sp_dataframe_analytics_time_series_agg", "sp_dataframe_cache_result", "sp_dataframe_col", "sp_dataframe_collect", "sp_dataframe_copy_into_table", "sp_dataframe_count", "sp_dataframe_create_or_replace_dynamic_table", "sp_dataframe_create_or_replace_view", "sp_dataframe_cross_join", "sp_dataframe_cube", "sp_dataframe_describe", "sp_dataframe_distinct", "sp_dataframe_drop", "sp_dataframe_drop_duplicates", "sp_dataframe_except", "sp_dataframe_filter", "sp_dataframe_first", "sp_dataframe_flatten", "sp_dataframe_group_by", "sp_dataframe_group_by_grouping_sets", "sp_dataframe_intersect", "sp_dataframe_join", "sp_dataframe_join_table_function", "sp_dataframe_limit", "sp_dataframe_na_drop__python", "sp_dataframe_na_drop__scala", "sp_dataframe_na_fill", "sp_dataframe_na_replace", "sp_dataframe_natural_join", "sp_dataframe_pivot", "sp_dataframe_random_split", "sp_dataframe_reader_init", "sp_dataframe_reader_option", "sp_dataframe_reader_options", "sp_dataframe_reader_schema", "sp_dataframe_reader_with_metadata", "sp_dataframe_ref", "sp_dataframe_rename", "sp_dataframe_rollup", "sp_dataframe_sample", "sp_dataframe_select__columns", "sp_dataframe_select__exprs", "sp_dataframe_show", "sp_dataframe_sort", "sp_dataframe_stat_approx_quantile", "sp_dataframe_stat_corr", "sp_dataframe_stat_cov", "sp_dataframe_stat_cross_tab", "sp_dataframe_stat_sample_by", "sp_dataframe_to_df", "sp_dataframe_to_local_iterator", "sp_dataframe_to_pandas", "sp_dataframe_to_pandas_batches", "sp_dataframe_union", "sp_dataframe_union_all", "sp_dataframe_union_all_by_name", "sp_dataframe_union_by_name", "sp_dataframe_unpivot", "sp_dataframe_with_column", "sp_dataframe_with_column_renamed", "sp_dataframe_with_columns", "sp_dataframe_write", "sp_datatype_val", "sp_flatten", "sp_fn_ref", "sp_generator", "sp_grouping_sets", "sp_merge_delete_when_matched_clause", "sp_merge_insert_when_not_matched_clause", "sp_merge_update_when_matched_clause", "sp_name_ref", "sp_range", "sp_read_avro", "sp_read_csv", "sp_read_json", "sp_read_orc", "sp_read_parquet", "sp_read_table", "sp_read_xml", "sp_relational_grouped_dataframe_agg", "sp_relational_grouped_dataframe_apply_in_pandas", "sp_relational_grouped_dataframe_builtin", "sp_relational_grouped_dataframe_pivot", "sp_relational_grouped_dataframe_ref", "sp_row", "sp_session_table_function", "sp_sql", "sp_table", "sp_table_delete", "sp_table_drop_table", "sp_table_fn_call_alias", "sp_table_fn_call_over", "sp_table_merge", "sp_table_sample", "sp_table_update", "sp_to_snowpark_pandas", "sp_window_spec_empty", "sp_window_spec_order_by", "sp_window_spec_partition_by", "sp_window_spec_range_between", "sp_window_spec_rows_between", "sp_write_copy_into_location", "sp_write_csv", "sp_write_json", "sp_write_pandas", "sp_write_parquet", "sp_write_table", "stored_procedure", "string_val", "sub", "truncated_dataframe_expr", "truncated_expr", "truncated_relational_grouped_dataframe_expr", "tuple_val", "udaf", "udf", "udtf"] | None: ...

global___HasSrcPosition = HasSrcPosition

@typing.final
class IndirectTableFnIdRef(google.protobuf.message.Message):
    """fn.ir:140"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def id(self) -> global___VarId: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        id: global___VarId | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["id", b"id", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["id", b"id", "src", b"src"]) -> None: ...

global___IndirectTableFnIdRef = IndirectTableFnIdRef

@typing.final
class IndirectTableFnNameRef(google.protobuf.message.Message):
    """fn.ir:136"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def name(self) -> global___SpNameRef: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        name: global___SpNameRef | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["name", b"name", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["name", b"name", "src", b"src"]) -> None: ...

global___IndirectTableFnNameRef = IndirectTableFnNameRef

@typing.final
class Int64Val(google.protobuf.message.Message):
    """const.ir:20"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SRC_FIELD_NUMBER: builtins.int
    V_FIELD_NUMBER: builtins.int
    v: builtins.int
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        src: global___SrcPosition | None = ...,
        v: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["src", b"src", "v", b"v"]) -> None: ...

global___Int64Val = Int64Val

@typing.final
class Leq(google.protobuf.message.Message):
    """op.ir:30"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LHS_FIELD_NUMBER: builtins.int
    RHS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def lhs(self) -> global___Expr: ...
    @property
    def rhs(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        lhs: global___Expr | None = ...,
        rhs: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> None: ...

global___Leq = Leq

@typing.final
class ListVal(google.protobuf.message.Message):
    """expr.ir:9"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SRC_FIELD_NUMBER: builtins.int
    VS_FIELD_NUMBER: builtins.int
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def vs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Expr]: ...
    def __init__(
        self,
        *,
        src: global___SrcPosition | None = ...,
        vs: collections.abc.Iterable[global___Expr] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["src", b"src", "vs", b"vs"]) -> None: ...

global___ListVal = ListVal

@typing.final
class Lt(google.protobuf.message.Message):
    """op.ir:28"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LHS_FIELD_NUMBER: builtins.int
    RHS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def lhs(self) -> global___Expr: ...
    @property
    def rhs(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        lhs: global___Expr | None = ...,
        rhs: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> None: ...

global___Lt = Lt

@typing.final
class Mod(google.protobuf.message.Message):
    """op.ir:50"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LHS_FIELD_NUMBER: builtins.int
    RHS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def lhs(self) -> global___Expr: ...
    @property
    def rhs(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        lhs: global___Expr | None = ...,
        rhs: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> None: ...

global___Mod = Mod

@typing.final
class Mul(google.protobuf.message.Message):
    """op.ir:46"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LHS_FIELD_NUMBER: builtins.int
    RHS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def lhs(self) -> global___Expr: ...
    @property
    def rhs(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        lhs: global___Expr | None = ...,
        rhs: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> None: ...

global___Mul = Mul

@typing.final
class Neg(google.protobuf.message.Message):
    """op.ir:40"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    OPERAND_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def operand(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        operand: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["operand", b"operand", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["operand", b"operand", "src", b"src"]) -> None: ...

global___Neg = Neg

@typing.final
class Neq(google.protobuf.message.Message):
    """op.ir:26"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LHS_FIELD_NUMBER: builtins.int
    RHS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def lhs(self) -> global___Expr: ...
    @property
    def rhs(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        lhs: global___Expr | None = ...,
        rhs: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> None: ...

global___Neq = Neq

@typing.final
class Not(google.protobuf.message.Message):
    """op.ir:14"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    OPERAND_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def operand(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        operand: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["operand", b"operand", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["operand", b"operand", "src", b"src"]) -> None: ...

global___Not = Not

@typing.final
class NullVal(google.protobuf.message.Message):
    """const.ir:14"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SRC_FIELD_NUMBER: builtins.int
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["src", b"src"]) -> None: ...

global___NullVal = NullVal

@typing.final
class ObjectGetItem(google.protobuf.message.Message):
    """expr.ir:25"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ARGS_FIELD_NUMBER: builtins.int
    OBJ_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def args(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Expr]: ...
    @property
    def obj(self) -> global___VarId: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        args: collections.abc.Iterable[global___Expr] | None = ...,
        obj: global___VarId | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["obj", b"obj", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["args", b"args", "obj", b"obj", "src", b"src"]) -> None: ...

global___ObjectGetItem = ObjectGetItem

@typing.final
class Or(google.protobuf.message.Message):
    """op.ir:18"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LHS_FIELD_NUMBER: builtins.int
    RHS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def lhs(self) -> global___Expr: ...
    @property
    def rhs(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        lhs: global___Expr | None = ...,
        rhs: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> None: ...

global___Or = Or

@typing.final
class Pow(google.protobuf.message.Message):
    """op.ir:52"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LHS_FIELD_NUMBER: builtins.int
    RHS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def lhs(self) -> global___Expr: ...
    @property
    def rhs(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        lhs: global___Expr | None = ...,
        rhs: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> None: ...

global___Pow = Pow

@typing.final
class PythonDateVal(google.protobuf.message.Message):
    """const.ir:65"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DAY_FIELD_NUMBER: builtins.int
    MONTH_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    YEAR_FIELD_NUMBER: builtins.int
    day: builtins.int
    month: builtins.int
    year: builtins.int
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        day: builtins.int = ...,
        month: builtins.int = ...,
        src: global___SrcPosition | None = ...,
        year: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["day", b"day", "month", b"month", "src", b"src", "year", b"year"]) -> None: ...

global___PythonDateVal = PythonDateVal

@typing.final
class PythonTimeVal(google.protobuf.message.Message):
    """const.ir:71"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    HOUR_FIELD_NUMBER: builtins.int
    MICROSECOND_FIELD_NUMBER: builtins.int
    MINUTE_FIELD_NUMBER: builtins.int
    SECOND_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    TZ_FIELD_NUMBER: builtins.int
    hour: builtins.int
    microsecond: builtins.int
    minute: builtins.int
    second: builtins.int
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def tz(self) -> global___PythonTimeZone: ...
    def __init__(
        self,
        *,
        hour: builtins.int = ...,
        microsecond: builtins.int = ...,
        minute: builtins.int = ...,
        second: builtins.int = ...,
        src: global___SrcPosition | None = ...,
        tz: global___PythonTimeZone | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["src", b"src", "tz", b"tz"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["hour", b"hour", "microsecond", b"microsecond", "minute", b"minute", "second", b"second", "src", b"src", "tz", b"tz"]) -> None: ...

global___PythonTimeVal = PythonTimeVal

@typing.final
class PythonTimestampVal(google.protobuf.message.Message):
    """const.ir:54"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DAY_FIELD_NUMBER: builtins.int
    HOUR_FIELD_NUMBER: builtins.int
    MICROSECOND_FIELD_NUMBER: builtins.int
    MINUTE_FIELD_NUMBER: builtins.int
    MONTH_FIELD_NUMBER: builtins.int
    SECOND_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    TZ_FIELD_NUMBER: builtins.int
    YEAR_FIELD_NUMBER: builtins.int
    day: builtins.int
    hour: builtins.int
    microsecond: builtins.int
    minute: builtins.int
    month: builtins.int
    second: builtins.int
    year: builtins.int
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def tz(self) -> global___PythonTimeZone: ...
    def __init__(
        self,
        *,
        day: builtins.int = ...,
        hour: builtins.int = ...,
        microsecond: builtins.int = ...,
        minute: builtins.int = ...,
        month: builtins.int = ...,
        second: builtins.int = ...,
        src: global___SrcPosition | None = ...,
        tz: global___PythonTimeZone | None = ...,
        year: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["src", b"src", "tz", b"tz"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["day", b"day", "hour", b"hour", "microsecond", b"microsecond", "minute", b"minute", "month", b"month", "second", b"second", "src", b"src", "tz", b"tz", "year", b"year"]) -> None: ...

global___PythonTimestampVal = PythonTimestampVal

@typing.final
class RedactedConst(google.protobuf.message.Message):
    """const.ir:8"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PROXY_VALUE_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def proxy_value(self) -> global___Const: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        proxy_value: global___Const | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["proxy_value", b"proxy_value", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["proxy_value", b"proxy_value", "src", b"src"]) -> None: ...

global___RedactedConst = RedactedConst

@typing.final
class Request(google.protobuf.message.Message):
    """ast.ir:4"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INTERNED_VALUE_TABLE_FIELD_NUMBER: builtins.int
    BODY_FIELD_NUMBER: builtins.int
    CLIENT_AST_VERSION_FIELD_NUMBER: builtins.int
    CLIENT_LANGUAGE_FIELD_NUMBER: builtins.int
    CLIENT_VERSION_FIELD_NUMBER: builtins.int
    client_ast_version: builtins.int
    @property
    def interned_value_table(self) -> global___InternedValueTable: ...
    @property
    def body(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Stmt]: ...
    @property
    def client_language(self) -> global___Language: ...
    @property
    def client_version(self) -> global___Version: ...
    def __init__(
        self,
        *,
        interned_value_table: global___InternedValueTable | None = ...,
        body: collections.abc.Iterable[global___Stmt] | None = ...,
        client_ast_version: builtins.int = ...,
        client_language: global___Language | None = ...,
        client_version: global___Version | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["client_language", b"client_language", "client_version", b"client_version", "interned_value_table", b"interned_value_table"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["body", b"body", "client_ast_version", b"client_ast_version", "client_language", b"client_language", "client_version", b"client_version", "interned_value_table", b"interned_value_table"]) -> None: ...

global___Request = Request

@typing.final
class Response(google.protobuf.message.Message):
    """ast.ir:12"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INTERNED_VALUE_TABLE_FIELD_NUMBER: builtins.int
    BODY_FIELD_NUMBER: builtins.int
    @property
    def interned_value_table(self) -> global___InternedValueTable: ...
    @property
    def body(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Result]: ...
    def __init__(
        self,
        *,
        interned_value_table: global___InternedValueTable | None = ...,
        body: collections.abc.Iterable[global___Result] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["interned_value_table", b"interned_value_table"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["body", b"body", "interned_value_table", b"interned_value_table"]) -> None: ...

global___Response = Response

@typing.final
class Result(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TRAIT_ERROR_FIELD_NUMBER: builtins.int
    EVAL_OK_FIELD_NUMBER: builtins.int
    EXTENSION_ERROR_FIELD_NUMBER: builtins.int
    SESSION_RESET_REQUIRED_ERROR_FIELD_NUMBER: builtins.int
    @property
    def trait_error(self) -> global___Error: ...
    @property
    def eval_ok(self) -> global___EvalOk: ...
    @property
    def extension_error(self) -> global___ExtensionError: ...
    @property
    def session_reset_required_error(self) -> global___SessionResetRequiredError: ...
    def __init__(
        self,
        *,
        trait_error: global___Error | None = ...,
        eval_ok: global___EvalOk | None = ...,
        extension_error: global___ExtensionError | None = ...,
        session_reset_required_error: global___SessionResetRequiredError | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["eval_ok", b"eval_ok", "extension_error", b"extension_error", "session_reset_required_error", b"session_reset_required_error", "trait_error", b"trait_error", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["eval_ok", b"eval_ok", "extension_error", b"extension_error", "session_reset_required_error", b"session_reset_required_error", "trait_error", b"trait_error", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["trait_error", "eval_ok", "extension_error", "session_reset_required_error"] | None: ...

global___Result = Result

@typing.final
class SeqMapVal(google.protobuf.message.Message):
    """expr.ir:14"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KVS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def kvs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TupleVal]: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        kvs: collections.abc.Iterable[global___TupleVal] | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["kvs", b"kvs", "src", b"src"]) -> None: ...

global___SeqMapVal = SeqMapVal

@typing.final
class SessionResetRequiredError(google.protobuf.message.Message):
    """ast.ir:102"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    UID_FIELD_NUMBER: builtins.int
    VAR_ID_FIELD_NUMBER: builtins.int
    uid: builtins.int
    @property
    def var_id(self) -> global___VarId: ...
    def __init__(
        self,
        *,
        uid: builtins.int = ...,
        var_id: global___VarId | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["var_id", b"var_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["uid", b"uid", "var_id", b"var_id"]) -> None: ...

global___SessionResetRequiredError = SessionResetRequiredError

@typing.final
class SfQueryResult(google.protobuf.message.Message):
    """ast.ir:80"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    UUID_FIELD_NUMBER: builtins.int
    uuid: builtins.str
    def __init__(
        self,
        *,
        uuid: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["uuid", b"uuid"]) -> None: ...

global___SfQueryResult = SfQueryResult

@typing.final
class ShowResult(google.protobuf.message.Message):
    """ast.ir:86"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___ShowResult = ShowResult

@typing.final
class SpCaseExpr(google.protobuf.message.Message):
    """column.ir:19"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONDITION_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    @property
    def condition(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def value(self) -> global___Expr: ...
    def __init__(
        self,
        *,
        condition: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
        value: global___Expr | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["condition", b"condition", "src", b"src", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["condition", b"condition", "src", b"src", "value", b"value"]) -> None: ...

global___SpCaseExpr = SpCaseExpr

@typing.final
class SpColumnAlias(google.protobuf.message.Message):
    """column.ir:29"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL_FIELD_NUMBER: builtins.int
    FN_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    name: builtins.str
    @property
    def col(self) -> global___Expr: ...
    @property
    def fn(self) -> global___SpColumnAliasFn: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        col: global___Expr | None = ...,
        fn: global___SpColumnAliasFn | None = ...,
        name: builtins.str = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["col", b"col", "fn", b"fn", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col", b"col", "fn", b"fn", "name", b"name", "src", b"src"]) -> None: ...

global___SpColumnAlias = SpColumnAlias

@typing.final
class SpColumnApply_Int(google.protobuf.message.Message):
    """column.ir:36"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL_FIELD_NUMBER: builtins.int
    IDX_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    idx: builtins.int
    @property
    def col(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        col: global___Expr | None = ...,
        idx: builtins.int = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["col", b"col", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col", b"col", "idx", b"idx", "src", b"src"]) -> None: ...

global___SpColumnApply_Int = SpColumnApply_Int

@typing.final
class SpColumnApply_String(google.protobuf.message.Message):
    """column.ir:40"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL_FIELD_NUMBER: builtins.int
    FIELD_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    field: builtins.str
    @property
    def col(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        col: global___Expr | None = ...,
        field: builtins.str = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["col", b"col", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col", b"col", "field", b"field", "src", b"src"]) -> None: ...

global___SpColumnApply_String = SpColumnApply_String

@typing.final
class SpColumnAsc(google.protobuf.message.Message):
    """column.ir:44"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL_FIELD_NUMBER: builtins.int
    NULL_ORDER_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def col(self) -> global___Expr: ...
    @property
    def null_order(self) -> global___SpNullOrder: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        col: global___Expr | None = ...,
        null_order: global___SpNullOrder | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["col", b"col", "null_order", b"null_order", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col", b"col", "null_order", b"null_order", "src", b"src"]) -> None: ...

global___SpColumnAsc = SpColumnAsc

@typing.final
class SpColumnBetween(google.protobuf.message.Message):
    """column.ir:48"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL_FIELD_NUMBER: builtins.int
    LOWER_BOUND_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    UPPER_BOUND_FIELD_NUMBER: builtins.int
    @property
    def col(self) -> global___Expr: ...
    @property
    def lower_bound(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def upper_bound(self) -> global___Expr: ...
    def __init__(
        self,
        *,
        col: global___Expr | None = ...,
        lower_bound: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
        upper_bound: global___Expr | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["col", b"col", "lower_bound", b"lower_bound", "src", b"src", "upper_bound", b"upper_bound"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col", b"col", "lower_bound", b"lower_bound", "src", b"src", "upper_bound", b"upper_bound"]) -> None: ...

global___SpColumnBetween = SpColumnBetween

@typing.final
class SpColumnCaseWhen(google.protobuf.message.Message):
    """column.ir:14"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CASES_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def cases(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SpCaseExpr]: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        cases: collections.abc.Iterable[global___SpCaseExpr] | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["cases", b"cases", "src", b"src"]) -> None: ...

global___SpColumnCaseWhen = SpColumnCaseWhen

@typing.final
class SpColumnCast(google.protobuf.message.Message):
    """column.ir:53"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    TO_FIELD_NUMBER: builtins.int
    @property
    def col(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def to(self) -> global___SpDataType: ...
    def __init__(
        self,
        *,
        col: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
        to: global___SpDataType | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["col", b"col", "src", b"src", "to", b"to"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col", b"col", "src", b"src", "to", b"to"]) -> None: ...

global___SpColumnCast = SpColumnCast

@typing.final
class SpColumnDesc(google.protobuf.message.Message):
    """column.ir:61"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL_FIELD_NUMBER: builtins.int
    NULL_ORDER_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def col(self) -> global___Expr: ...
    @property
    def null_order(self) -> global___SpNullOrder: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        col: global___Expr | None = ...,
        null_order: global___SpNullOrder | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["col", b"col", "null_order", b"null_order", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col", b"col", "null_order", b"null_order", "src", b"src"]) -> None: ...

global___SpColumnDesc = SpColumnDesc

@typing.final
class SpColumnEqualNan(google.protobuf.message.Message):
    """column.ir:67"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def col(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        col: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["col", b"col", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col", b"col", "src", b"src"]) -> None: ...

global___SpColumnEqualNan = SpColumnEqualNan

@typing.final
class SpColumnEqualNull(google.protobuf.message.Message):
    """column.ir:69"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LHS_FIELD_NUMBER: builtins.int
    RHS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def lhs(self) -> global___Expr: ...
    @property
    def rhs(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        lhs: global___Expr | None = ...,
        rhs: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> None: ...

global___SpColumnEqualNull = SpColumnEqualNull

@typing.final
class SpColumnFn(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SP_COLUMN_ALIAS_FIELD_NUMBER: builtins.int
    SP_COLUMN_APPLY__INT_FIELD_NUMBER: builtins.int
    SP_COLUMN_APPLY__STRING_FIELD_NUMBER: builtins.int
    SP_COLUMN_ASC_FIELD_NUMBER: builtins.int
    SP_COLUMN_BETWEEN_FIELD_NUMBER: builtins.int
    SP_COLUMN_CAST_FIELD_NUMBER: builtins.int
    SP_COLUMN_DESC_FIELD_NUMBER: builtins.int
    SP_COLUMN_EQUAL_NAN_FIELD_NUMBER: builtins.int
    SP_COLUMN_IN_FIELD_NUMBER: builtins.int
    SP_COLUMN_IS_NOT_NULL_FIELD_NUMBER: builtins.int
    SP_COLUMN_IS_NULL_FIELD_NUMBER: builtins.int
    SP_COLUMN_OVER_FIELD_NUMBER: builtins.int
    SP_COLUMN_STRING_COLLATE_FIELD_NUMBER: builtins.int
    SP_COLUMN_STRING_CONTAINS_FIELD_NUMBER: builtins.int
    SP_COLUMN_STRING_ENDS_WITH_FIELD_NUMBER: builtins.int
    SP_COLUMN_STRING_LIKE_FIELD_NUMBER: builtins.int
    SP_COLUMN_STRING_REGEXP_FIELD_NUMBER: builtins.int
    SP_COLUMN_STRING_STARTS_WITH_FIELD_NUMBER: builtins.int
    SP_COLUMN_STRING_SUBSTR_FIELD_NUMBER: builtins.int
    SP_COLUMN_TRY_CAST_FIELD_NUMBER: builtins.int
    SP_COLUMN_WITHIN_GROUP_FIELD_NUMBER: builtins.int
    @property
    def sp_column_alias(self) -> global___SpColumnAlias: ...
    @property
    def sp_column_apply__int(self) -> global___SpColumnApply_Int: ...
    @property
    def sp_column_apply__string(self) -> global___SpColumnApply_String: ...
    @property
    def sp_column_asc(self) -> global___SpColumnAsc: ...
    @property
    def sp_column_between(self) -> global___SpColumnBetween: ...
    @property
    def sp_column_cast(self) -> global___SpColumnCast: ...
    @property
    def sp_column_desc(self) -> global___SpColumnDesc: ...
    @property
    def sp_column_equal_nan(self) -> global___SpColumnEqualNan: ...
    @property
    def sp_column_in(self) -> global___SpColumnIn: ...
    @property
    def sp_column_is_not_null(self) -> global___SpColumnIsNotNull: ...
    @property
    def sp_column_is_null(self) -> global___SpColumnIsNull: ...
    @property
    def sp_column_over(self) -> global___SpColumnOver: ...
    @property
    def sp_column_string_collate(self) -> global___SpColumnStringCollate: ...
    @property
    def sp_column_string_contains(self) -> global___SpColumnStringContains: ...
    @property
    def sp_column_string_ends_with(self) -> global___SpColumnStringEndsWith: ...
    @property
    def sp_column_string_like(self) -> global___SpColumnStringLike: ...
    @property
    def sp_column_string_regexp(self) -> global___SpColumnStringRegexp: ...
    @property
    def sp_column_string_starts_with(self) -> global___SpColumnStringStartsWith: ...
    @property
    def sp_column_string_substr(self) -> global___SpColumnStringSubstr: ...
    @property
    def sp_column_try_cast(self) -> global___SpColumnTryCast: ...
    @property
    def sp_column_within_group(self) -> global___SpColumnWithinGroup: ...
    def __init__(
        self,
        *,
        sp_column_alias: global___SpColumnAlias | None = ...,
        sp_column_apply__int: global___SpColumnApply_Int | None = ...,
        sp_column_apply__string: global___SpColumnApply_String | None = ...,
        sp_column_asc: global___SpColumnAsc | None = ...,
        sp_column_between: global___SpColumnBetween | None = ...,
        sp_column_cast: global___SpColumnCast | None = ...,
        sp_column_desc: global___SpColumnDesc | None = ...,
        sp_column_equal_nan: global___SpColumnEqualNan | None = ...,
        sp_column_in: global___SpColumnIn | None = ...,
        sp_column_is_not_null: global___SpColumnIsNotNull | None = ...,
        sp_column_is_null: global___SpColumnIsNull | None = ...,
        sp_column_over: global___SpColumnOver | None = ...,
        sp_column_string_collate: global___SpColumnStringCollate | None = ...,
        sp_column_string_contains: global___SpColumnStringContains | None = ...,
        sp_column_string_ends_with: global___SpColumnStringEndsWith | None = ...,
        sp_column_string_like: global___SpColumnStringLike | None = ...,
        sp_column_string_regexp: global___SpColumnStringRegexp | None = ...,
        sp_column_string_starts_with: global___SpColumnStringStartsWith | None = ...,
        sp_column_string_substr: global___SpColumnStringSubstr | None = ...,
        sp_column_try_cast: global___SpColumnTryCast | None = ...,
        sp_column_within_group: global___SpColumnWithinGroup | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["sp_column_alias", b"sp_column_alias", "sp_column_apply__int", b"sp_column_apply__int", "sp_column_apply__string", b"sp_column_apply__string", "sp_column_asc", b"sp_column_asc", "sp_column_between", b"sp_column_between", "sp_column_cast", b"sp_column_cast", "sp_column_desc", b"sp_column_desc", "sp_column_equal_nan", b"sp_column_equal_nan", "sp_column_in", b"sp_column_in", "sp_column_is_not_null", b"sp_column_is_not_null", "sp_column_is_null", b"sp_column_is_null", "sp_column_over", b"sp_column_over", "sp_column_string_collate", b"sp_column_string_collate", "sp_column_string_contains", b"sp_column_string_contains", "sp_column_string_ends_with", b"sp_column_string_ends_with", "sp_column_string_like", b"sp_column_string_like", "sp_column_string_regexp", b"sp_column_string_regexp", "sp_column_string_starts_with", b"sp_column_string_starts_with", "sp_column_string_substr", b"sp_column_string_substr", "sp_column_try_cast", b"sp_column_try_cast", "sp_column_within_group", b"sp_column_within_group", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["sp_column_alias", b"sp_column_alias", "sp_column_apply__int", b"sp_column_apply__int", "sp_column_apply__string", b"sp_column_apply__string", "sp_column_asc", b"sp_column_asc", "sp_column_between", b"sp_column_between", "sp_column_cast", b"sp_column_cast", "sp_column_desc", b"sp_column_desc", "sp_column_equal_nan", b"sp_column_equal_nan", "sp_column_in", b"sp_column_in", "sp_column_is_not_null", b"sp_column_is_not_null", "sp_column_is_null", b"sp_column_is_null", "sp_column_over", b"sp_column_over", "sp_column_string_collate", b"sp_column_string_collate", "sp_column_string_contains", b"sp_column_string_contains", "sp_column_string_ends_with", b"sp_column_string_ends_with", "sp_column_string_like", b"sp_column_string_like", "sp_column_string_regexp", b"sp_column_string_regexp", "sp_column_string_starts_with", b"sp_column_string_starts_with", "sp_column_string_substr", b"sp_column_string_substr", "sp_column_try_cast", b"sp_column_try_cast", "sp_column_within_group", b"sp_column_within_group", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["sp_column_alias", "sp_column_apply__int", "sp_column_apply__string", "sp_column_asc", "sp_column_between", "sp_column_cast", "sp_column_desc", "sp_column_equal_nan", "sp_column_in", "sp_column_is_not_null", "sp_column_is_null", "sp_column_over", "sp_column_string_collate", "sp_column_string_contains", "sp_column_string_ends_with", "sp_column_string_like", "sp_column_string_regexp", "sp_column_string_starts_with", "sp_column_string_substr", "sp_column_try_cast", "sp_column_within_group"] | None: ...

global___SpColumnFn = SpColumnFn

@typing.final
class SpColumnIn(google.protobuf.message.Message):
    """column.ir:74"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    VALUES_FIELD_NUMBER: builtins.int
    @property
    def col(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def values(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Expr]: ...
    def __init__(
        self,
        *,
        col: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
        values: collections.abc.Iterable[global___Expr] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["col", b"col", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col", b"col", "src", b"src", "values", b"values"]) -> None: ...

global___SpColumnIn = SpColumnIn

@typing.final
class SpColumnIsNotNull(google.protobuf.message.Message):
    """column.ir:78"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def col(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        col: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["col", b"col", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col", b"col", "src", b"src"]) -> None: ...

global___SpColumnIsNotNull = SpColumnIsNotNull

@typing.final
class SpColumnIsNull(google.protobuf.message.Message):
    """column.ir:80"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def col(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        col: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["col", b"col", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col", b"col", "src", b"src"]) -> None: ...

global___SpColumnIsNull = SpColumnIsNull

@typing.final
class SpColumnOver(google.protobuf.message.Message):
    """column.ir:82"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    WINDOW_SPEC_FIELD_NUMBER: builtins.int
    @property
    def col(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def window_spec(self) -> global___SpWindowSpecExpr: ...
    def __init__(
        self,
        *,
        col: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
        window_spec: global___SpWindowSpecExpr | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["col", b"col", "src", b"src", "window_spec", b"window_spec"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col", b"col", "src", b"src", "window_spec", b"window_spec"]) -> None: ...

global___SpColumnOver = SpColumnOver

@typing.final
class SpColumnSqlExpr(google.protobuf.message.Message):
    """column.ir:8"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DF_ALIAS_FIELD_NUMBER: builtins.int
    SQL_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    sql: builtins.str
    @property
    def df_alias(self) -> google.protobuf.wrappers_pb2.StringValue: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        df_alias: google.protobuf.wrappers_pb2.StringValue | None = ...,
        sql: builtins.str = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df_alias", b"df_alias", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["df_alias", b"df_alias", "sql", b"sql", "src", b"src"]) -> None: ...

global___SpColumnSqlExpr = SpColumnSqlExpr

@typing.final
class SpColumnStringCollate(google.protobuf.message.Message):
    """column.ir:109"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL_FIELD_NUMBER: builtins.int
    COLLATION_SPEC_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def col(self) -> global___Expr: ...
    @property
    def collation_spec(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        col: global___Expr | None = ...,
        collation_spec: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["col", b"col", "collation_spec", b"collation_spec", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col", b"col", "collation_spec", b"collation_spec", "src", b"src"]) -> None: ...

global___SpColumnStringCollate = SpColumnStringCollate

@typing.final
class SpColumnStringContains(google.protobuf.message.Message):
    """column.ir:113"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL_FIELD_NUMBER: builtins.int
    PATTERN_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def col(self) -> global___Expr: ...
    @property
    def pattern(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        col: global___Expr | None = ...,
        pattern: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["col", b"col", "pattern", b"pattern", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col", b"col", "pattern", b"pattern", "src", b"src"]) -> None: ...

global___SpColumnStringContains = SpColumnStringContains

@typing.final
class SpColumnStringEndsWith(google.protobuf.message.Message):
    """column.ir:100"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    SUFFIX_FIELD_NUMBER: builtins.int
    @property
    def col(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def suffix(self) -> global___Expr: ...
    def __init__(
        self,
        *,
        col: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
        suffix: global___Expr | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["col", b"col", "src", b"src", "suffix", b"suffix"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col", b"col", "src", b"src", "suffix", b"suffix"]) -> None: ...

global___SpColumnStringEndsWith = SpColumnStringEndsWith

@typing.final
class SpColumnStringLike(google.protobuf.message.Message):
    """column.ir:92"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL_FIELD_NUMBER: builtins.int
    PATTERN_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def col(self) -> global___Expr: ...
    @property
    def pattern(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        col: global___Expr | None = ...,
        pattern: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["col", b"col", "pattern", b"pattern", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col", b"col", "pattern", b"pattern", "src", b"src"]) -> None: ...

global___SpColumnStringLike = SpColumnStringLike

@typing.final
class SpColumnStringRegexp(google.protobuf.message.Message):
    """column.ir:87"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL_FIELD_NUMBER: builtins.int
    PARAMETERS_FIELD_NUMBER: builtins.int
    PATTERN_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def col(self) -> global___Expr: ...
    @property
    def parameters(self) -> global___Expr: ...
    @property
    def pattern(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        col: global___Expr | None = ...,
        parameters: global___Expr | None = ...,
        pattern: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["col", b"col", "parameters", b"parameters", "pattern", b"pattern", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col", b"col", "parameters", b"parameters", "pattern", b"pattern", "src", b"src"]) -> None: ...

global___SpColumnStringRegexp = SpColumnStringRegexp

@typing.final
class SpColumnStringStartsWith(google.protobuf.message.Message):
    """column.ir:96"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL_FIELD_NUMBER: builtins.int
    PREFIX_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def col(self) -> global___Expr: ...
    @property
    def prefix(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        col: global___Expr | None = ...,
        prefix: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["col", b"col", "prefix", b"prefix", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col", b"col", "prefix", b"prefix", "src", b"src"]) -> None: ...

global___SpColumnStringStartsWith = SpColumnStringStartsWith

@typing.final
class SpColumnStringSubstr(google.protobuf.message.Message):
    """column.ir:104"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL_FIELD_NUMBER: builtins.int
    LEN_FIELD_NUMBER: builtins.int
    POS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def col(self) -> global___Expr: ...
    @property
    def len(self) -> global___Expr: ...
    @property
    def pos(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        col: global___Expr | None = ...,
        len: global___Expr | None = ...,
        pos: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["col", b"col", "len", b"len", "pos", b"pos", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col", b"col", "len", b"len", "pos", b"pos", "src", b"src"]) -> None: ...

global___SpColumnStringSubstr = SpColumnStringSubstr

@typing.final
class SpColumnTryCast(google.protobuf.message.Message):
    """column.ir:57"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    TO_FIELD_NUMBER: builtins.int
    @property
    def col(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def to(self) -> global___SpDataType: ...
    def __init__(
        self,
        *,
        col: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
        to: global___SpDataType | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["col", b"col", "src", b"src", "to", b"to"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col", b"col", "src", b"src", "to", b"to"]) -> None: ...

global___SpColumnTryCast = SpColumnTryCast

@typing.final
class SpColumnWithinGroup(google.protobuf.message.Message):
    """column.ir:117"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL_FIELD_NUMBER: builtins.int
    COLS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def col(self) -> global___Expr: ...
    @property
    def cols(self) -> global___ExprArgList: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        col: global___Expr | None = ...,
        cols: global___ExprArgList | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["col", b"col", "cols", b"cols", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col", b"col", "cols", b"cols", "src", b"src"]) -> None: ...

global___SpColumnWithinGroup = SpColumnWithinGroup

@typing.final
class SpCreateDataframe(google.protobuf.message.Message):
    """dataframe.ir:53"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATA_FIELD_NUMBER: builtins.int
    SCHEMA_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def data(self) -> global___SpDataframeData: ...
    @property
    def schema(self) -> global___SpDataframeSchema: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        data: global___SpDataframeData | None = ...,
        schema: global___SpDataframeSchema | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["data", b"data", "schema", b"schema", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["data", b"data", "schema", b"schema", "src", b"src"]) -> None: ...

global___SpCreateDataframe = SpCreateDataframe

@typing.final
class SpDataframeAgg(google.protobuf.message.Message):
    """dataframe.ir:178"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DF_FIELD_NUMBER: builtins.int
    EXPRS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def exprs(self) -> global___ExprArgList: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        df: global___SpDataframeExpr | None = ...,
        exprs: global___ExprArgList | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "exprs", b"exprs", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["df", b"df", "exprs", b"exprs", "src", b"src"]) -> None: ...

global___SpDataframeAgg = SpDataframeAgg

@typing.final
class SpDataframeAlias(google.protobuf.message.Message):
    """dataframe.ir:183"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DF_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    name: builtins.str
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        df: global___SpDataframeExpr | None = ...,
        name: builtins.str = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["df", b"df", "name", b"name", "src", b"src"]) -> None: ...

global___SpDataframeAlias = SpDataframeAlias

@typing.final
class SpDataframeAnalyticsComputeLag(google.protobuf.message.Message):
    """dataframe-analytics.ir:27"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COLS_FIELD_NUMBER: builtins.int
    DF_FIELD_NUMBER: builtins.int
    FORMATTED_COL_NAMES_FIELD_NUMBER: builtins.int
    GROUP_BY_FIELD_NUMBER: builtins.int
    LAGS_FIELD_NUMBER: builtins.int
    ORDER_BY_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def cols(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Expr]: ...
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def formatted_col_names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def group_by(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def lags(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
    @property
    def order_by(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        cols: collections.abc.Iterable[global___Expr] | None = ...,
        df: global___SpDataframeExpr | None = ...,
        formatted_col_names: collections.abc.Iterable[builtins.str] | None = ...,
        group_by: collections.abc.Iterable[builtins.str] | None = ...,
        lags: collections.abc.Iterable[builtins.int] | None = ...,
        order_by: collections.abc.Iterable[builtins.str] | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["cols", b"cols", "df", b"df", "formatted_col_names", b"formatted_col_names", "group_by", b"group_by", "lags", b"lags", "order_by", b"order_by", "src", b"src"]) -> None: ...

global___SpDataframeAnalyticsComputeLag = SpDataframeAnalyticsComputeLag

@typing.final
class SpDataframeAnalyticsComputeLead(google.protobuf.message.Message):
    """dataframe-analytics.ir:36"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COLS_FIELD_NUMBER: builtins.int
    DF_FIELD_NUMBER: builtins.int
    FORMATTED_COL_NAMES_FIELD_NUMBER: builtins.int
    GROUP_BY_FIELD_NUMBER: builtins.int
    LEADS_FIELD_NUMBER: builtins.int
    ORDER_BY_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def cols(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Expr]: ...
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def formatted_col_names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def group_by(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def leads(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
    @property
    def order_by(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        cols: collections.abc.Iterable[global___Expr] | None = ...,
        df: global___SpDataframeExpr | None = ...,
        formatted_col_names: collections.abc.Iterable[builtins.str] | None = ...,
        group_by: collections.abc.Iterable[builtins.str] | None = ...,
        leads: collections.abc.Iterable[builtins.int] | None = ...,
        order_by: collections.abc.Iterable[builtins.str] | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["cols", b"cols", "df", b"df", "formatted_col_names", b"formatted_col_names", "group_by", b"group_by", "leads", b"leads", "order_by", b"order_by", "src", b"src"]) -> None: ...

global___SpDataframeAnalyticsComputeLead = SpDataframeAnalyticsComputeLead

@typing.final
class SpDataframeAnalyticsCumulativeAgg(google.protobuf.message.Message):
    """dataframe-analytics.ir:18"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    AGGS_FIELD_NUMBER: builtins.int
    DF_FIELD_NUMBER: builtins.int
    FORMATTED_COL_NAMES_FIELD_NUMBER: builtins.int
    GROUP_BY_FIELD_NUMBER: builtins.int
    IS_FORWARD_FIELD_NUMBER: builtins.int
    ORDER_BY_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    is_forward: builtins.bool
    @property
    def aggs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_List_String]: ...
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def formatted_col_names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def group_by(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def order_by(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        aggs: collections.abc.Iterable[global___Tuple_String_List_String] | None = ...,
        df: global___SpDataframeExpr | None = ...,
        formatted_col_names: collections.abc.Iterable[builtins.str] | None = ...,
        group_by: collections.abc.Iterable[builtins.str] | None = ...,
        is_forward: builtins.bool = ...,
        order_by: collections.abc.Iterable[builtins.str] | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["aggs", b"aggs", "df", b"df", "formatted_col_names", b"formatted_col_names", "group_by", b"group_by", "is_forward", b"is_forward", "order_by", b"order_by", "src", b"src"]) -> None: ...

global___SpDataframeAnalyticsCumulativeAgg = SpDataframeAnalyticsCumulativeAgg

@typing.final
class SpDataframeAnalyticsMovingAgg(google.protobuf.message.Message):
    """dataframe-analytics.ir:9"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    AGGS_FIELD_NUMBER: builtins.int
    DF_FIELD_NUMBER: builtins.int
    FORMATTED_COL_NAMES_FIELD_NUMBER: builtins.int
    GROUP_BY_FIELD_NUMBER: builtins.int
    ORDER_BY_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    WINDOW_SIZES_FIELD_NUMBER: builtins.int
    @property
    def aggs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_List_String]: ...
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def formatted_col_names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def group_by(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def order_by(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def window_sizes(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
    def __init__(
        self,
        *,
        aggs: collections.abc.Iterable[global___Tuple_String_List_String] | None = ...,
        df: global___SpDataframeExpr | None = ...,
        formatted_col_names: collections.abc.Iterable[builtins.str] | None = ...,
        group_by: collections.abc.Iterable[builtins.str] | None = ...,
        order_by: collections.abc.Iterable[builtins.str] | None = ...,
        src: global___SrcPosition | None = ...,
        window_sizes: collections.abc.Iterable[builtins.int] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["aggs", b"aggs", "df", b"df", "formatted_col_names", b"formatted_col_names", "group_by", b"group_by", "order_by", b"order_by", "src", b"src", "window_sizes", b"window_sizes"]) -> None: ...

global___SpDataframeAnalyticsMovingAgg = SpDataframeAnalyticsMovingAgg

@typing.final
class SpDataframeAnalyticsTimeSeriesAgg(google.protobuf.message.Message):
    """dataframe-analytics.ir:45"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    AGGS_FIELD_NUMBER: builtins.int
    DF_FIELD_NUMBER: builtins.int
    FORMATTED_COL_NAMES_FIELD_NUMBER: builtins.int
    GROUP_BY_FIELD_NUMBER: builtins.int
    SLIDING_INTERVAL_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    TIME_COL_FIELD_NUMBER: builtins.int
    WINDOWS_FIELD_NUMBER: builtins.int
    sliding_interval: builtins.str
    time_col: builtins.str
    @property
    def aggs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_List_String]: ...
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def formatted_col_names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def group_by(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def windows(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        aggs: collections.abc.Iterable[global___Tuple_String_List_String] | None = ...,
        df: global___SpDataframeExpr | None = ...,
        formatted_col_names: collections.abc.Iterable[builtins.str] | None = ...,
        group_by: collections.abc.Iterable[builtins.str] | None = ...,
        sliding_interval: builtins.str = ...,
        src: global___SrcPosition | None = ...,
        time_col: builtins.str = ...,
        windows: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["aggs", b"aggs", "df", b"df", "formatted_col_names", b"formatted_col_names", "group_by", b"group_by", "sliding_interval", b"sliding_interval", "src", b"src", "time_col", b"time_col", "windows", b"windows"]) -> None: ...

global___SpDataframeAnalyticsTimeSeriesAgg = SpDataframeAnalyticsTimeSeriesAgg

@typing.final
class SpDataframeCacheResult(google.protobuf.message.Message):
    """dataframe-io.ir:187"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DF_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    STATEMENT_PARAMS_FIELD_NUMBER: builtins.int
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def statement_params(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    def __init__(
        self,
        *,
        df: global___SpDataframeExpr | None = ...,
        src: global___SrcPosition | None = ...,
        statement_params: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["df", b"df", "src", b"src", "statement_params", b"statement_params"]) -> None: ...

global___SpDataframeCacheResult = SpDataframeCacheResult

@typing.final
class SpDataframeCol(google.protobuf.message.Message):
    """column.ir:1"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL_NAME_FIELD_NUMBER: builtins.int
    DF_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    col_name: builtins.str
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        col_name: builtins.str = ...,
        df: global___SpDataframeExpr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col_name", b"col_name", "df", b"df", "src", b"src"]) -> None: ...

global___SpDataframeCol = SpDataframeCol

@typing.final
class SpDataframeCollect(google.protobuf.message.Message):
    """dataframe.ir:33"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BLOCK_FIELD_NUMBER: builtins.int
    CASE_SENSITIVE_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    LOG_ON_EXCEPTION_FIELD_NUMBER: builtins.int
    NO_WAIT_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    STATEMENT_PARAMS_FIELD_NUMBER: builtins.int
    block: builtins.bool
    case_sensitive: builtins.bool
    log_on_exception: builtins.bool
    no_wait: builtins.bool
    @property
    def id(self) -> global___VarId: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def statement_params(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    def __init__(
        self,
        *,
        block: builtins.bool = ...,
        case_sensitive: builtins.bool = ...,
        id: global___VarId | None = ...,
        log_on_exception: builtins.bool = ...,
        no_wait: builtins.bool = ...,
        src: global___SrcPosition | None = ...,
        statement_params: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["id", b"id", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["block", b"block", "case_sensitive", b"case_sensitive", "id", b"id", "log_on_exception", b"log_on_exception", "no_wait", b"no_wait", "src", b"src", "statement_params", b"statement_params"]) -> None: ...

global___SpDataframeCollect = SpDataframeCollect

@typing.final
class SpDataframeCopyIntoTable(google.protobuf.message.Message):
    """dataframe-io.ir:169"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COPY_OPTIONS_FIELD_NUMBER: builtins.int
    DF_FIELD_NUMBER: builtins.int
    FILES_FIELD_NUMBER: builtins.int
    FORMAT_TYPE_OPTIONS_FIELD_NUMBER: builtins.int
    ICEBERG_CONFIG_FIELD_NUMBER: builtins.int
    PATTERN_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    STATEMENT_PARAMS_FIELD_NUMBER: builtins.int
    TABLE_NAME_FIELD_NUMBER: builtins.int
    TARGET_COLUMNS_FIELD_NUMBER: builtins.int
    TRANSFORMATIONS_FIELD_NUMBER: builtins.int
    VALIDATION_MODE_FIELD_NUMBER: builtins.int
    @property
    def copy_options(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_Expr]: ...
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def files(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def format_type_options(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_Expr]: ...
    @property
    def iceberg_config(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    @property
    def pattern(self) -> google.protobuf.wrappers_pb2.StringValue: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def statement_params(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    @property
    def table_name(self) -> global___SpNameRef: ...
    @property
    def target_columns(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def transformations(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Expr]: ...
    @property
    def validation_mode(self) -> google.protobuf.wrappers_pb2.StringValue: ...
    def __init__(
        self,
        *,
        copy_options: collections.abc.Iterable[global___Tuple_String_Expr] | None = ...,
        df: global___SpDataframeExpr | None = ...,
        files: collections.abc.Iterable[builtins.str] | None = ...,
        format_type_options: collections.abc.Iterable[global___Tuple_String_Expr] | None = ...,
        iceberg_config: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
        pattern: google.protobuf.wrappers_pb2.StringValue | None = ...,
        src: global___SrcPosition | None = ...,
        statement_params: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
        table_name: global___SpNameRef | None = ...,
        target_columns: collections.abc.Iterable[builtins.str] | None = ...,
        transformations: collections.abc.Iterable[global___Expr] | None = ...,
        validation_mode: google.protobuf.wrappers_pb2.StringValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "pattern", b"pattern", "src", b"src", "table_name", b"table_name", "validation_mode", b"validation_mode"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["copy_options", b"copy_options", "df", b"df", "files", b"files", "format_type_options", b"format_type_options", "iceberg_config", b"iceberg_config", "pattern", b"pattern", "src", b"src", "statement_params", b"statement_params", "table_name", b"table_name", "target_columns", b"target_columns", "transformations", b"transformations", "validation_mode", b"validation_mode"]) -> None: ...

global___SpDataframeCopyIntoTable = SpDataframeCopyIntoTable

@typing.final
class SpDataframeCount(google.protobuf.message.Message):
    """dataframe.ir:27"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BLOCK_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    STATEMENT_PARAMS_FIELD_NUMBER: builtins.int
    block: builtins.bool
    @property
    def id(self) -> global___VarId: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def statement_params(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    def __init__(
        self,
        *,
        block: builtins.bool = ...,
        id: global___VarId | None = ...,
        src: global___SrcPosition | None = ...,
        statement_params: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["id", b"id", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["block", b"block", "id", b"id", "src", b"src", "statement_params", b"statement_params"]) -> None: ...

global___SpDataframeCount = SpDataframeCount

@typing.final
class SpDataframeCreateOrReplaceDynamicTable(google.protobuf.message.Message):
    """dataframe-io.ir:153"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CLUSTERING_KEYS_FIELD_NUMBER: builtins.int
    COMMENT_FIELD_NUMBER: builtins.int
    DATA_RETENTION_TIME_FIELD_NUMBER: builtins.int
    DF_FIELD_NUMBER: builtins.int
    INITIALIZE_FIELD_NUMBER: builtins.int
    IS_TRANSIENT_FIELD_NUMBER: builtins.int
    LAG_FIELD_NUMBER: builtins.int
    MAX_DATA_EXTENSION_TIME_FIELD_NUMBER: builtins.int
    MODE_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    REFRESH_MODE_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    STATEMENT_PARAMS_FIELD_NUMBER: builtins.int
    WAREHOUSE_FIELD_NUMBER: builtins.int
    is_transient: builtins.bool
    lag: builtins.str
    warehouse: builtins.str
    @property
    def clustering_keys(self) -> global___List_Expr: ...
    @property
    def comment(self) -> google.protobuf.wrappers_pb2.StringValue: ...
    @property
    def data_retention_time(self) -> google.protobuf.wrappers_pb2.Int64Value: ...
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def initialize(self) -> google.protobuf.wrappers_pb2.StringValue: ...
    @property
    def max_data_extension_time(self) -> google.protobuf.wrappers_pb2.Int64Value: ...
    @property
    def mode(self) -> global___SpSaveMode: ...
    @property
    def name(self) -> global___SpNameRef: ...
    @property
    def refresh_mode(self) -> google.protobuf.wrappers_pb2.StringValue: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def statement_params(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    def __init__(
        self,
        *,
        clustering_keys: global___List_Expr | None = ...,
        comment: google.protobuf.wrappers_pb2.StringValue | None = ...,
        data_retention_time: google.protobuf.wrappers_pb2.Int64Value | None = ...,
        df: global___SpDataframeExpr | None = ...,
        initialize: google.protobuf.wrappers_pb2.StringValue | None = ...,
        is_transient: builtins.bool = ...,
        lag: builtins.str = ...,
        max_data_extension_time: google.protobuf.wrappers_pb2.Int64Value | None = ...,
        mode: global___SpSaveMode | None = ...,
        name: global___SpNameRef | None = ...,
        refresh_mode: google.protobuf.wrappers_pb2.StringValue | None = ...,
        src: global___SrcPosition | None = ...,
        statement_params: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
        warehouse: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["clustering_keys", b"clustering_keys", "comment", b"comment", "data_retention_time", b"data_retention_time", "df", b"df", "initialize", b"initialize", "max_data_extension_time", b"max_data_extension_time", "mode", b"mode", "name", b"name", "refresh_mode", b"refresh_mode", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["clustering_keys", b"clustering_keys", "comment", b"comment", "data_retention_time", b"data_retention_time", "df", b"df", "initialize", b"initialize", "is_transient", b"is_transient", "lag", b"lag", "max_data_extension_time", b"max_data_extension_time", "mode", b"mode", "name", b"name", "refresh_mode", b"refresh_mode", "src", b"src", "statement_params", b"statement_params", "warehouse", b"warehouse"]) -> None: ...

global___SpDataframeCreateOrReplaceDynamicTable = SpDataframeCreateOrReplaceDynamicTable

@typing.final
class SpDataframeCreateOrReplaceView(google.protobuf.message.Message):
    """dataframe-io.ir:145"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COMMENT_FIELD_NUMBER: builtins.int
    DF_FIELD_NUMBER: builtins.int
    IS_TEMP_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    STATEMENT_PARAMS_FIELD_NUMBER: builtins.int
    is_temp: builtins.bool
    @property
    def comment(self) -> google.protobuf.wrappers_pb2.StringValue: ...
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def name(self) -> global___SpNameRef: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def statement_params(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    def __init__(
        self,
        *,
        comment: google.protobuf.wrappers_pb2.StringValue | None = ...,
        df: global___SpDataframeExpr | None = ...,
        is_temp: builtins.bool = ...,
        name: global___SpNameRef | None = ...,
        src: global___SrcPosition | None = ...,
        statement_params: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["comment", b"comment", "df", b"df", "name", b"name", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["comment", b"comment", "df", b"df", "is_temp", b"is_temp", "name", b"name", "src", b"src", "statement_params", b"statement_params"]) -> None: ...

global___SpDataframeCreateOrReplaceView = SpDataframeCreateOrReplaceView

@typing.final
class SpDataframeCrossJoin(google.protobuf.message.Message):
    """dataframe.ir:188"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LHS_FIELD_NUMBER: builtins.int
    LSUFFIX_FIELD_NUMBER: builtins.int
    RHS_FIELD_NUMBER: builtins.int
    RSUFFIX_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def lhs(self) -> global___SpDataframeExpr: ...
    @property
    def lsuffix(self) -> google.protobuf.wrappers_pb2.StringValue: ...
    @property
    def rhs(self) -> global___SpDataframeExpr: ...
    @property
    def rsuffix(self) -> google.protobuf.wrappers_pb2.StringValue: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        lhs: global___SpDataframeExpr | None = ...,
        lsuffix: google.protobuf.wrappers_pb2.StringValue | None = ...,
        rhs: global___SpDataframeExpr | None = ...,
        rsuffix: google.protobuf.wrappers_pb2.StringValue | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["lhs", b"lhs", "lsuffix", b"lsuffix", "rhs", b"rhs", "rsuffix", b"rsuffix", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["lhs", b"lhs", "lsuffix", b"lsuffix", "rhs", b"rhs", "rsuffix", b"rsuffix", "src", b"src"]) -> None: ...

global___SpDataframeCrossJoin = SpDataframeCrossJoin

@typing.final
class SpDataframeCube(google.protobuf.message.Message):
    """dataframe-grouped.ir:18"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COLS_FIELD_NUMBER: builtins.int
    DF_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def cols(self) -> global___ExprArgList: ...
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        cols: global___ExprArgList | None = ...,
        df: global___SpDataframeExpr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["cols", b"cols", "df", b"df", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["cols", b"cols", "df", b"df", "src", b"src"]) -> None: ...

global___SpDataframeCube = SpDataframeCube

@typing.final
class SpDataframeDescribe(google.protobuf.message.Message):
    """dataframe.ir:195"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COLS_FIELD_NUMBER: builtins.int
    DF_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def cols(self) -> global___ExprArgList: ...
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        cols: global___ExprArgList | None = ...,
        df: global___SpDataframeExpr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["cols", b"cols", "df", b"df", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["cols", b"cols", "df", b"df", "src", b"src"]) -> None: ...

global___SpDataframeDescribe = SpDataframeDescribe

@typing.final
class SpDataframeDistinct(google.protobuf.message.Message):
    """dataframe.ir:200"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DF_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        df: global___SpDataframeExpr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["df", b"df", "src", b"src"]) -> None: ...

global___SpDataframeDistinct = SpDataframeDistinct

@typing.final
class SpDataframeDrop(google.protobuf.message.Message):
    """dataframe.ir:204"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COLS_FIELD_NUMBER: builtins.int
    DF_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def cols(self) -> global___ExprArgList: ...
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        cols: global___ExprArgList | None = ...,
        df: global___SpDataframeExpr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["cols", b"cols", "df", b"df", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["cols", b"cols", "df", b"df", "src", b"src"]) -> None: ...

global___SpDataframeDrop = SpDataframeDrop

@typing.final
class SpDataframeDropDuplicates(google.protobuf.message.Message):
    """dataframe.ir:209"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COLS_FIELD_NUMBER: builtins.int
    DF_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def cols(self) -> global___ExprArgList: ...
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        cols: global___ExprArgList | None = ...,
        df: global___SpDataframeExpr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["cols", b"cols", "df", b"df", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["cols", b"cols", "df", b"df", "src", b"src"]) -> None: ...

global___SpDataframeDropDuplicates = SpDataframeDropDuplicates

@typing.final
class SpDataframeExcept(google.protobuf.message.Message):
    """dataframe.ir:214"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DF_FIELD_NUMBER: builtins.int
    OTHER_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def other(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        df: global___SpDataframeExpr | None = ...,
        other: global___SpDataframeExpr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "other", b"other", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["df", b"df", "other", b"other", "src", b"src"]) -> None: ...

global___SpDataframeExcept = SpDataframeExcept

@typing.final
class SpDataframeExpr(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    EXTENSION_DATAFRAME_EXPR_FIELD_NUMBER: builtins.int
    SP_CREATE_DATAFRAME_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_AGG_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_ALIAS_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_ANALYTICS_COMPUTE_LAG_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_ANALYTICS_COMPUTE_LEAD_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_ANALYTICS_CUMULATIVE_AGG_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_ANALYTICS_MOVING_AGG_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_ANALYTICS_TIME_SERIES_AGG_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_COLLECT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_COUNT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_CROSS_JOIN_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_DESCRIBE_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_DISTINCT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_DROP_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_DROP_DUPLICATES_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_EXCEPT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_FILTER_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_FIRST_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_FLATTEN_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_INTERSECT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_JOIN_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_JOIN_TABLE_FUNCTION_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_LIMIT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_NA_DROP__PYTHON_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_NA_DROP__SCALA_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_NA_FILL_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_NA_REPLACE_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_NATURAL_JOIN_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_RANDOM_SPLIT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_REF_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_RENAME_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_SAMPLE_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_SELECT__COLUMNS_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_SELECT__EXPRS_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_SHOW_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_SORT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_STAT_APPROX_QUANTILE_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_STAT_CORR_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_STAT_COV_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_STAT_CROSS_TAB_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_STAT_SAMPLE_BY_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_TO_DF_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_TO_LOCAL_ITERATOR_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_TO_PANDAS_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_TO_PANDAS_BATCHES_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_UNION_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_UNION_ALL_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_UNION_ALL_BY_NAME_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_UNION_BY_NAME_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_UNPIVOT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_WITH_COLUMN_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_WITH_COLUMN_RENAMED_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_WITH_COLUMNS_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_WRITE_FIELD_NUMBER: builtins.int
    SP_FLATTEN_FIELD_NUMBER: builtins.int
    SP_GENERATOR_FIELD_NUMBER: builtins.int
    SP_RANGE_FIELD_NUMBER: builtins.int
    SP_READ_AVRO_FIELD_NUMBER: builtins.int
    SP_READ_CSV_FIELD_NUMBER: builtins.int
    SP_READ_JSON_FIELD_NUMBER: builtins.int
    SP_READ_ORC_FIELD_NUMBER: builtins.int
    SP_READ_PARQUET_FIELD_NUMBER: builtins.int
    SP_READ_TABLE_FIELD_NUMBER: builtins.int
    SP_READ_XML_FIELD_NUMBER: builtins.int
    SP_RELATIONAL_GROUPED_DATAFRAME_AGG_FIELD_NUMBER: builtins.int
    SP_RELATIONAL_GROUPED_DATAFRAME_APPLY_IN_PANDAS_FIELD_NUMBER: builtins.int
    SP_RELATIONAL_GROUPED_DATAFRAME_BUILTIN_FIELD_NUMBER: builtins.int
    SP_RELATIONAL_GROUPED_DATAFRAME_PIVOT_FIELD_NUMBER: builtins.int
    SP_SESSION_TABLE_FUNCTION_FIELD_NUMBER: builtins.int
    SP_SQL_FIELD_NUMBER: builtins.int
    SP_TABLE_FIELD_NUMBER: builtins.int
    SP_TABLE_DELETE_FIELD_NUMBER: builtins.int
    SP_TABLE_DROP_TABLE_FIELD_NUMBER: builtins.int
    SP_TABLE_MERGE_FIELD_NUMBER: builtins.int
    SP_TABLE_SAMPLE_FIELD_NUMBER: builtins.int
    SP_TABLE_UPDATE_FIELD_NUMBER: builtins.int
    SP_WRITE_PANDAS_FIELD_NUMBER: builtins.int
    TRUNCATED_DATAFRAME_EXPR_FIELD_NUMBER: builtins.int
    @property
    def extension_dataframe_expr(self) -> global___ExtensionDataframeExpr: ...
    @property
    def sp_create_dataframe(self) -> global___SpCreateDataframe: ...
    @property
    def sp_dataframe_agg(self) -> global___SpDataframeAgg: ...
    @property
    def sp_dataframe_alias(self) -> global___SpDataframeAlias: ...
    @property
    def sp_dataframe_analytics_compute_lag(self) -> global___SpDataframeAnalyticsComputeLag: ...
    @property
    def sp_dataframe_analytics_compute_lead(self) -> global___SpDataframeAnalyticsComputeLead: ...
    @property
    def sp_dataframe_analytics_cumulative_agg(self) -> global___SpDataframeAnalyticsCumulativeAgg: ...
    @property
    def sp_dataframe_analytics_moving_agg(self) -> global___SpDataframeAnalyticsMovingAgg: ...
    @property
    def sp_dataframe_analytics_time_series_agg(self) -> global___SpDataframeAnalyticsTimeSeriesAgg: ...
    @property
    def sp_dataframe_collect(self) -> global___SpDataframeCollect: ...
    @property
    def sp_dataframe_count(self) -> global___SpDataframeCount: ...
    @property
    def sp_dataframe_cross_join(self) -> global___SpDataframeCrossJoin: ...
    @property
    def sp_dataframe_describe(self) -> global___SpDataframeDescribe: ...
    @property
    def sp_dataframe_distinct(self) -> global___SpDataframeDistinct: ...
    @property
    def sp_dataframe_drop(self) -> global___SpDataframeDrop: ...
    @property
    def sp_dataframe_drop_duplicates(self) -> global___SpDataframeDropDuplicates: ...
    @property
    def sp_dataframe_except(self) -> global___SpDataframeExcept: ...
    @property
    def sp_dataframe_filter(self) -> global___SpDataframeFilter: ...
    @property
    def sp_dataframe_first(self) -> global___SpDataframeFirst: ...
    @property
    def sp_dataframe_flatten(self) -> global___SpDataframeFlatten: ...
    @property
    def sp_dataframe_intersect(self) -> global___SpDataframeIntersect: ...
    @property
    def sp_dataframe_join(self) -> global___SpDataframeJoin: ...
    @property
    def sp_dataframe_join_table_function(self) -> global___SpDataframeJoinTableFunction: ...
    @property
    def sp_dataframe_limit(self) -> global___SpDataframeLimit: ...
    @property
    def sp_dataframe_na_drop__python(self) -> global___SpDataframeNaDrop_Python: ...
    @property
    def sp_dataframe_na_drop__scala(self) -> global___SpDataframeNaDrop_Scala: ...
    @property
    def sp_dataframe_na_fill(self) -> global___SpDataframeNaFill: ...
    @property
    def sp_dataframe_na_replace(self) -> global___SpDataframeNaReplace: ...
    @property
    def sp_dataframe_natural_join(self) -> global___SpDataframeNaturalJoin: ...
    @property
    def sp_dataframe_random_split(self) -> global___SpDataframeRandomSplit: ...
    @property
    def sp_dataframe_ref(self) -> global___SpDataframeRef: ...
    @property
    def sp_dataframe_rename(self) -> global___SpDataframeRename: ...
    @property
    def sp_dataframe_sample(self) -> global___SpDataframeSample: ...
    @property
    def sp_dataframe_select__columns(self) -> global___SpDataframeSelect_Columns: ...
    @property
    def sp_dataframe_select__exprs(self) -> global___SpDataframeSelect_Exprs: ...
    @property
    def sp_dataframe_show(self) -> global___SpDataframeShow: ...
    @property
    def sp_dataframe_sort(self) -> global___SpDataframeSort: ...
    @property
    def sp_dataframe_stat_approx_quantile(self) -> global___SpDataframeStatApproxQuantile: ...
    @property
    def sp_dataframe_stat_corr(self) -> global___SpDataframeStatCorr: ...
    @property
    def sp_dataframe_stat_cov(self) -> global___SpDataframeStatCov: ...
    @property
    def sp_dataframe_stat_cross_tab(self) -> global___SpDataframeStatCrossTab: ...
    @property
    def sp_dataframe_stat_sample_by(self) -> global___SpDataframeStatSampleBy: ...
    @property
    def sp_dataframe_to_df(self) -> global___SpDataframeToDf: ...
    @property
    def sp_dataframe_to_local_iterator(self) -> global___SpDataframeToLocalIterator: ...
    @property
    def sp_dataframe_to_pandas(self) -> global___SpDataframeToPandas: ...
    @property
    def sp_dataframe_to_pandas_batches(self) -> global___SpDataframeToPandasBatches: ...
    @property
    def sp_dataframe_union(self) -> global___SpDataframeUnion: ...
    @property
    def sp_dataframe_union_all(self) -> global___SpDataframeUnionAll: ...
    @property
    def sp_dataframe_union_all_by_name(self) -> global___SpDataframeUnionAllByName: ...
    @property
    def sp_dataframe_union_by_name(self) -> global___SpDataframeUnionByName: ...
    @property
    def sp_dataframe_unpivot(self) -> global___SpDataframeUnpivot: ...
    @property
    def sp_dataframe_with_column(self) -> global___SpDataframeWithColumn: ...
    @property
    def sp_dataframe_with_column_renamed(self) -> global___SpDataframeWithColumnRenamed: ...
    @property
    def sp_dataframe_with_columns(self) -> global___SpDataframeWithColumns: ...
    @property
    def sp_dataframe_write(self) -> global___SpDataframeWrite: ...
    @property
    def sp_flatten(self) -> global___SpFlatten: ...
    @property
    def sp_generator(self) -> global___SpGenerator: ...
    @property
    def sp_range(self) -> global___SpRange: ...
    @property
    def sp_read_avro(self) -> global___SpReadAvro: ...
    @property
    def sp_read_csv(self) -> global___SpReadCsv: ...
    @property
    def sp_read_json(self) -> global___SpReadJson: ...
    @property
    def sp_read_orc(self) -> global___SpReadOrc: ...
    @property
    def sp_read_parquet(self) -> global___SpReadParquet: ...
    @property
    def sp_read_table(self) -> global___SpReadTable: ...
    @property
    def sp_read_xml(self) -> global___SpReadXml: ...
    @property
    def sp_relational_grouped_dataframe_agg(self) -> global___SpRelationalGroupedDataframeAgg: ...
    @property
    def sp_relational_grouped_dataframe_apply_in_pandas(self) -> global___SpRelationalGroupedDataframeApplyInPandas: ...
    @property
    def sp_relational_grouped_dataframe_builtin(self) -> global___SpRelationalGroupedDataframeBuiltin: ...
    @property
    def sp_relational_grouped_dataframe_pivot(self) -> global___SpRelationalGroupedDataframePivot: ...
    @property
    def sp_session_table_function(self) -> global___SpSessionTableFunction: ...
    @property
    def sp_sql(self) -> global___SpSql: ...
    @property
    def sp_table(self) -> global___SpTable: ...
    @property
    def sp_table_delete(self) -> global___SpTableDelete: ...
    @property
    def sp_table_drop_table(self) -> global___SpTableDropTable: ...
    @property
    def sp_table_merge(self) -> global___SpTableMerge: ...
    @property
    def sp_table_sample(self) -> global___SpTableSample: ...
    @property
    def sp_table_update(self) -> global___SpTableUpdate: ...
    @property
    def sp_write_pandas(self) -> global___SpWritePandas: ...
    @property
    def truncated_dataframe_expr(self) -> global___TruncatedDataframeExpr: ...
    def __init__(
        self,
        *,
        extension_dataframe_expr: global___ExtensionDataframeExpr | None = ...,
        sp_create_dataframe: global___SpCreateDataframe | None = ...,
        sp_dataframe_agg: global___SpDataframeAgg | None = ...,
        sp_dataframe_alias: global___SpDataframeAlias | None = ...,
        sp_dataframe_analytics_compute_lag: global___SpDataframeAnalyticsComputeLag | None = ...,
        sp_dataframe_analytics_compute_lead: global___SpDataframeAnalyticsComputeLead | None = ...,
        sp_dataframe_analytics_cumulative_agg: global___SpDataframeAnalyticsCumulativeAgg | None = ...,
        sp_dataframe_analytics_moving_agg: global___SpDataframeAnalyticsMovingAgg | None = ...,
        sp_dataframe_analytics_time_series_agg: global___SpDataframeAnalyticsTimeSeriesAgg | None = ...,
        sp_dataframe_collect: global___SpDataframeCollect | None = ...,
        sp_dataframe_count: global___SpDataframeCount | None = ...,
        sp_dataframe_cross_join: global___SpDataframeCrossJoin | None = ...,
        sp_dataframe_describe: global___SpDataframeDescribe | None = ...,
        sp_dataframe_distinct: global___SpDataframeDistinct | None = ...,
        sp_dataframe_drop: global___SpDataframeDrop | None = ...,
        sp_dataframe_drop_duplicates: global___SpDataframeDropDuplicates | None = ...,
        sp_dataframe_except: global___SpDataframeExcept | None = ...,
        sp_dataframe_filter: global___SpDataframeFilter | None = ...,
        sp_dataframe_first: global___SpDataframeFirst | None = ...,
        sp_dataframe_flatten: global___SpDataframeFlatten | None = ...,
        sp_dataframe_intersect: global___SpDataframeIntersect | None = ...,
        sp_dataframe_join: global___SpDataframeJoin | None = ...,
        sp_dataframe_join_table_function: global___SpDataframeJoinTableFunction | None = ...,
        sp_dataframe_limit: global___SpDataframeLimit | None = ...,
        sp_dataframe_na_drop__python: global___SpDataframeNaDrop_Python | None = ...,
        sp_dataframe_na_drop__scala: global___SpDataframeNaDrop_Scala | None = ...,
        sp_dataframe_na_fill: global___SpDataframeNaFill | None = ...,
        sp_dataframe_na_replace: global___SpDataframeNaReplace | None = ...,
        sp_dataframe_natural_join: global___SpDataframeNaturalJoin | None = ...,
        sp_dataframe_random_split: global___SpDataframeRandomSplit | None = ...,
        sp_dataframe_ref: global___SpDataframeRef | None = ...,
        sp_dataframe_rename: global___SpDataframeRename | None = ...,
        sp_dataframe_sample: global___SpDataframeSample | None = ...,
        sp_dataframe_select__columns: global___SpDataframeSelect_Columns | None = ...,
        sp_dataframe_select__exprs: global___SpDataframeSelect_Exprs | None = ...,
        sp_dataframe_show: global___SpDataframeShow | None = ...,
        sp_dataframe_sort: global___SpDataframeSort | None = ...,
        sp_dataframe_stat_approx_quantile: global___SpDataframeStatApproxQuantile | None = ...,
        sp_dataframe_stat_corr: global___SpDataframeStatCorr | None = ...,
        sp_dataframe_stat_cov: global___SpDataframeStatCov | None = ...,
        sp_dataframe_stat_cross_tab: global___SpDataframeStatCrossTab | None = ...,
        sp_dataframe_stat_sample_by: global___SpDataframeStatSampleBy | None = ...,
        sp_dataframe_to_df: global___SpDataframeToDf | None = ...,
        sp_dataframe_to_local_iterator: global___SpDataframeToLocalIterator | None = ...,
        sp_dataframe_to_pandas: global___SpDataframeToPandas | None = ...,
        sp_dataframe_to_pandas_batches: global___SpDataframeToPandasBatches | None = ...,
        sp_dataframe_union: global___SpDataframeUnion | None = ...,
        sp_dataframe_union_all: global___SpDataframeUnionAll | None = ...,
        sp_dataframe_union_all_by_name: global___SpDataframeUnionAllByName | None = ...,
        sp_dataframe_union_by_name: global___SpDataframeUnionByName | None = ...,
        sp_dataframe_unpivot: global___SpDataframeUnpivot | None = ...,
        sp_dataframe_with_column: global___SpDataframeWithColumn | None = ...,
        sp_dataframe_with_column_renamed: global___SpDataframeWithColumnRenamed | None = ...,
        sp_dataframe_with_columns: global___SpDataframeWithColumns | None = ...,
        sp_dataframe_write: global___SpDataframeWrite | None = ...,
        sp_flatten: global___SpFlatten | None = ...,
        sp_generator: global___SpGenerator | None = ...,
        sp_range: global___SpRange | None = ...,
        sp_read_avro: global___SpReadAvro | None = ...,
        sp_read_csv: global___SpReadCsv | None = ...,
        sp_read_json: global___SpReadJson | None = ...,
        sp_read_orc: global___SpReadOrc | None = ...,
        sp_read_parquet: global___SpReadParquet | None = ...,
        sp_read_table: global___SpReadTable | None = ...,
        sp_read_xml: global___SpReadXml | None = ...,
        sp_relational_grouped_dataframe_agg: global___SpRelationalGroupedDataframeAgg | None = ...,
        sp_relational_grouped_dataframe_apply_in_pandas: global___SpRelationalGroupedDataframeApplyInPandas | None = ...,
        sp_relational_grouped_dataframe_builtin: global___SpRelationalGroupedDataframeBuiltin | None = ...,
        sp_relational_grouped_dataframe_pivot: global___SpRelationalGroupedDataframePivot | None = ...,
        sp_session_table_function: global___SpSessionTableFunction | None = ...,
        sp_sql: global___SpSql | None = ...,
        sp_table: global___SpTable | None = ...,
        sp_table_delete: global___SpTableDelete | None = ...,
        sp_table_drop_table: global___SpTableDropTable | None = ...,
        sp_table_merge: global___SpTableMerge | None = ...,
        sp_table_sample: global___SpTableSample | None = ...,
        sp_table_update: global___SpTableUpdate | None = ...,
        sp_write_pandas: global___SpWritePandas | None = ...,
        truncated_dataframe_expr: global___TruncatedDataframeExpr | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["extension_dataframe_expr", b"extension_dataframe_expr", "sp_create_dataframe", b"sp_create_dataframe", "sp_dataframe_agg", b"sp_dataframe_agg", "sp_dataframe_alias", b"sp_dataframe_alias", "sp_dataframe_analytics_compute_lag", b"sp_dataframe_analytics_compute_lag", "sp_dataframe_analytics_compute_lead", b"sp_dataframe_analytics_compute_lead", "sp_dataframe_analytics_cumulative_agg", b"sp_dataframe_analytics_cumulative_agg", "sp_dataframe_analytics_moving_agg", b"sp_dataframe_analytics_moving_agg", "sp_dataframe_analytics_time_series_agg", b"sp_dataframe_analytics_time_series_agg", "sp_dataframe_collect", b"sp_dataframe_collect", "sp_dataframe_count", b"sp_dataframe_count", "sp_dataframe_cross_join", b"sp_dataframe_cross_join", "sp_dataframe_describe", b"sp_dataframe_describe", "sp_dataframe_distinct", b"sp_dataframe_distinct", "sp_dataframe_drop", b"sp_dataframe_drop", "sp_dataframe_drop_duplicates", b"sp_dataframe_drop_duplicates", "sp_dataframe_except", b"sp_dataframe_except", "sp_dataframe_filter", b"sp_dataframe_filter", "sp_dataframe_first", b"sp_dataframe_first", "sp_dataframe_flatten", b"sp_dataframe_flatten", "sp_dataframe_intersect", b"sp_dataframe_intersect", "sp_dataframe_join", b"sp_dataframe_join", "sp_dataframe_join_table_function", b"sp_dataframe_join_table_function", "sp_dataframe_limit", b"sp_dataframe_limit", "sp_dataframe_na_drop__python", b"sp_dataframe_na_drop__python", "sp_dataframe_na_drop__scala", b"sp_dataframe_na_drop__scala", "sp_dataframe_na_fill", b"sp_dataframe_na_fill", "sp_dataframe_na_replace", b"sp_dataframe_na_replace", "sp_dataframe_natural_join", b"sp_dataframe_natural_join", "sp_dataframe_random_split", b"sp_dataframe_random_split", "sp_dataframe_ref", b"sp_dataframe_ref", "sp_dataframe_rename", b"sp_dataframe_rename", "sp_dataframe_sample", b"sp_dataframe_sample", "sp_dataframe_select__columns", b"sp_dataframe_select__columns", "sp_dataframe_select__exprs", b"sp_dataframe_select__exprs", "sp_dataframe_show", b"sp_dataframe_show", "sp_dataframe_sort", b"sp_dataframe_sort", "sp_dataframe_stat_approx_quantile", b"sp_dataframe_stat_approx_quantile", "sp_dataframe_stat_corr", b"sp_dataframe_stat_corr", "sp_dataframe_stat_cov", b"sp_dataframe_stat_cov", "sp_dataframe_stat_cross_tab", b"sp_dataframe_stat_cross_tab", "sp_dataframe_stat_sample_by", b"sp_dataframe_stat_sample_by", "sp_dataframe_to_df", b"sp_dataframe_to_df", "sp_dataframe_to_local_iterator", b"sp_dataframe_to_local_iterator", "sp_dataframe_to_pandas", b"sp_dataframe_to_pandas", "sp_dataframe_to_pandas_batches", b"sp_dataframe_to_pandas_batches", "sp_dataframe_union", b"sp_dataframe_union", "sp_dataframe_union_all", b"sp_dataframe_union_all", "sp_dataframe_union_all_by_name", b"sp_dataframe_union_all_by_name", "sp_dataframe_union_by_name", b"sp_dataframe_union_by_name", "sp_dataframe_unpivot", b"sp_dataframe_unpivot", "sp_dataframe_with_column", b"sp_dataframe_with_column", "sp_dataframe_with_column_renamed", b"sp_dataframe_with_column_renamed", "sp_dataframe_with_columns", b"sp_dataframe_with_columns", "sp_dataframe_write", b"sp_dataframe_write", "sp_flatten", b"sp_flatten", "sp_generator", b"sp_generator", "sp_range", b"sp_range", "sp_read_avro", b"sp_read_avro", "sp_read_csv", b"sp_read_csv", "sp_read_json", b"sp_read_json", "sp_read_orc", b"sp_read_orc", "sp_read_parquet", b"sp_read_parquet", "sp_read_table", b"sp_read_table", "sp_read_xml", b"sp_read_xml", "sp_relational_grouped_dataframe_agg", b"sp_relational_grouped_dataframe_agg", "sp_relational_grouped_dataframe_apply_in_pandas", b"sp_relational_grouped_dataframe_apply_in_pandas", "sp_relational_grouped_dataframe_builtin", b"sp_relational_grouped_dataframe_builtin", "sp_relational_grouped_dataframe_pivot", b"sp_relational_grouped_dataframe_pivot", "sp_session_table_function", b"sp_session_table_function", "sp_sql", b"sp_sql", "sp_table", b"sp_table", "sp_table_delete", b"sp_table_delete", "sp_table_drop_table", b"sp_table_drop_table", "sp_table_merge", b"sp_table_merge", "sp_table_sample", b"sp_table_sample", "sp_table_update", b"sp_table_update", "sp_write_pandas", b"sp_write_pandas", "truncated_dataframe_expr", b"truncated_dataframe_expr", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["extension_dataframe_expr", b"extension_dataframe_expr", "sp_create_dataframe", b"sp_create_dataframe", "sp_dataframe_agg", b"sp_dataframe_agg", "sp_dataframe_alias", b"sp_dataframe_alias", "sp_dataframe_analytics_compute_lag", b"sp_dataframe_analytics_compute_lag", "sp_dataframe_analytics_compute_lead", b"sp_dataframe_analytics_compute_lead", "sp_dataframe_analytics_cumulative_agg", b"sp_dataframe_analytics_cumulative_agg", "sp_dataframe_analytics_moving_agg", b"sp_dataframe_analytics_moving_agg", "sp_dataframe_analytics_time_series_agg", b"sp_dataframe_analytics_time_series_agg", "sp_dataframe_collect", b"sp_dataframe_collect", "sp_dataframe_count", b"sp_dataframe_count", "sp_dataframe_cross_join", b"sp_dataframe_cross_join", "sp_dataframe_describe", b"sp_dataframe_describe", "sp_dataframe_distinct", b"sp_dataframe_distinct", "sp_dataframe_drop", b"sp_dataframe_drop", "sp_dataframe_drop_duplicates", b"sp_dataframe_drop_duplicates", "sp_dataframe_except", b"sp_dataframe_except", "sp_dataframe_filter", b"sp_dataframe_filter", "sp_dataframe_first", b"sp_dataframe_first", "sp_dataframe_flatten", b"sp_dataframe_flatten", "sp_dataframe_intersect", b"sp_dataframe_intersect", "sp_dataframe_join", b"sp_dataframe_join", "sp_dataframe_join_table_function", b"sp_dataframe_join_table_function", "sp_dataframe_limit", b"sp_dataframe_limit", "sp_dataframe_na_drop__python", b"sp_dataframe_na_drop__python", "sp_dataframe_na_drop__scala", b"sp_dataframe_na_drop__scala", "sp_dataframe_na_fill", b"sp_dataframe_na_fill", "sp_dataframe_na_replace", b"sp_dataframe_na_replace", "sp_dataframe_natural_join", b"sp_dataframe_natural_join", "sp_dataframe_random_split", b"sp_dataframe_random_split", "sp_dataframe_ref", b"sp_dataframe_ref", "sp_dataframe_rename", b"sp_dataframe_rename", "sp_dataframe_sample", b"sp_dataframe_sample", "sp_dataframe_select__columns", b"sp_dataframe_select__columns", "sp_dataframe_select__exprs", b"sp_dataframe_select__exprs", "sp_dataframe_show", b"sp_dataframe_show", "sp_dataframe_sort", b"sp_dataframe_sort", "sp_dataframe_stat_approx_quantile", b"sp_dataframe_stat_approx_quantile", "sp_dataframe_stat_corr", b"sp_dataframe_stat_corr", "sp_dataframe_stat_cov", b"sp_dataframe_stat_cov", "sp_dataframe_stat_cross_tab", b"sp_dataframe_stat_cross_tab", "sp_dataframe_stat_sample_by", b"sp_dataframe_stat_sample_by", "sp_dataframe_to_df", b"sp_dataframe_to_df", "sp_dataframe_to_local_iterator", b"sp_dataframe_to_local_iterator", "sp_dataframe_to_pandas", b"sp_dataframe_to_pandas", "sp_dataframe_to_pandas_batches", b"sp_dataframe_to_pandas_batches", "sp_dataframe_union", b"sp_dataframe_union", "sp_dataframe_union_all", b"sp_dataframe_union_all", "sp_dataframe_union_all_by_name", b"sp_dataframe_union_all_by_name", "sp_dataframe_union_by_name", b"sp_dataframe_union_by_name", "sp_dataframe_unpivot", b"sp_dataframe_unpivot", "sp_dataframe_with_column", b"sp_dataframe_with_column", "sp_dataframe_with_column_renamed", b"sp_dataframe_with_column_renamed", "sp_dataframe_with_columns", b"sp_dataframe_with_columns", "sp_dataframe_write", b"sp_dataframe_write", "sp_flatten", b"sp_flatten", "sp_generator", b"sp_generator", "sp_range", b"sp_range", "sp_read_avro", b"sp_read_avro", "sp_read_csv", b"sp_read_csv", "sp_read_json", b"sp_read_json", "sp_read_orc", b"sp_read_orc", "sp_read_parquet", b"sp_read_parquet", "sp_read_table", b"sp_read_table", "sp_read_xml", b"sp_read_xml", "sp_relational_grouped_dataframe_agg", b"sp_relational_grouped_dataframe_agg", "sp_relational_grouped_dataframe_apply_in_pandas", b"sp_relational_grouped_dataframe_apply_in_pandas", "sp_relational_grouped_dataframe_builtin", b"sp_relational_grouped_dataframe_builtin", "sp_relational_grouped_dataframe_pivot", b"sp_relational_grouped_dataframe_pivot", "sp_session_table_function", b"sp_session_table_function", "sp_sql", b"sp_sql", "sp_table", b"sp_table", "sp_table_delete", b"sp_table_delete", "sp_table_drop_table", b"sp_table_drop_table", "sp_table_merge", b"sp_table_merge", "sp_table_sample", b"sp_table_sample", "sp_table_update", b"sp_table_update", "sp_write_pandas", b"sp_write_pandas", "truncated_dataframe_expr", b"truncated_dataframe_expr", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["extension_dataframe_expr", "sp_create_dataframe", "sp_dataframe_agg", "sp_dataframe_alias", "sp_dataframe_analytics_compute_lag", "sp_dataframe_analytics_compute_lead", "sp_dataframe_analytics_cumulative_agg", "sp_dataframe_analytics_moving_agg", "sp_dataframe_analytics_time_series_agg", "sp_dataframe_collect", "sp_dataframe_count", "sp_dataframe_cross_join", "sp_dataframe_describe", "sp_dataframe_distinct", "sp_dataframe_drop", "sp_dataframe_drop_duplicates", "sp_dataframe_except", "sp_dataframe_filter", "sp_dataframe_first", "sp_dataframe_flatten", "sp_dataframe_intersect", "sp_dataframe_join", "sp_dataframe_join_table_function", "sp_dataframe_limit", "sp_dataframe_na_drop__python", "sp_dataframe_na_drop__scala", "sp_dataframe_na_fill", "sp_dataframe_na_replace", "sp_dataframe_natural_join", "sp_dataframe_random_split", "sp_dataframe_ref", "sp_dataframe_rename", "sp_dataframe_sample", "sp_dataframe_select__columns", "sp_dataframe_select__exprs", "sp_dataframe_show", "sp_dataframe_sort", "sp_dataframe_stat_approx_quantile", "sp_dataframe_stat_corr", "sp_dataframe_stat_cov", "sp_dataframe_stat_cross_tab", "sp_dataframe_stat_sample_by", "sp_dataframe_to_df", "sp_dataframe_to_local_iterator", "sp_dataframe_to_pandas", "sp_dataframe_to_pandas_batches", "sp_dataframe_union", "sp_dataframe_union_all", "sp_dataframe_union_all_by_name", "sp_dataframe_union_by_name", "sp_dataframe_unpivot", "sp_dataframe_with_column", "sp_dataframe_with_column_renamed", "sp_dataframe_with_columns", "sp_dataframe_write", "sp_flatten", "sp_generator", "sp_range", "sp_read_avro", "sp_read_csv", "sp_read_json", "sp_read_orc", "sp_read_parquet", "sp_read_table", "sp_read_xml", "sp_relational_grouped_dataframe_agg", "sp_relational_grouped_dataframe_apply_in_pandas", "sp_relational_grouped_dataframe_builtin", "sp_relational_grouped_dataframe_pivot", "sp_session_table_function", "sp_sql", "sp_table", "sp_table_delete", "sp_table_drop_table", "sp_table_merge", "sp_table_sample", "sp_table_update", "sp_write_pandas", "truncated_dataframe_expr"] | None: ...

global___SpDataframeExpr = SpDataframeExpr

@typing.final
class SpDataframeFilter(google.protobuf.message.Message):
    """dataframe.ir:219"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONDITION_FIELD_NUMBER: builtins.int
    DF_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def condition(self) -> global___Expr: ...
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        condition: global___Expr | None = ...,
        df: global___SpDataframeExpr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["condition", b"condition", "df", b"df", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["condition", b"condition", "df", b"df", "src", b"src"]) -> None: ...

global___SpDataframeFilter = SpDataframeFilter

@typing.final
class SpDataframeFirst(google.protobuf.message.Message):
    """dataframe.ir:233"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BLOCK_FIELD_NUMBER: builtins.int
    DF_FIELD_NUMBER: builtins.int
    NUM_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    STATEMENT_PARAMS_FIELD_NUMBER: builtins.int
    block: builtins.bool
    num: builtins.int
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def statement_params(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    def __init__(
        self,
        *,
        block: builtins.bool = ...,
        df: global___SpDataframeExpr | None = ...,
        num: builtins.int = ...,
        src: global___SrcPosition | None = ...,
        statement_params: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["block", b"block", "df", b"df", "num", b"num", "src", b"src", "statement_params", b"statement_params"]) -> None: ...

global___SpDataframeFirst = SpDataframeFirst

@typing.final
class SpDataframeFlatten(google.protobuf.message.Message):
    """dataframe.ir:224"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DF_FIELD_NUMBER: builtins.int
    INPUT_FIELD_NUMBER: builtins.int
    MODE_FIELD_NUMBER: builtins.int
    OUTER_FIELD_NUMBER: builtins.int
    PATH_FIELD_NUMBER: builtins.int
    RECURSIVE_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    outer: builtins.bool
    recursive: builtins.bool
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def input(self) -> global___Expr: ...
    @property
    def mode(self) -> global___SpFlattenMode: ...
    @property
    def path(self) -> google.protobuf.wrappers_pb2.StringValue: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        df: global___SpDataframeExpr | None = ...,
        input: global___Expr | None = ...,
        mode: global___SpFlattenMode | None = ...,
        outer: builtins.bool = ...,
        path: google.protobuf.wrappers_pb2.StringValue | None = ...,
        recursive: builtins.bool = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "input", b"input", "mode", b"mode", "path", b"path", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["df", b"df", "input", b"input", "mode", b"mode", "outer", b"outer", "path", b"path", "recursive", b"recursive", "src", b"src"]) -> None: ...

global___SpDataframeFlatten = SpDataframeFlatten

@typing.final
class SpDataframeGroupBy(google.protobuf.message.Message):
    """dataframe-grouped.ir:23"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COLS_FIELD_NUMBER: builtins.int
    DF_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def cols(self) -> global___ExprArgList: ...
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        cols: global___ExprArgList | None = ...,
        df: global___SpDataframeExpr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["cols", b"cols", "df", b"df", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["cols", b"cols", "df", b"df", "src", b"src"]) -> None: ...

global___SpDataframeGroupBy = SpDataframeGroupBy

@typing.final
class SpDataframeGroupByGroupingSets(google.protobuf.message.Message):
    """dataframe-grouped.ir:40"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DF_FIELD_NUMBER: builtins.int
    GROUPING_SETS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def grouping_sets(self) -> global___ExprArgList: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        df: global___SpDataframeExpr | None = ...,
        grouping_sets: global___ExprArgList | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "grouping_sets", b"grouping_sets", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["df", b"df", "grouping_sets", b"grouping_sets", "src", b"src"]) -> None: ...

global___SpDataframeGroupByGroupingSets = SpDataframeGroupByGroupingSets

@typing.final
class SpDataframeIntersect(google.protobuf.message.Message):
    """dataframe.ir:240"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DF_FIELD_NUMBER: builtins.int
    OTHER_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def other(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        df: global___SpDataframeExpr | None = ...,
        other: global___SpDataframeExpr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "other", b"other", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["df", b"df", "other", b"other", "src", b"src"]) -> None: ...

global___SpDataframeIntersect = SpDataframeIntersect

@typing.final
class SpDataframeJoin(google.protobuf.message.Message):
    """dataframe.ir:256"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    JOIN_EXPR_FIELD_NUMBER: builtins.int
    JOIN_TYPE_FIELD_NUMBER: builtins.int
    LHS_FIELD_NUMBER: builtins.int
    LSUFFIX_FIELD_NUMBER: builtins.int
    MATCH_CONDITION_FIELD_NUMBER: builtins.int
    RHS_FIELD_NUMBER: builtins.int
    RSUFFIX_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def join_expr(self) -> global___Expr: ...
    @property
    def join_type(self) -> global___SpJoinType: ...
    @property
    def lhs(self) -> global___SpDataframeExpr: ...
    @property
    def lsuffix(self) -> google.protobuf.wrappers_pb2.StringValue: ...
    @property
    def match_condition(self) -> global___Expr: ...
    @property
    def rhs(self) -> global___SpDataframeExpr: ...
    @property
    def rsuffix(self) -> google.protobuf.wrappers_pb2.StringValue: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        join_expr: global___Expr | None = ...,
        join_type: global___SpJoinType | None = ...,
        lhs: global___SpDataframeExpr | None = ...,
        lsuffix: google.protobuf.wrappers_pb2.StringValue | None = ...,
        match_condition: global___Expr | None = ...,
        rhs: global___SpDataframeExpr | None = ...,
        rsuffix: google.protobuf.wrappers_pb2.StringValue | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["join_expr", b"join_expr", "join_type", b"join_type", "lhs", b"lhs", "lsuffix", b"lsuffix", "match_condition", b"match_condition", "rhs", b"rhs", "rsuffix", b"rsuffix", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["join_expr", b"join_expr", "join_type", b"join_type", "lhs", b"lhs", "lsuffix", b"lsuffix", "match_condition", b"match_condition", "rhs", b"rhs", "rsuffix", b"rsuffix", "src", b"src"]) -> None: ...

global___SpDataframeJoin = SpDataframeJoin

@typing.final
class SpDataframeJoinTableFunction(google.protobuf.message.Message):
    """dataframe.ir:266"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FN_FIELD_NUMBER: builtins.int
    LHS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def fn(self) -> global___Expr: ...
    @property
    def lhs(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        fn: global___Expr | None = ...,
        lhs: global___SpDataframeExpr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["fn", b"fn", "lhs", b"lhs", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["fn", b"fn", "lhs", b"lhs", "src", b"src"]) -> None: ...

global___SpDataframeJoinTableFunction = SpDataframeJoinTableFunction

@typing.final
class SpDataframeLimit(google.protobuf.message.Message):
    """dataframe.ir:271"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DF_FIELD_NUMBER: builtins.int
    N_FIELD_NUMBER: builtins.int
    OFFSET_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    n: builtins.int
    offset: builtins.int
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        df: global___SpDataframeExpr | None = ...,
        n: builtins.int = ...,
        offset: builtins.int = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["df", b"df", "n", b"n", "offset", b"offset", "src", b"src"]) -> None: ...

global___SpDataframeLimit = SpDataframeLimit

@typing.final
class SpDataframeNaDrop_Python(google.protobuf.message.Message):
    """dataframe.ir:150"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DF_FIELD_NUMBER: builtins.int
    HOW_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    SUBSET_FIELD_NUMBER: builtins.int
    THRESH_FIELD_NUMBER: builtins.int
    how: builtins.str
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def subset(self) -> global___List_String: ...
    @property
    def thresh(self) -> google.protobuf.wrappers_pb2.Int64Value: ...
    def __init__(
        self,
        *,
        df: global___SpDataframeExpr | None = ...,
        how: builtins.str = ...,
        src: global___SrcPosition | None = ...,
        subset: global___List_String | None = ...,
        thresh: google.protobuf.wrappers_pb2.Int64Value | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "src", b"src", "subset", b"subset", "thresh", b"thresh"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["df", b"df", "how", b"how", "src", b"src", "subset", b"subset", "thresh", b"thresh"]) -> None: ...

global___SpDataframeNaDrop_Python = SpDataframeNaDrop_Python

@typing.final
class SpDataframeNaDrop_Scala(google.protobuf.message.Message):
    """dataframe.ir:144"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COLS_FIELD_NUMBER: builtins.int
    DF_FIELD_NUMBER: builtins.int
    MIN_NON_NULLS_PER_ROW_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    min_non_nulls_per_row: builtins.int
    @property
    def cols(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        cols: collections.abc.Iterable[builtins.str] | None = ...,
        df: global___SpDataframeExpr | None = ...,
        min_non_nulls_per_row: builtins.int = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["cols", b"cols", "df", b"df", "min_non_nulls_per_row", b"min_non_nulls_per_row", "src", b"src"]) -> None: ...

global___SpDataframeNaDrop_Scala = SpDataframeNaDrop_Scala

@typing.final
class SpDataframeNaFill(google.protobuf.message.Message):
    """dataframe.ir:157"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DF_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    SUBSET_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    VALUE_MAP_FIELD_NUMBER: builtins.int
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def subset(self) -> global___List_String: ...
    @property
    def value(self) -> global___Expr: ...
    @property
    def value_map(self) -> global___Map_String_Expr: ...
    def __init__(
        self,
        *,
        df: global___SpDataframeExpr | None = ...,
        src: global___SrcPosition | None = ...,
        subset: global___List_String | None = ...,
        value: global___Expr | None = ...,
        value_map: global___Map_String_Expr | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "src", b"src", "subset", b"subset", "value", b"value", "value_map", b"value_map"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["df", b"df", "src", b"src", "subset", b"subset", "value", b"value", "value_map", b"value_map"]) -> None: ...

global___SpDataframeNaFill = SpDataframeNaFill

@typing.final
class SpDataframeNaReplace(google.protobuf.message.Message):
    """dataframe.ir:164"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DF_FIELD_NUMBER: builtins.int
    REPLACEMENT_MAP_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    SUBSET_FIELD_NUMBER: builtins.int
    TO_REPLACE_LIST_FIELD_NUMBER: builtins.int
    TO_REPLACE_VALUE_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    VALUES_FIELD_NUMBER: builtins.int
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def replacement_map(self) -> global___Map_Expr_Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def subset(self) -> global___List_String: ...
    @property
    def to_replace_list(self) -> global___List_Expr: ...
    @property
    def to_replace_value(self) -> global___Expr: ...
    @property
    def value(self) -> global___Expr: ...
    @property
    def values(self) -> global___List_Expr: ...
    def __init__(
        self,
        *,
        df: global___SpDataframeExpr | None = ...,
        replacement_map: global___Map_Expr_Expr | None = ...,
        src: global___SrcPosition | None = ...,
        subset: global___List_String | None = ...,
        to_replace_list: global___List_Expr | None = ...,
        to_replace_value: global___Expr | None = ...,
        value: global___Expr | None = ...,
        values: global___List_Expr | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "replacement_map", b"replacement_map", "src", b"src", "subset", b"subset", "to_replace_list", b"to_replace_list", "to_replace_value", b"to_replace_value", "value", b"value", "values", b"values"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["df", b"df", "replacement_map", b"replacement_map", "src", b"src", "subset", b"subset", "to_replace_list", b"to_replace_list", "to_replace_value", b"to_replace_value", "value", b"value", "values", b"values"]) -> None: ...

global___SpDataframeNaReplace = SpDataframeNaReplace

@typing.final
class SpDataframeNaturalJoin(google.protobuf.message.Message):
    """dataframe.ir:277"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    JOIN_TYPE_FIELD_NUMBER: builtins.int
    LHS_FIELD_NUMBER: builtins.int
    RHS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def join_type(self) -> global___SpJoinType: ...
    @property
    def lhs(self) -> global___SpDataframeExpr: ...
    @property
    def rhs(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        join_type: global___SpJoinType | None = ...,
        lhs: global___SpDataframeExpr | None = ...,
        rhs: global___SpDataframeExpr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["join_type", b"join_type", "lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["join_type", b"join_type", "lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> None: ...

global___SpDataframeNaturalJoin = SpDataframeNaturalJoin

@typing.final
class SpDataframePivot(google.protobuf.message.Message):
    """dataframe-grouped.ir:28"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DEFAULT_ON_NULL_FIELD_NUMBER: builtins.int
    DF_FIELD_NUMBER: builtins.int
    PIVOT_COL_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    VALUES_FIELD_NUMBER: builtins.int
    @property
    def default_on_null(self) -> global___Expr: ...
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def pivot_col(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def values(self) -> global___SpPivotValue: ...
    def __init__(
        self,
        *,
        default_on_null: global___Expr | None = ...,
        df: global___SpDataframeExpr | None = ...,
        pivot_col: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
        values: global___SpPivotValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["default_on_null", b"default_on_null", "df", b"df", "pivot_col", b"pivot_col", "src", b"src", "values", b"values"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["default_on_null", b"default_on_null", "df", b"df", "pivot_col", b"pivot_col", "src", b"src", "values", b"values"]) -> None: ...

global___SpDataframePivot = SpDataframePivot

@typing.final
class SpDataframeRandomSplit(google.protobuf.message.Message):
    """dataframe.ir:291"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DF_FIELD_NUMBER: builtins.int
    SEED_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    STATEMENT_PARAMS_FIELD_NUMBER: builtins.int
    WEIGHTS_FIELD_NUMBER: builtins.int
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def seed(self) -> google.protobuf.wrappers_pb2.Int64Value: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def statement_params(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    @property
    def weights(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
    def __init__(
        self,
        *,
        df: global___SpDataframeExpr | None = ...,
        seed: google.protobuf.wrappers_pb2.Int64Value | None = ...,
        src: global___SrcPosition | None = ...,
        statement_params: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
        weights: collections.abc.Iterable[builtins.float] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "seed", b"seed", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["df", b"df", "seed", b"seed", "src", b"src", "statement_params", b"statement_params", "weights", b"weights"]) -> None: ...

global___SpDataframeRandomSplit = SpDataframeRandomSplit

@typing.final
class SpDataframeReader(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SP_DATAFRAME_READER_INIT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_READER_OPTION_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_READER_OPTIONS_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_READER_SCHEMA_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_READER_WITH_METADATA_FIELD_NUMBER: builtins.int
    @property
    def sp_dataframe_reader_init(self) -> global___SpDataframeReaderInit: ...
    @property
    def sp_dataframe_reader_option(self) -> global___SpDataframeReaderOption: ...
    @property
    def sp_dataframe_reader_options(self) -> global___SpDataframeReaderOptions: ...
    @property
    def sp_dataframe_reader_schema(self) -> global___SpDataframeReaderSchema: ...
    @property
    def sp_dataframe_reader_with_metadata(self) -> global___SpDataframeReaderWithMetadata: ...
    def __init__(
        self,
        *,
        sp_dataframe_reader_init: global___SpDataframeReaderInit | None = ...,
        sp_dataframe_reader_option: global___SpDataframeReaderOption | None = ...,
        sp_dataframe_reader_options: global___SpDataframeReaderOptions | None = ...,
        sp_dataframe_reader_schema: global___SpDataframeReaderSchema | None = ...,
        sp_dataframe_reader_with_metadata: global___SpDataframeReaderWithMetadata | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["sp_dataframe_reader_init", b"sp_dataframe_reader_init", "sp_dataframe_reader_option", b"sp_dataframe_reader_option", "sp_dataframe_reader_options", b"sp_dataframe_reader_options", "sp_dataframe_reader_schema", b"sp_dataframe_reader_schema", "sp_dataframe_reader_with_metadata", b"sp_dataframe_reader_with_metadata", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["sp_dataframe_reader_init", b"sp_dataframe_reader_init", "sp_dataframe_reader_option", b"sp_dataframe_reader_option", "sp_dataframe_reader_options", b"sp_dataframe_reader_options", "sp_dataframe_reader_schema", b"sp_dataframe_reader_schema", "sp_dataframe_reader_with_metadata", b"sp_dataframe_reader_with_metadata", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["sp_dataframe_reader_init", "sp_dataframe_reader_option", "sp_dataframe_reader_options", "sp_dataframe_reader_schema", "sp_dataframe_reader_with_metadata"] | None: ...

global___SpDataframeReader = SpDataframeReader

@typing.final
class SpDataframeReaderInit(google.protobuf.message.Message):
    """dataframe-io.ir:10"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SRC_FIELD_NUMBER: builtins.int
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["src", b"src"]) -> None: ...

global___SpDataframeReaderInit = SpDataframeReaderInit

@typing.final
class SpDataframeReaderOption(google.protobuf.message.Message):
    """dataframe-io.ir:12"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    READER_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    key: builtins.str
    @property
    def reader(self) -> global___SpDataframeReader: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def value(self) -> global___Expr: ...
    def __init__(
        self,
        *,
        key: builtins.str = ...,
        reader: global___SpDataframeReader | None = ...,
        src: global___SrcPosition | None = ...,
        value: global___Expr | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["reader", b"reader", "src", b"src", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["key", b"key", "reader", b"reader", "src", b"src", "value", b"value"]) -> None: ...

global___SpDataframeReaderOption = SpDataframeReaderOption

@typing.final
class SpDataframeReaderOptions(google.protobuf.message.Message):
    """dataframe-io.ir:18"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONFIGS_FIELD_NUMBER: builtins.int
    READER_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def configs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_Expr]: ...
    @property
    def reader(self) -> global___SpDataframeReader: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        configs: collections.abc.Iterable[global___Tuple_String_Expr] | None = ...,
        reader: global___SpDataframeReader | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["reader", b"reader", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["configs", b"configs", "reader", b"reader", "src", b"src"]) -> None: ...

global___SpDataframeReaderOptions = SpDataframeReaderOptions

@typing.final
class SpDataframeReaderSchema(google.protobuf.message.Message):
    """dataframe-io.ir:23"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    READER_FIELD_NUMBER: builtins.int
    SCHEMA_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def reader(self) -> global___SpDataframeReader: ...
    @property
    def schema(self) -> global___SpStructType: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        reader: global___SpDataframeReader | None = ...,
        schema: global___SpStructType | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["reader", b"reader", "schema", b"schema", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["reader", b"reader", "schema", b"schema", "src", b"src"]) -> None: ...

global___SpDataframeReaderSchema = SpDataframeReaderSchema

@typing.final
class SpDataframeReaderWithMetadata(google.protobuf.message.Message):
    """dataframe-io.ir:28"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    METADATA_COLUMNS_FIELD_NUMBER: builtins.int
    READER_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def metadata_columns(self) -> global___ExprArgList: ...
    @property
    def reader(self) -> global___SpDataframeReader: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        metadata_columns: global___ExprArgList | None = ...,
        reader: global___SpDataframeReader | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["metadata_columns", b"metadata_columns", "reader", b"reader", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["metadata_columns", b"metadata_columns", "reader", b"reader", "src", b"src"]) -> None: ...

global___SpDataframeReaderWithMetadata = SpDataframeReaderWithMetadata

@typing.final
class SpDataframeRef(google.protobuf.message.Message):
    """dataframe.ir:18"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def id(self) -> global___VarId: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        id: global___VarId | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["id", b"id", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["id", b"id", "src", b"src"]) -> None: ...

global___SpDataframeRef = SpDataframeRef

@typing.final
class SpDataframeRename(google.protobuf.message.Message):
    """dataframe.ir:298"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL_OR_MAPPER_FIELD_NUMBER: builtins.int
    DF_FIELD_NUMBER: builtins.int
    NEW_COLUMN_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def col_or_mapper(self) -> global___Expr: ...
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def new_column(self) -> google.protobuf.wrappers_pb2.StringValue: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        col_or_mapper: global___Expr | None = ...,
        df: global___SpDataframeExpr | None = ...,
        new_column: google.protobuf.wrappers_pb2.StringValue | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["col_or_mapper", b"col_or_mapper", "df", b"df", "new_column", b"new_column", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col_or_mapper", b"col_or_mapper", "df", b"df", "new_column", b"new_column", "src", b"src"]) -> None: ...

global___SpDataframeRename = SpDataframeRename

@typing.final
class SpDataframeRollup(google.protobuf.message.Message):
    """dataframe-grouped.ir:35"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COLS_FIELD_NUMBER: builtins.int
    DF_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def cols(self) -> global___ExprArgList: ...
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        cols: global___ExprArgList | None = ...,
        df: global___SpDataframeExpr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["cols", b"cols", "df", b"df", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["cols", b"cols", "df", b"df", "src", b"src"]) -> None: ...

global___SpDataframeRollup = SpDataframeRollup

@typing.final
class SpDataframeSample(google.protobuf.message.Message):
    """dataframe.ir:304"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DF_FIELD_NUMBER: builtins.int
    NUM_FIELD_NUMBER: builtins.int
    PROBABILITY_FRACTION_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def num(self) -> google.protobuf.wrappers_pb2.Int64Value: ...
    @property
    def probability_fraction(self) -> google.protobuf.wrappers_pb2.DoubleValue: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        df: global___SpDataframeExpr | None = ...,
        num: google.protobuf.wrappers_pb2.Int64Value | None = ...,
        probability_fraction: google.protobuf.wrappers_pb2.DoubleValue | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "num", b"num", "probability_fraction", b"probability_fraction", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["df", b"df", "num", b"num", "probability_fraction", b"probability_fraction", "src", b"src"]) -> None: ...

global___SpDataframeSample = SpDataframeSample

@typing.final
class SpDataframeSelect_Columns(google.protobuf.message.Message):
    """dataframe.ir:311"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COLS_FIELD_NUMBER: builtins.int
    DF_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def cols(self) -> global___ExprArgList: ...
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        cols: global___ExprArgList | None = ...,
        df: global___SpDataframeExpr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["cols", b"cols", "df", b"df", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["cols", b"cols", "df", b"df", "src", b"src"]) -> None: ...

global___SpDataframeSelect_Columns = SpDataframeSelect_Columns

@typing.final
class SpDataframeSelect_Exprs(google.protobuf.message.Message):
    """dataframe.ir:316"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DF_FIELD_NUMBER: builtins.int
    EXPRS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def exprs(self) -> global___ExprArgList: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        df: global___SpDataframeExpr | None = ...,
        exprs: global___ExprArgList | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "exprs", b"exprs", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["df", b"df", "exprs", b"exprs", "src", b"src"]) -> None: ...

global___SpDataframeSelect_Exprs = SpDataframeSelect_Exprs

@typing.final
class SpDataframeShow(google.protobuf.message.Message):
    """dataframe.ir:22"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    N_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    n: builtins.int
    @property
    def id(self) -> global___VarId: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        id: global___VarId | None = ...,
        n: builtins.int = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["id", b"id", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["id", b"id", "n", b"n", "src", b"src"]) -> None: ...

global___SpDataframeShow = SpDataframeShow

@typing.final
class SpDataframeSort(google.protobuf.message.Message):
    """dataframe.ir:321"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ASCENDING_FIELD_NUMBER: builtins.int
    COLS_FIELD_NUMBER: builtins.int
    DF_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def ascending(self) -> global___Expr: ...
    @property
    def cols(self) -> global___ExprArgList: ...
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        ascending: global___Expr | None = ...,
        cols: global___ExprArgList | None = ...,
        df: global___SpDataframeExpr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["ascending", b"ascending", "cols", b"cols", "df", b"df", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["ascending", b"ascending", "cols", b"cols", "df", b"df", "src", b"src"]) -> None: ...

global___SpDataframeSort = SpDataframeSort

@typing.final
class SpDataframeStatApproxQuantile(google.protobuf.message.Message):
    """dataframe-stat.ir:1"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COLS_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    PERCENTILE_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    STATEMENT_PARAMS_FIELD_NUMBER: builtins.int
    @property
    def cols(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Expr]: ...
    @property
    def id(self) -> global___VarId: ...
    @property
    def percentile(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def statement_params(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    def __init__(
        self,
        *,
        cols: collections.abc.Iterable[global___Expr] | None = ...,
        id: global___VarId | None = ...,
        percentile: collections.abc.Iterable[builtins.float] | None = ...,
        src: global___SrcPosition | None = ...,
        statement_params: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["id", b"id", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["cols", b"cols", "id", b"id", "percentile", b"percentile", "src", b"src", "statement_params", b"statement_params"]) -> None: ...

global___SpDataframeStatApproxQuantile = SpDataframeStatApproxQuantile

@typing.final
class SpDataframeStatCorr(google.protobuf.message.Message):
    """dataframe-stat.ir:8"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL1_FIELD_NUMBER: builtins.int
    COL2_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    STATEMENT_PARAMS_FIELD_NUMBER: builtins.int
    @property
    def col1(self) -> global___Expr: ...
    @property
    def col2(self) -> global___Expr: ...
    @property
    def id(self) -> global___VarId: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def statement_params(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    def __init__(
        self,
        *,
        col1: global___Expr | None = ...,
        col2: global___Expr | None = ...,
        id: global___VarId | None = ...,
        src: global___SrcPosition | None = ...,
        statement_params: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["col1", b"col1", "col2", b"col2", "id", b"id", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col1", b"col1", "col2", b"col2", "id", b"id", "src", b"src", "statement_params", b"statement_params"]) -> None: ...

global___SpDataframeStatCorr = SpDataframeStatCorr

@typing.final
class SpDataframeStatCov(google.protobuf.message.Message):
    """dataframe-stat.ir:15"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL1_FIELD_NUMBER: builtins.int
    COL2_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    STATEMENT_PARAMS_FIELD_NUMBER: builtins.int
    @property
    def col1(self) -> global___Expr: ...
    @property
    def col2(self) -> global___Expr: ...
    @property
    def id(self) -> global___VarId: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def statement_params(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    def __init__(
        self,
        *,
        col1: global___Expr | None = ...,
        col2: global___Expr | None = ...,
        id: global___VarId | None = ...,
        src: global___SrcPosition | None = ...,
        statement_params: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["col1", b"col1", "col2", b"col2", "id", b"id", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col1", b"col1", "col2", b"col2", "id", b"id", "src", b"src", "statement_params", b"statement_params"]) -> None: ...

global___SpDataframeStatCov = SpDataframeStatCov

@typing.final
class SpDataframeStatCrossTab(google.protobuf.message.Message):
    """dataframe-stat.ir:22"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL1_FIELD_NUMBER: builtins.int
    COL2_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    STATEMENT_PARAMS_FIELD_NUMBER: builtins.int
    @property
    def col1(self) -> global___Expr: ...
    @property
    def col2(self) -> global___Expr: ...
    @property
    def id(self) -> global___VarId: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def statement_params(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    def __init__(
        self,
        *,
        col1: global___Expr | None = ...,
        col2: global___Expr | None = ...,
        id: global___VarId | None = ...,
        src: global___SrcPosition | None = ...,
        statement_params: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["col1", b"col1", "col2", b"col2", "id", b"id", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col1", b"col1", "col2", b"col2", "id", b"id", "src", b"src", "statement_params", b"statement_params"]) -> None: ...

global___SpDataframeStatCrossTab = SpDataframeStatCrossTab

@typing.final
class SpDataframeStatSampleBy(google.protobuf.message.Message):
    """dataframe-stat.ir:29"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL_FIELD_NUMBER: builtins.int
    DF_FIELD_NUMBER: builtins.int
    FRACTIONS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def col(self) -> global___Expr: ...
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def fractions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_Expr_Float]: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        col: global___Expr | None = ...,
        df: global___SpDataframeExpr | None = ...,
        fractions: collections.abc.Iterable[global___Tuple_Expr_Float] | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["col", b"col", "df", b"df", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col", b"col", "df", b"df", "fractions", b"fractions", "src", b"src"]) -> None: ...

global___SpDataframeStatSampleBy = SpDataframeStatSampleBy

@typing.final
class SpDataframeToDf(google.protobuf.message.Message):
    """dataframe.ir:134"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL_NAMES_FIELD_NUMBER: builtins.int
    DF_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def col_names(self) -> global___ExprArgList: ...
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        col_names: global___ExprArgList | None = ...,
        df: global___SpDataframeExpr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["col_names", b"col_names", "df", b"df", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col_names", b"col_names", "df", b"df", "src", b"src"]) -> None: ...

global___SpDataframeToDf = SpDataframeToDf

@typing.final
class SpDataframeToLocalIterator(google.protobuf.message.Message):
    """dataframe.ir:42"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BLOCK_FIELD_NUMBER: builtins.int
    CASE_SENSITIVE_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    STATEMENT_PARAMS_FIELD_NUMBER: builtins.int
    block: builtins.bool
    case_sensitive: builtins.bool
    @property
    def id(self) -> global___VarId: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def statement_params(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    def __init__(
        self,
        *,
        block: builtins.bool = ...,
        case_sensitive: builtins.bool = ...,
        id: global___VarId | None = ...,
        src: global___SrcPosition | None = ...,
        statement_params: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["id", b"id", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["block", b"block", "case_sensitive", b"case_sensitive", "id", b"id", "src", b"src", "statement_params", b"statement_params"]) -> None: ...

global___SpDataframeToLocalIterator = SpDataframeToLocalIterator

@typing.final
class SpDataframeToPandas(google.protobuf.message.Message):
    """dataframe.ir:122"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BLOCK_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    STATEMENT_PARAMS_FIELD_NUMBER: builtins.int
    block: builtins.bool
    @property
    def id(self) -> global___VarId: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def statement_params(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    def __init__(
        self,
        *,
        block: builtins.bool = ...,
        id: global___VarId | None = ...,
        src: global___SrcPosition | None = ...,
        statement_params: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["id", b"id", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["block", b"block", "id", b"id", "src", b"src", "statement_params", b"statement_params"]) -> None: ...

global___SpDataframeToPandas = SpDataframeToPandas

@typing.final
class SpDataframeToPandasBatches(google.protobuf.message.Message):
    """dataframe.ir:128"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BLOCK_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    STATEMENT_PARAMS_FIELD_NUMBER: builtins.int
    block: builtins.bool
    @property
    def id(self) -> global___VarId: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def statement_params(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    def __init__(
        self,
        *,
        block: builtins.bool = ...,
        id: global___VarId | None = ...,
        src: global___SrcPosition | None = ...,
        statement_params: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["id", b"id", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["block", b"block", "id", b"id", "src", b"src", "statement_params", b"statement_params"]) -> None: ...

global___SpDataframeToPandasBatches = SpDataframeToPandasBatches

@typing.final
class SpDataframeUnion(google.protobuf.message.Message):
    """dataframe.ir:328"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DF_FIELD_NUMBER: builtins.int
    OTHER_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def other(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        df: global___SpDataframeExpr | None = ...,
        other: global___SpDataframeExpr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "other", b"other", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["df", b"df", "other", b"other", "src", b"src"]) -> None: ...

global___SpDataframeUnion = SpDataframeUnion

@typing.final
class SpDataframeUnionAll(google.protobuf.message.Message):
    """dataframe.ir:333"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DF_FIELD_NUMBER: builtins.int
    OTHER_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def other(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        df: global___SpDataframeExpr | None = ...,
        other: global___SpDataframeExpr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "other", b"other", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["df", b"df", "other", b"other", "src", b"src"]) -> None: ...

global___SpDataframeUnionAll = SpDataframeUnionAll

@typing.final
class SpDataframeUnionAllByName(google.protobuf.message.Message):
    """dataframe.ir:338"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DF_FIELD_NUMBER: builtins.int
    OTHER_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def other(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        df: global___SpDataframeExpr | None = ...,
        other: global___SpDataframeExpr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "other", b"other", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["df", b"df", "other", b"other", "src", b"src"]) -> None: ...

global___SpDataframeUnionAllByName = SpDataframeUnionAllByName

@typing.final
class SpDataframeUnionByName(google.protobuf.message.Message):
    """dataframe.ir:343"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DF_FIELD_NUMBER: builtins.int
    OTHER_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def other(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        df: global___SpDataframeExpr | None = ...,
        other: global___SpDataframeExpr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "other", b"other", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["df", b"df", "other", b"other", "src", b"src"]) -> None: ...

global___SpDataframeUnionByName = SpDataframeUnionByName

@typing.final
class SpDataframeUnpivot(google.protobuf.message.Message):
    """dataframe.ir:283"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COLUMN_LIST_FIELD_NUMBER: builtins.int
    DF_FIELD_NUMBER: builtins.int
    INCLUDE_NULLS_FIELD_NUMBER: builtins.int
    NAME_COLUMN_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    VALUE_COLUMN_FIELD_NUMBER: builtins.int
    include_nulls: builtins.bool
    name_column: builtins.str
    value_column: builtins.str
    @property
    def column_list(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Expr]: ...
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        column_list: collections.abc.Iterable[global___Expr] | None = ...,
        df: global___SpDataframeExpr | None = ...,
        include_nulls: builtins.bool = ...,
        name_column: builtins.str = ...,
        src: global___SrcPosition | None = ...,
        value_column: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["column_list", b"column_list", "df", b"df", "include_nulls", b"include_nulls", "name_column", b"name_column", "src", b"src", "value_column", b"value_column"]) -> None: ...

global___SpDataframeUnpivot = SpDataframeUnpivot

@typing.final
class SpDataframeWithColumn(google.protobuf.message.Message):
    """dataframe.ir:348"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL_FIELD_NUMBER: builtins.int
    COL_NAME_FIELD_NUMBER: builtins.int
    DF_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    col_name: builtins.str
    @property
    def col(self) -> global___Expr: ...
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        col: global___Expr | None = ...,
        col_name: builtins.str = ...,
        df: global___SpDataframeExpr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["col", b"col", "df", b"df", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col", b"col", "col_name", b"col_name", "df", b"df", "src", b"src"]) -> None: ...

global___SpDataframeWithColumn = SpDataframeWithColumn

@typing.final
class SpDataframeWithColumnRenamed(google.protobuf.message.Message):
    """dataframe.ir:354"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL_FIELD_NUMBER: builtins.int
    DF_FIELD_NUMBER: builtins.int
    NEW_NAME_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    new_name: builtins.str
    @property
    def col(self) -> global___Expr: ...
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        col: global___Expr | None = ...,
        df: global___SpDataframeExpr | None = ...,
        new_name: builtins.str = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["col", b"col", "df", b"df", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col", b"col", "df", b"df", "new_name", b"new_name", "src", b"src"]) -> None: ...

global___SpDataframeWithColumnRenamed = SpDataframeWithColumnRenamed

@typing.final
class SpDataframeWithColumns(google.protobuf.message.Message):
    """dataframe.ir:360"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COL_NAMES_FIELD_NUMBER: builtins.int
    DF_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    VALUES_FIELD_NUMBER: builtins.int
    @property
    def col_names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def values(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Expr]: ...
    def __init__(
        self,
        *,
        col_names: collections.abc.Iterable[builtins.str] | None = ...,
        df: global___SpDataframeExpr | None = ...,
        src: global___SrcPosition | None = ...,
        values: collections.abc.Iterable[global___Expr] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["col_names", b"col_names", "df", b"df", "src", b"src", "values", b"values"]) -> None: ...

global___SpDataframeWithColumns = SpDataframeWithColumns

@typing.final
class SpDataframeWrite(google.protobuf.message.Message):
    """dataframe-io.ir:84"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DF_FIELD_NUMBER: builtins.int
    OPTIONS_FIELD_NUMBER: builtins.int
    PARTITION_BY_FIELD_NUMBER: builtins.int
    SAVE_MODE_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def options(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_Expr]: ...
    @property
    def partition_by(self) -> global___Expr: ...
    @property
    def save_mode(self) -> global___SpSaveMode: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        df: global___SpDataframeExpr | None = ...,
        options: collections.abc.Iterable[global___Tuple_String_Expr] | None = ...,
        partition_by: global___Expr | None = ...,
        save_mode: global___SpSaveMode | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "partition_by", b"partition_by", "save_mode", b"save_mode", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["df", b"df", "options", b"options", "partition_by", b"partition_by", "save_mode", b"save_mode", "src", b"src"]) -> None: ...

global___SpDataframeWrite = SpDataframeWrite

@typing.final
class SpDataframeWriter(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TRAIT_SP_WRITE_FILE_FIELD_NUMBER: builtins.int
    SP_WRITE_COPY_INTO_LOCATION_FIELD_NUMBER: builtins.int
    SP_WRITE_CSV_FIELD_NUMBER: builtins.int
    SP_WRITE_JSON_FIELD_NUMBER: builtins.int
    SP_WRITE_PARQUET_FIELD_NUMBER: builtins.int
    SP_WRITE_TABLE_FIELD_NUMBER: builtins.int
    @property
    def trait_sp_write_file(self) -> global___SpWriteFile: ...
    @property
    def sp_write_copy_into_location(self) -> global___SpWriteCopyIntoLocation: ...
    @property
    def sp_write_csv(self) -> global___SpWriteCsv: ...
    @property
    def sp_write_json(self) -> global___SpWriteJson: ...
    @property
    def sp_write_parquet(self) -> global___SpWriteParquet: ...
    @property
    def sp_write_table(self) -> global___SpWriteTable: ...
    def __init__(
        self,
        *,
        trait_sp_write_file: global___SpWriteFile | None = ...,
        sp_write_copy_into_location: global___SpWriteCopyIntoLocation | None = ...,
        sp_write_csv: global___SpWriteCsv | None = ...,
        sp_write_json: global___SpWriteJson | None = ...,
        sp_write_parquet: global___SpWriteParquet | None = ...,
        sp_write_table: global___SpWriteTable | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["sp_write_copy_into_location", b"sp_write_copy_into_location", "sp_write_csv", b"sp_write_csv", "sp_write_json", b"sp_write_json", "sp_write_parquet", b"sp_write_parquet", "sp_write_table", b"sp_write_table", "trait_sp_write_file", b"trait_sp_write_file", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["sp_write_copy_into_location", b"sp_write_copy_into_location", "sp_write_csv", b"sp_write_csv", "sp_write_json", b"sp_write_json", "sp_write_parquet", b"sp_write_parquet", "sp_write_table", b"sp_write_table", "trait_sp_write_file", b"trait_sp_write_file", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["trait_sp_write_file", "sp_write_copy_into_location", "sp_write_csv", "sp_write_json", "sp_write_parquet", "sp_write_table"] | None: ...

global___SpDataframeWriter = SpDataframeWriter

@typing.final
class SpDatatypeVal(google.protobuf.message.Message):
    """const.ir:46"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATATYPE_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def datatype(self) -> global___SpDataType: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        datatype: global___SpDataType | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["datatype", b"datatype", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["datatype", b"datatype", "src", b"src"]) -> None: ...

global___SpDatatypeVal = SpDatatypeVal

@typing.final
class SpFlatten(google.protobuf.message.Message):
    """dataframe.ir:83"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INPUT_FIELD_NUMBER: builtins.int
    MODE_FIELD_NUMBER: builtins.int
    OUTER_FIELD_NUMBER: builtins.int
    PATH_FIELD_NUMBER: builtins.int
    RECURSIVE_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    outer: builtins.bool
    recursive: builtins.bool
    @property
    def input(self) -> global___Expr: ...
    @property
    def mode(self) -> global___SpFlattenMode: ...
    @property
    def path(self) -> google.protobuf.wrappers_pb2.StringValue: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        input: global___Expr | None = ...,
        mode: global___SpFlattenMode | None = ...,
        outer: builtins.bool = ...,
        path: google.protobuf.wrappers_pb2.StringValue | None = ...,
        recursive: builtins.bool = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["input", b"input", "mode", b"mode", "path", b"path", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["input", b"input", "mode", b"mode", "outer", b"outer", "path", b"path", "recursive", b"recursive", "src", b"src"]) -> None: ...

global___SpFlatten = SpFlatten

@typing.final
class SpFnRef(google.protobuf.message.Message):
    """fn.ir:22"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def id(self) -> global___VarId: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        id: global___VarId | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["id", b"id", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["id", b"id", "src", b"src"]) -> None: ...

global___SpFnRef = SpFnRef

@typing.final
class SpGenerator(google.protobuf.message.Message):
    """dataframe.ir:93"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COLUMNS_FIELD_NUMBER: builtins.int
    ROW_COUNT_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    TIME_LIMIT_SECONDS_FIELD_NUMBER: builtins.int
    row_count: builtins.int
    time_limit_seconds: builtins.int
    @property
    def columns(self) -> global___ExprArgList: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        columns: global___ExprArgList | None = ...,
        row_count: builtins.int = ...,
        src: global___SrcPosition | None = ...,
        time_limit_seconds: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["columns", b"columns", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["columns", b"columns", "row_count", b"row_count", "src", b"src", "time_limit_seconds", b"time_limit_seconds"]) -> None: ...

global___SpGenerator = SpGenerator

@typing.final
class SpGroupingSets(google.protobuf.message.Message):
    """dataframe.ir:366"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SETS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def sets(self) -> global___ExprArgList: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        sets: global___ExprArgList | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["sets", b"sets", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["sets", b"sets", "src", b"src"]) -> None: ...

global___SpGroupingSets = SpGroupingSets

@typing.final
class SpMatchedClause(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SP_MERGE_DELETE_WHEN_MATCHED_CLAUSE_FIELD_NUMBER: builtins.int
    SP_MERGE_INSERT_WHEN_NOT_MATCHED_CLAUSE_FIELD_NUMBER: builtins.int
    SP_MERGE_UPDATE_WHEN_MATCHED_CLAUSE_FIELD_NUMBER: builtins.int
    @property
    def sp_merge_delete_when_matched_clause(self) -> global___SpMergeDeleteWhenMatchedClause: ...
    @property
    def sp_merge_insert_when_not_matched_clause(self) -> global___SpMergeInsertWhenNotMatchedClause: ...
    @property
    def sp_merge_update_when_matched_clause(self) -> global___SpMergeUpdateWhenMatchedClause: ...
    def __init__(
        self,
        *,
        sp_merge_delete_when_matched_clause: global___SpMergeDeleteWhenMatchedClause | None = ...,
        sp_merge_insert_when_not_matched_clause: global___SpMergeInsertWhenNotMatchedClause | None = ...,
        sp_merge_update_when_matched_clause: global___SpMergeUpdateWhenMatchedClause | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["sp_merge_delete_when_matched_clause", b"sp_merge_delete_when_matched_clause", "sp_merge_insert_when_not_matched_clause", b"sp_merge_insert_when_not_matched_clause", "sp_merge_update_when_matched_clause", b"sp_merge_update_when_matched_clause", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["sp_merge_delete_when_matched_clause", b"sp_merge_delete_when_matched_clause", "sp_merge_insert_when_not_matched_clause", b"sp_merge_insert_when_not_matched_clause", "sp_merge_update_when_matched_clause", b"sp_merge_update_when_matched_clause", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["sp_merge_delete_when_matched_clause", "sp_merge_insert_when_not_matched_clause", "sp_merge_update_when_matched_clause"] | None: ...

global___SpMatchedClause = SpMatchedClause

@typing.final
class SpMergeDeleteWhenMatchedClause(google.protobuf.message.Message):
    """table.ir:46"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONDITION_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def condition(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        condition: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["condition", b"condition", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["condition", b"condition", "src", b"src"]) -> None: ...

global___SpMergeDeleteWhenMatchedClause = SpMergeDeleteWhenMatchedClause

@typing.final
class SpMergeInsertWhenNotMatchedClause(google.protobuf.message.Message):
    """table.ir:50"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONDITION_FIELD_NUMBER: builtins.int
    INSERT_KEYS_FIELD_NUMBER: builtins.int
    INSERT_VALUES_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def condition(self) -> global___Expr: ...
    @property
    def insert_keys(self) -> global___List_Expr: ...
    @property
    def insert_values(self) -> global___List_Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        condition: global___Expr | None = ...,
        insert_keys: global___List_Expr | None = ...,
        insert_values: global___List_Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["condition", b"condition", "insert_keys", b"insert_keys", "insert_values", b"insert_values", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["condition", b"condition", "insert_keys", b"insert_keys", "insert_values", b"insert_values", "src", b"src"]) -> None: ...

global___SpMergeInsertWhenNotMatchedClause = SpMergeInsertWhenNotMatchedClause

@typing.final
class SpMergeUpdateWhenMatchedClause(google.protobuf.message.Message):
    """table.ir:41"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONDITION_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    UPDATE_ASSIGNMENTS_FIELD_NUMBER: builtins.int
    @property
    def condition(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def update_assignments(self) -> global___Map_Expr_Expr: ...
    def __init__(
        self,
        *,
        condition: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
        update_assignments: global___Map_Expr_Expr | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["condition", b"condition", "src", b"src", "update_assignments", b"update_assignments"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["condition", b"condition", "src", b"src", "update_assignments", b"update_assignments"]) -> None: ...

global___SpMergeUpdateWhenMatchedClause = SpMergeUpdateWhenMatchedClause

@typing.final
class SpNameRef(google.protobuf.message.Message):
    """ast.ir:120"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def name(self) -> global___SpName: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        name: global___SpName | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["name", b"name", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["name", b"name", "src", b"src"]) -> None: ...

global___SpNameRef = SpNameRef

@typing.final
class SpRange(google.protobuf.message.Message):
    """dataframe.ir:99"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    END_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    START_FIELD_NUMBER: builtins.int
    STEP_FIELD_NUMBER: builtins.int
    start: builtins.int
    @property
    def end(self) -> google.protobuf.wrappers_pb2.Int64Value: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def step(self) -> google.protobuf.wrappers_pb2.Int64Value: ...
    def __init__(
        self,
        *,
        end: google.protobuf.wrappers_pb2.Int64Value | None = ...,
        src: global___SrcPosition | None = ...,
        start: builtins.int = ...,
        step: google.protobuf.wrappers_pb2.Int64Value | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["end", b"end", "src", b"src", "step", b"step"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["end", b"end", "src", b"src", "start", b"start", "step", b"step"]) -> None: ...

global___SpRange = SpRange

@typing.final
class SpReadAvro(google.protobuf.message.Message):
    """dataframe-io.ir:49"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PATH_FIELD_NUMBER: builtins.int
    READER_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    path: builtins.str
    @property
    def reader(self) -> global___SpDataframeReader: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        path: builtins.str = ...,
        reader: global___SpDataframeReader | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["reader", b"reader", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["path", b"path", "reader", b"reader", "src", b"src"]) -> None: ...

global___SpReadAvro = SpReadAvro

@typing.final
class SpReadCsv(google.protobuf.message.Message):
    """dataframe-io.ir:38"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PATH_FIELD_NUMBER: builtins.int
    READER_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    path: builtins.str
    @property
    def reader(self) -> global___SpDataframeReader: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        path: builtins.str = ...,
        reader: global___SpDataframeReader | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["reader", b"reader", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["path", b"path", "reader", b"reader", "src", b"src"]) -> None: ...

global___SpReadCsv = SpReadCsv

@typing.final
class SpReadJson(google.protobuf.message.Message):
    """dataframe-io.ir:44"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PATH_FIELD_NUMBER: builtins.int
    READER_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    path: builtins.str
    @property
    def reader(self) -> global___SpDataframeReader: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        path: builtins.str = ...,
        reader: global___SpDataframeReader | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["reader", b"reader", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["path", b"path", "reader", b"reader", "src", b"src"]) -> None: ...

global___SpReadJson = SpReadJson

@typing.final
class SpReadOrc(google.protobuf.message.Message):
    """dataframe-io.ir:54"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PATH_FIELD_NUMBER: builtins.int
    READER_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    path: builtins.str
    @property
    def reader(self) -> global___SpDataframeReader: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        path: builtins.str = ...,
        reader: global___SpDataframeReader | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["reader", b"reader", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["path", b"path", "reader", b"reader", "src", b"src"]) -> None: ...

global___SpReadOrc = SpReadOrc

@typing.final
class SpReadParquet(google.protobuf.message.Message):
    """dataframe-io.ir:59"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PATH_FIELD_NUMBER: builtins.int
    READER_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    path: builtins.str
    @property
    def reader(self) -> global___SpDataframeReader: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        path: builtins.str = ...,
        reader: global___SpDataframeReader | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["reader", b"reader", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["path", b"path", "reader", b"reader", "src", b"src"]) -> None: ...

global___SpReadParquet = SpReadParquet

@typing.final
class SpReadTable(google.protobuf.message.Message):
    """dataframe-io.ir:33"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    READER_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def name(self) -> global___SpNameRef: ...
    @property
    def reader(self) -> global___SpDataframeReader: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        name: global___SpNameRef | None = ...,
        reader: global___SpDataframeReader | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["name", b"name", "reader", b"reader", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["name", b"name", "reader", b"reader", "src", b"src"]) -> None: ...

global___SpReadTable = SpReadTable

@typing.final
class SpReadXml(google.protobuf.message.Message):
    """dataframe-io.ir:64"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PATH_FIELD_NUMBER: builtins.int
    READER_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    path: builtins.str
    @property
    def reader(self) -> global___SpDataframeReader: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        path: builtins.str = ...,
        reader: global___SpDataframeReader | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["reader", b"reader", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["path", b"path", "reader", b"reader", "src", b"src"]) -> None: ...

global___SpReadXml = SpReadXml

@typing.final
class SpRelationalGroupedDataframeAgg(google.protobuf.message.Message):
    """dataframe-grouped.ir:45"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    EXPRS_FIELD_NUMBER: builtins.int
    GROUPED_DF_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def exprs(self) -> global___ExprArgList: ...
    @property
    def grouped_df(self) -> global___SpRelationalGroupedDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        exprs: global___ExprArgList | None = ...,
        grouped_df: global___SpRelationalGroupedDataframeExpr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["exprs", b"exprs", "grouped_df", b"grouped_df", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["exprs", b"exprs", "grouped_df", b"grouped_df", "src", b"src"]) -> None: ...

global___SpRelationalGroupedDataframeAgg = SpRelationalGroupedDataframeAgg

@typing.final
class SpRelationalGroupedDataframeApplyInPandas(google.protobuf.message.Message):
    """dataframe-grouped.ir:57"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FUNC_FIELD_NUMBER: builtins.int
    GROUPED_DF_FIELD_NUMBER: builtins.int
    KWARGS_FIELD_NUMBER: builtins.int
    OUTPUT_SCHEMA_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def func(self) -> global___SpCallable: ...
    @property
    def grouped_df(self) -> global___SpRelationalGroupedDataframeExpr: ...
    @property
    def kwargs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_Expr]: ...
    @property
    def output_schema(self) -> global___SpStructType: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        func: global___SpCallable | None = ...,
        grouped_df: global___SpRelationalGroupedDataframeExpr | None = ...,
        kwargs: collections.abc.Iterable[global___Tuple_String_Expr] | None = ...,
        output_schema: global___SpStructType | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["func", b"func", "grouped_df", b"grouped_df", "output_schema", b"output_schema", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["func", b"func", "grouped_df", b"grouped_df", "kwargs", b"kwargs", "output_schema", b"output_schema", "src", b"src"]) -> None: ...

global___SpRelationalGroupedDataframeApplyInPandas = SpRelationalGroupedDataframeApplyInPandas

@typing.final
class SpRelationalGroupedDataframeBuiltin(google.protobuf.message.Message):
    """dataframe-grouped.ir:51"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    AGG_NAME_FIELD_NUMBER: builtins.int
    COLS_FIELD_NUMBER: builtins.int
    GROUPED_DF_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    agg_name: builtins.str
    @property
    def cols(self) -> global___ExprArgList: ...
    @property
    def grouped_df(self) -> global___SpRelationalGroupedDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        agg_name: builtins.str = ...,
        cols: global___ExprArgList | None = ...,
        grouped_df: global___SpRelationalGroupedDataframeExpr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["cols", b"cols", "grouped_df", b"grouped_df", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["agg_name", b"agg_name", "cols", b"cols", "grouped_df", b"grouped_df", "src", b"src"]) -> None: ...

global___SpRelationalGroupedDataframeBuiltin = SpRelationalGroupedDataframeBuiltin

@typing.final
class SpRelationalGroupedDataframeExpr(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    EXTENSION_RELATIONAL_GROUPED_DATAFRAME_EXPR_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_CUBE_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_GROUP_BY_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_GROUP_BY_GROUPING_SETS_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_PIVOT_FIELD_NUMBER: builtins.int
    SP_DATAFRAME_ROLLUP_FIELD_NUMBER: builtins.int
    SP_RELATIONAL_GROUPED_DATAFRAME_REF_FIELD_NUMBER: builtins.int
    TRUNCATED_RELATIONAL_GROUPED_DATAFRAME_EXPR_FIELD_NUMBER: builtins.int
    @property
    def extension_relational_grouped_dataframe_expr(self) -> global___ExtensionRelationalGroupedDataframeExpr: ...
    @property
    def sp_dataframe_cube(self) -> global___SpDataframeCube: ...
    @property
    def sp_dataframe_group_by(self) -> global___SpDataframeGroupBy: ...
    @property
    def sp_dataframe_group_by_grouping_sets(self) -> global___SpDataframeGroupByGroupingSets: ...
    @property
    def sp_dataframe_pivot(self) -> global___SpDataframePivot: ...
    @property
    def sp_dataframe_rollup(self) -> global___SpDataframeRollup: ...
    @property
    def sp_relational_grouped_dataframe_ref(self) -> global___SpRelationalGroupedDataframeRef: ...
    @property
    def truncated_relational_grouped_dataframe_expr(self) -> global___TruncatedRelationalGroupedDataframeExpr: ...
    def __init__(
        self,
        *,
        extension_relational_grouped_dataframe_expr: global___ExtensionRelationalGroupedDataframeExpr | None = ...,
        sp_dataframe_cube: global___SpDataframeCube | None = ...,
        sp_dataframe_group_by: global___SpDataframeGroupBy | None = ...,
        sp_dataframe_group_by_grouping_sets: global___SpDataframeGroupByGroupingSets | None = ...,
        sp_dataframe_pivot: global___SpDataframePivot | None = ...,
        sp_dataframe_rollup: global___SpDataframeRollup | None = ...,
        sp_relational_grouped_dataframe_ref: global___SpRelationalGroupedDataframeRef | None = ...,
        truncated_relational_grouped_dataframe_expr: global___TruncatedRelationalGroupedDataframeExpr | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["extension_relational_grouped_dataframe_expr", b"extension_relational_grouped_dataframe_expr", "sp_dataframe_cube", b"sp_dataframe_cube", "sp_dataframe_group_by", b"sp_dataframe_group_by", "sp_dataframe_group_by_grouping_sets", b"sp_dataframe_group_by_grouping_sets", "sp_dataframe_pivot", b"sp_dataframe_pivot", "sp_dataframe_rollup", b"sp_dataframe_rollup", "sp_relational_grouped_dataframe_ref", b"sp_relational_grouped_dataframe_ref", "truncated_relational_grouped_dataframe_expr", b"truncated_relational_grouped_dataframe_expr", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["extension_relational_grouped_dataframe_expr", b"extension_relational_grouped_dataframe_expr", "sp_dataframe_cube", b"sp_dataframe_cube", "sp_dataframe_group_by", b"sp_dataframe_group_by", "sp_dataframe_group_by_grouping_sets", b"sp_dataframe_group_by_grouping_sets", "sp_dataframe_pivot", b"sp_dataframe_pivot", "sp_dataframe_rollup", b"sp_dataframe_rollup", "sp_relational_grouped_dataframe_ref", b"sp_relational_grouped_dataframe_ref", "truncated_relational_grouped_dataframe_expr", b"truncated_relational_grouped_dataframe_expr", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["extension_relational_grouped_dataframe_expr", "sp_dataframe_cube", "sp_dataframe_group_by", "sp_dataframe_group_by_grouping_sets", "sp_dataframe_pivot", "sp_dataframe_rollup", "sp_relational_grouped_dataframe_ref", "truncated_relational_grouped_dataframe_expr"] | None: ...

global___SpRelationalGroupedDataframeExpr = SpRelationalGroupedDataframeExpr

@typing.final
class SpRelationalGroupedDataframePivot(google.protobuf.message.Message):
    """dataframe-grouped.ir:64"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DEFAULT_ON_NULL_FIELD_NUMBER: builtins.int
    GROUPED_DF_FIELD_NUMBER: builtins.int
    PIVOT_COL_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    VALUES_FIELD_NUMBER: builtins.int
    @property
    def default_on_null(self) -> global___Expr: ...
    @property
    def grouped_df(self) -> global___SpRelationalGroupedDataframeExpr: ...
    @property
    def pivot_col(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def values(self) -> global___SpPivotValue: ...
    def __init__(
        self,
        *,
        default_on_null: global___Expr | None = ...,
        grouped_df: global___SpRelationalGroupedDataframeExpr | None = ...,
        pivot_col: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
        values: global___SpPivotValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["default_on_null", b"default_on_null", "grouped_df", b"grouped_df", "pivot_col", b"pivot_col", "src", b"src", "values", b"values"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["default_on_null", b"default_on_null", "grouped_df", b"grouped_df", "pivot_col", b"pivot_col", "src", b"src", "values", b"values"]) -> None: ...

global___SpRelationalGroupedDataframePivot = SpRelationalGroupedDataframePivot

@typing.final
class SpRelationalGroupedDataframeRef(google.protobuf.message.Message):
    """dataframe-grouped.ir:14"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def id(self) -> global___VarId: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        id: global___VarId | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["id", b"id", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["id", b"id", "src", b"src"]) -> None: ...

global___SpRelationalGroupedDataframeRef = SpRelationalGroupedDataframeRef

@typing.final
class SpRow(google.protobuf.message.Message):
    """expr.ir:19"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAMES_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    VS_FIELD_NUMBER: builtins.int
    @property
    def names(self) -> global___List_String: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def vs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Expr]: ...
    def __init__(
        self,
        *,
        names: global___List_String | None = ...,
        src: global___SrcPosition | None = ...,
        vs: collections.abc.Iterable[global___Expr] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["names", b"names", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["names", b"names", "src", b"src", "vs", b"vs"]) -> None: ...

global___SpRow = SpRow

@typing.final
class SpSessionTableFunction(google.protobuf.message.Message):
    """dataframe.ir:118"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FN_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def fn(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        fn: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["fn", b"fn", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["fn", b"fn", "src", b"src"]) -> None: ...

global___SpSessionTableFunction = SpSessionTableFunction

@typing.final
class SpSql(google.protobuf.message.Message):
    """dataframe.ir:105"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PARAMS_FIELD_NUMBER: builtins.int
    QUERY_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    query: builtins.str
    @property
    def params(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Expr]: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        params: collections.abc.Iterable[global___Expr] | None = ...,
        query: builtins.str = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["params", b"params", "query", b"query", "src", b"src"]) -> None: ...

global___SpSql = SpSql

@typing.final
class SpTable(google.protobuf.message.Message):
    """dataframe.ir:112"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    IS_TEMP_TABLE_FOR_CLEANUP_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    VARIANT_FIELD_NUMBER: builtins.int
    is_temp_table_for_cleanup: builtins.bool
    @property
    def name(self) -> global___SpNameRef: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def variant(self) -> global___SpTableVariant: ...
    def __init__(
        self,
        *,
        is_temp_table_for_cleanup: builtins.bool = ...,
        name: global___SpNameRef | None = ...,
        src: global___SrcPosition | None = ...,
        variant: global___SpTableVariant | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["name", b"name", "src", b"src", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["is_temp_table_for_cleanup", b"is_temp_table_for_cleanup", "name", b"name", "src", b"src", "variant", b"variant"]) -> None: ...

global___SpTable = SpTable

@typing.final
class SpTableDelete(google.protobuf.message.Message):
    """table.ir:1"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BLOCK_FIELD_NUMBER: builtins.int
    CONDITION_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    SOURCE_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    STATEMENT_PARAMS_FIELD_NUMBER: builtins.int
    block: builtins.bool
    @property
    def condition(self) -> global___Expr: ...
    @property
    def id(self) -> global___VarId: ...
    @property
    def source(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def statement_params(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    def __init__(
        self,
        *,
        block: builtins.bool = ...,
        condition: global___Expr | None = ...,
        id: global___VarId | None = ...,
        source: global___SpDataframeExpr | None = ...,
        src: global___SrcPosition | None = ...,
        statement_params: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["condition", b"condition", "id", b"id", "source", b"source", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["block", b"block", "condition", b"condition", "id", b"id", "source", b"source", "src", b"src", "statement_params", b"statement_params"]) -> None: ...

global___SpTableDelete = SpTableDelete

@typing.final
class SpTableDropTable(google.protobuf.message.Message):
    """table.ir:9"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def id(self) -> global___VarId: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        id: global___VarId | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["id", b"id", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["id", b"id", "src", b"src"]) -> None: ...

global___SpTableDropTable = SpTableDropTable

@typing.final
class SpTableFnCallAlias(google.protobuf.message.Message):
    """fn.ir:160"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ALIASES_FIELD_NUMBER: builtins.int
    LHS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def aliases(self) -> global___ExprArgList: ...
    @property
    def lhs(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        aliases: global___ExprArgList | None = ...,
        lhs: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["aliases", b"aliases", "lhs", b"lhs", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["aliases", b"aliases", "lhs", b"lhs", "src", b"src"]) -> None: ...

global___SpTableFnCallAlias = SpTableFnCallAlias

@typing.final
class SpTableFnCallOver(google.protobuf.message.Message):
    """fn.ir:154"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LHS_FIELD_NUMBER: builtins.int
    ORDER_BY_FIELD_NUMBER: builtins.int
    PARTITION_BY_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def lhs(self) -> global___Expr: ...
    @property
    def order_by(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Expr]: ...
    @property
    def partition_by(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Expr]: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        lhs: global___Expr | None = ...,
        order_by: collections.abc.Iterable[global___Expr] | None = ...,
        partition_by: collections.abc.Iterable[global___Expr] | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["lhs", b"lhs", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["lhs", b"lhs", "order_by", b"order_by", "partition_by", b"partition_by", "src", b"src"]) -> None: ...

global___SpTableFnCallOver = SpTableFnCallOver

@typing.final
class SpTableMerge(google.protobuf.message.Message):
    """table.ir:13"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BLOCK_FIELD_NUMBER: builtins.int
    CLAUSES_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    JOIN_EXPR_FIELD_NUMBER: builtins.int
    SOURCE_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    STATEMENT_PARAMS_FIELD_NUMBER: builtins.int
    block: builtins.bool
    @property
    def clauses(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SpMatchedClause]: ...
    @property
    def id(self) -> global___VarId: ...
    @property
    def join_expr(self) -> global___Expr: ...
    @property
    def source(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def statement_params(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    def __init__(
        self,
        *,
        block: builtins.bool = ...,
        clauses: collections.abc.Iterable[global___SpMatchedClause] | None = ...,
        id: global___VarId | None = ...,
        join_expr: global___Expr | None = ...,
        source: global___SpDataframeExpr | None = ...,
        src: global___SrcPosition | None = ...,
        statement_params: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["id", b"id", "join_expr", b"join_expr", "source", b"source", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["block", b"block", "clauses", b"clauses", "id", b"id", "join_expr", b"join_expr", "source", b"source", "src", b"src", "statement_params", b"statement_params"]) -> None: ...

global___SpTableMerge = SpTableMerge

@typing.final
class SpTableSample(google.protobuf.message.Message):
    """table.ir:22"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DF_FIELD_NUMBER: builtins.int
    NUM_FIELD_NUMBER: builtins.int
    PROBABILITY_FRACTION_FIELD_NUMBER: builtins.int
    SAMPLING_METHOD_FIELD_NUMBER: builtins.int
    SEED_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def num(self) -> google.protobuf.wrappers_pb2.Int64Value: ...
    @property
    def probability_fraction(self) -> google.protobuf.wrappers_pb2.DoubleValue: ...
    @property
    def sampling_method(self) -> google.protobuf.wrappers_pb2.StringValue: ...
    @property
    def seed(self) -> google.protobuf.wrappers_pb2.Int64Value: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        df: global___SpDataframeExpr | None = ...,
        num: google.protobuf.wrappers_pb2.Int64Value | None = ...,
        probability_fraction: google.protobuf.wrappers_pb2.DoubleValue | None = ...,
        sampling_method: google.protobuf.wrappers_pb2.StringValue | None = ...,
        seed: google.protobuf.wrappers_pb2.Int64Value | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["df", b"df", "num", b"num", "probability_fraction", b"probability_fraction", "sampling_method", b"sampling_method", "seed", b"seed", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["df", b"df", "num", b"num", "probability_fraction", b"probability_fraction", "sampling_method", b"sampling_method", "seed", b"seed", "src", b"src"]) -> None: ...

global___SpTableSample = SpTableSample

@typing.final
class SpTableUpdate(google.protobuf.message.Message):
    """table.ir:30"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ASSIGNMENTS_FIELD_NUMBER: builtins.int
    BLOCK_FIELD_NUMBER: builtins.int
    CONDITION_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    SOURCE_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    STATEMENT_PARAMS_FIELD_NUMBER: builtins.int
    block: builtins.bool
    @property
    def assignments(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_Expr]: ...
    @property
    def condition(self) -> global___Expr: ...
    @property
    def id(self) -> global___VarId: ...
    @property
    def source(self) -> global___SpDataframeExpr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def statement_params(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    def __init__(
        self,
        *,
        assignments: collections.abc.Iterable[global___Tuple_String_Expr] | None = ...,
        block: builtins.bool = ...,
        condition: global___Expr | None = ...,
        id: global___VarId | None = ...,
        source: global___SpDataframeExpr | None = ...,
        src: global___SrcPosition | None = ...,
        statement_params: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["condition", b"condition", "id", b"id", "source", b"source", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["assignments", b"assignments", "block", b"block", "condition", b"condition", "id", b"id", "source", b"source", "src", b"src", "statement_params", b"statement_params"]) -> None: ...

global___SpTableUpdate = SpTableUpdate

@typing.final
class SpToSnowparkPandas(google.protobuf.message.Message):
    """dataframe.ir:370"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COLUMNS_FIELD_NUMBER: builtins.int
    DF_FIELD_NUMBER: builtins.int
    INDEX_COL_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def columns(self) -> global___List_String: ...
    @property
    def df(self) -> global___SpDataframeExpr: ...
    @property
    def index_col(self) -> global___List_String: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        columns: global___List_String | None = ...,
        df: global___SpDataframeExpr | None = ...,
        index_col: global___List_String | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["columns", b"columns", "df", b"df", "index_col", b"index_col", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["columns", b"columns", "df", b"df", "index_col", b"index_col", "src", b"src"]) -> None: ...

global___SpToSnowparkPandas = SpToSnowparkPandas

@typing.final
class SpWindowSpecEmpty(google.protobuf.message.Message):
    """window.ir:18"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SRC_FIELD_NUMBER: builtins.int
    WND_FIELD_NUMBER: builtins.int
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def wnd(self) -> global___SpWindowSpecExpr: ...
    def __init__(
        self,
        *,
        src: global___SrcPosition | None = ...,
        wnd: global___SpWindowSpecExpr | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["src", b"src", "wnd", b"wnd"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["src", b"src", "wnd", b"wnd"]) -> None: ...

global___SpWindowSpecEmpty = SpWindowSpecEmpty

@typing.final
class SpWindowSpecExpr(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SP_WINDOW_SPEC_EMPTY_FIELD_NUMBER: builtins.int
    SP_WINDOW_SPEC_ORDER_BY_FIELD_NUMBER: builtins.int
    SP_WINDOW_SPEC_PARTITION_BY_FIELD_NUMBER: builtins.int
    SP_WINDOW_SPEC_RANGE_BETWEEN_FIELD_NUMBER: builtins.int
    SP_WINDOW_SPEC_ROWS_BETWEEN_FIELD_NUMBER: builtins.int
    @property
    def sp_window_spec_empty(self) -> global___SpWindowSpecEmpty: ...
    @property
    def sp_window_spec_order_by(self) -> global___SpWindowSpecOrderBy: ...
    @property
    def sp_window_spec_partition_by(self) -> global___SpWindowSpecPartitionBy: ...
    @property
    def sp_window_spec_range_between(self) -> global___SpWindowSpecRangeBetween: ...
    @property
    def sp_window_spec_rows_between(self) -> global___SpWindowSpecRowsBetween: ...
    def __init__(
        self,
        *,
        sp_window_spec_empty: global___SpWindowSpecEmpty | None = ...,
        sp_window_spec_order_by: global___SpWindowSpecOrderBy | None = ...,
        sp_window_spec_partition_by: global___SpWindowSpecPartitionBy | None = ...,
        sp_window_spec_range_between: global___SpWindowSpecRangeBetween | None = ...,
        sp_window_spec_rows_between: global___SpWindowSpecRowsBetween | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["sp_window_spec_empty", b"sp_window_spec_empty", "sp_window_spec_order_by", b"sp_window_spec_order_by", "sp_window_spec_partition_by", b"sp_window_spec_partition_by", "sp_window_spec_range_between", b"sp_window_spec_range_between", "sp_window_spec_rows_between", b"sp_window_spec_rows_between", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["sp_window_spec_empty", b"sp_window_spec_empty", "sp_window_spec_order_by", b"sp_window_spec_order_by", "sp_window_spec_partition_by", b"sp_window_spec_partition_by", "sp_window_spec_range_between", b"sp_window_spec_range_between", "sp_window_spec_rows_between", b"sp_window_spec_rows_between", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["sp_window_spec_empty", "sp_window_spec_order_by", "sp_window_spec_partition_by", "sp_window_spec_range_between", "sp_window_spec_rows_between"] | None: ...

global___SpWindowSpecExpr = SpWindowSpecExpr

@typing.final
class SpWindowSpecOrderBy(google.protobuf.message.Message):
    """window.ir:20"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COLS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    WND_FIELD_NUMBER: builtins.int
    @property
    def cols(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Expr]: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def wnd(self) -> global___SpWindowSpecExpr: ...
    def __init__(
        self,
        *,
        cols: collections.abc.Iterable[global___Expr] | None = ...,
        src: global___SrcPosition | None = ...,
        wnd: global___SpWindowSpecExpr | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["src", b"src", "wnd", b"wnd"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["cols", b"cols", "src", b"src", "wnd", b"wnd"]) -> None: ...

global___SpWindowSpecOrderBy = SpWindowSpecOrderBy

@typing.final
class SpWindowSpecPartitionBy(google.protobuf.message.Message):
    """window.ir:24"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COLS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    WND_FIELD_NUMBER: builtins.int
    @property
    def cols(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Expr]: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def wnd(self) -> global___SpWindowSpecExpr: ...
    def __init__(
        self,
        *,
        cols: collections.abc.Iterable[global___Expr] | None = ...,
        src: global___SrcPosition | None = ...,
        wnd: global___SpWindowSpecExpr | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["src", b"src", "wnd", b"wnd"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["cols", b"cols", "src", b"src", "wnd", b"wnd"]) -> None: ...

global___SpWindowSpecPartitionBy = SpWindowSpecPartitionBy

@typing.final
class SpWindowSpecRangeBetween(google.protobuf.message.Message):
    """window.ir:28"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    END_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    START_FIELD_NUMBER: builtins.int
    WND_FIELD_NUMBER: builtins.int
    @property
    def end(self) -> global___SpWindowRelativePosition: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def start(self) -> global___SpWindowRelativePosition: ...
    @property
    def wnd(self) -> global___SpWindowSpecExpr: ...
    def __init__(
        self,
        *,
        end: global___SpWindowRelativePosition | None = ...,
        src: global___SrcPosition | None = ...,
        start: global___SpWindowRelativePosition | None = ...,
        wnd: global___SpWindowSpecExpr | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["end", b"end", "src", b"src", "start", b"start", "wnd", b"wnd"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["end", b"end", "src", b"src", "start", b"start", "wnd", b"wnd"]) -> None: ...

global___SpWindowSpecRangeBetween = SpWindowSpecRangeBetween

@typing.final
class SpWindowSpecRowsBetween(google.protobuf.message.Message):
    """window.ir:33"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    END_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    START_FIELD_NUMBER: builtins.int
    WND_FIELD_NUMBER: builtins.int
    @property
    def end(self) -> global___SpWindowRelativePosition: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def start(self) -> global___SpWindowRelativePosition: ...
    @property
    def wnd(self) -> global___SpWindowSpecExpr: ...
    def __init__(
        self,
        *,
        end: global___SpWindowRelativePosition | None = ...,
        src: global___SrcPosition | None = ...,
        start: global___SpWindowRelativePosition | None = ...,
        wnd: global___SpWindowSpecExpr | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["end", b"end", "src", b"src", "start", b"start", "wnd", b"wnd"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["end", b"end", "src", b"src", "start", b"start", "wnd", b"wnd"]) -> None: ...

global___SpWindowSpecRowsBetween = SpWindowSpecRowsBetween

@typing.final
class SpWriteCopyIntoLocation(google.protobuf.message.Message):
    """dataframe-io.ir:135"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BLOCK_FIELD_NUMBER: builtins.int
    COPY_OPTIONS_FIELD_NUMBER: builtins.int
    FILE_FORMAT_NAME_FIELD_NUMBER: builtins.int
    FILE_FORMAT_TYPE_FIELD_NUMBER: builtins.int
    FORMAT_TYPE_OPTIONS_FIELD_NUMBER: builtins.int
    HEADER_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    LOCATION_FIELD_NUMBER: builtins.int
    PARTITION_BY_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    STATEMENT_PARAMS_FIELD_NUMBER: builtins.int
    block: builtins.bool
    header: builtins.bool
    location: builtins.str
    @property
    def copy_options(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_Expr]: ...
    @property
    def file_format_name(self) -> google.protobuf.wrappers_pb2.StringValue: ...
    @property
    def file_format_type(self) -> google.protobuf.wrappers_pb2.StringValue: ...
    @property
    def format_type_options(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    @property
    def id(self) -> global___VarId: ...
    @property
    def partition_by(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def statement_params(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    def __init__(
        self,
        *,
        block: builtins.bool = ...,
        copy_options: collections.abc.Iterable[global___Tuple_String_Expr] | None = ...,
        file_format_name: google.protobuf.wrappers_pb2.StringValue | None = ...,
        file_format_type: google.protobuf.wrappers_pb2.StringValue | None = ...,
        format_type_options: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
        header: builtins.bool = ...,
        id: global___VarId | None = ...,
        location: builtins.str = ...,
        partition_by: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
        statement_params: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["file_format_name", b"file_format_name", "file_format_type", b"file_format_type", "id", b"id", "partition_by", b"partition_by", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["block", b"block", "copy_options", b"copy_options", "file_format_name", b"file_format_name", "file_format_type", b"file_format_type", "format_type_options", b"format_type_options", "header", b"header", "id", b"id", "location", b"location", "partition_by", b"partition_by", "src", b"src", "statement_params", b"statement_params"]) -> None: ...

global___SpWriteCopyIntoLocation = SpWriteCopyIntoLocation

@typing.final
class SpWriteCsv(google.protobuf.message.Message):
    """dataframe-io.ir:102"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BLOCK_FIELD_NUMBER: builtins.int
    COPY_OPTIONS_FIELD_NUMBER: builtins.int
    FORMAT_TYPE_OPTIONS_FIELD_NUMBER: builtins.int
    HEADER_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    LOCATION_FIELD_NUMBER: builtins.int
    PARTITION_BY_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    STATEMENT_PARAMS_FIELD_NUMBER: builtins.int
    block: builtins.bool
    header: builtins.bool
    location: builtins.str
    @property
    def copy_options(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_Expr]: ...
    @property
    def format_type_options(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    @property
    def id(self) -> global___VarId: ...
    @property
    def partition_by(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def statement_params(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    def __init__(
        self,
        *,
        block: builtins.bool = ...,
        copy_options: collections.abc.Iterable[global___Tuple_String_Expr] | None = ...,
        format_type_options: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
        header: builtins.bool = ...,
        id: global___VarId | None = ...,
        location: builtins.str = ...,
        partition_by: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
        statement_params: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["id", b"id", "partition_by", b"partition_by", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["block", b"block", "copy_options", b"copy_options", "format_type_options", b"format_type_options", "header", b"header", "id", b"id", "location", b"location", "partition_by", b"partition_by", "src", b"src", "statement_params", b"statement_params"]) -> None: ...

global___SpWriteCsv = SpWriteCsv

@typing.final
class SpWriteFile(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SP_WRITE_COPY_INTO_LOCATION_FIELD_NUMBER: builtins.int
    SP_WRITE_CSV_FIELD_NUMBER: builtins.int
    SP_WRITE_JSON_FIELD_NUMBER: builtins.int
    SP_WRITE_PARQUET_FIELD_NUMBER: builtins.int
    @property
    def sp_write_copy_into_location(self) -> global___SpWriteCopyIntoLocation: ...
    @property
    def sp_write_csv(self) -> global___SpWriteCsv: ...
    @property
    def sp_write_json(self) -> global___SpWriteJson: ...
    @property
    def sp_write_parquet(self) -> global___SpWriteParquet: ...
    def __init__(
        self,
        *,
        sp_write_copy_into_location: global___SpWriteCopyIntoLocation | None = ...,
        sp_write_csv: global___SpWriteCsv | None = ...,
        sp_write_json: global___SpWriteJson | None = ...,
        sp_write_parquet: global___SpWriteParquet | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["sp_write_copy_into_location", b"sp_write_copy_into_location", "sp_write_csv", b"sp_write_csv", "sp_write_json", b"sp_write_json", "sp_write_parquet", b"sp_write_parquet", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["sp_write_copy_into_location", b"sp_write_copy_into_location", "sp_write_csv", b"sp_write_csv", "sp_write_json", b"sp_write_json", "sp_write_parquet", b"sp_write_parquet", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["sp_write_copy_into_location", "sp_write_csv", "sp_write_json", "sp_write_parquet"] | None: ...

global___SpWriteFile = SpWriteFile

@typing.final
class SpWriteJson(google.protobuf.message.Message):
    """dataframe-io.ir:106"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BLOCK_FIELD_NUMBER: builtins.int
    COPY_OPTIONS_FIELD_NUMBER: builtins.int
    FORMAT_TYPE_OPTIONS_FIELD_NUMBER: builtins.int
    HEADER_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    LOCATION_FIELD_NUMBER: builtins.int
    PARTITION_BY_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    STATEMENT_PARAMS_FIELD_NUMBER: builtins.int
    block: builtins.bool
    header: builtins.bool
    location: builtins.str
    @property
    def copy_options(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_Expr]: ...
    @property
    def format_type_options(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    @property
    def id(self) -> global___VarId: ...
    @property
    def partition_by(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def statement_params(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    def __init__(
        self,
        *,
        block: builtins.bool = ...,
        copy_options: collections.abc.Iterable[global___Tuple_String_Expr] | None = ...,
        format_type_options: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
        header: builtins.bool = ...,
        id: global___VarId | None = ...,
        location: builtins.str = ...,
        partition_by: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
        statement_params: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["id", b"id", "partition_by", b"partition_by", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["block", b"block", "copy_options", b"copy_options", "format_type_options", b"format_type_options", "header", b"header", "id", b"id", "location", b"location", "partition_by", b"partition_by", "src", b"src", "statement_params", b"statement_params"]) -> None: ...

global___SpWriteJson = SpWriteJson

@typing.final
class SpWritePandas(google.protobuf.message.Message):
    """dataframe.ir:58"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    AUTO_CREATE_TABLE_FIELD_NUMBER: builtins.int
    CHUNK_SIZE_FIELD_NUMBER: builtins.int
    COMPRESSION_FIELD_NUMBER: builtins.int
    CREATE_TEMP_TABLE_FIELD_NUMBER: builtins.int
    DF_FIELD_NUMBER: builtins.int
    KWARGS_FIELD_NUMBER: builtins.int
    ON_ERROR_FIELD_NUMBER: builtins.int
    OVERWRITE_FIELD_NUMBER: builtins.int
    PARALLEL_FIELD_NUMBER: builtins.int
    QUOTE_IDENTIFIERS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    TABLE_NAME_FIELD_NUMBER: builtins.int
    TABLE_TYPE_FIELD_NUMBER: builtins.int
    auto_create_table: builtins.bool
    compression: builtins.str
    create_temp_table: builtins.bool
    on_error: builtins.str
    overwrite: builtins.bool
    parallel: builtins.int
    quote_identifiers: builtins.bool
    table_type: builtins.str
    @property
    def chunk_size(self) -> google.protobuf.wrappers_pb2.Int64Value: ...
    @property
    def df(self) -> global___SpDataframeData: ...
    @property
    def kwargs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_Expr]: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def table_name(self) -> global___SpNameRef: ...
    def __init__(
        self,
        *,
        auto_create_table: builtins.bool = ...,
        chunk_size: google.protobuf.wrappers_pb2.Int64Value | None = ...,
        compression: builtins.str = ...,
        create_temp_table: builtins.bool = ...,
        df: global___SpDataframeData | None = ...,
        kwargs: collections.abc.Iterable[global___Tuple_String_Expr] | None = ...,
        on_error: builtins.str = ...,
        overwrite: builtins.bool = ...,
        parallel: builtins.int = ...,
        quote_identifiers: builtins.bool = ...,
        src: global___SrcPosition | None = ...,
        table_name: global___SpNameRef | None = ...,
        table_type: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["chunk_size", b"chunk_size", "df", b"df", "src", b"src", "table_name", b"table_name"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["auto_create_table", b"auto_create_table", "chunk_size", b"chunk_size", "compression", b"compression", "create_temp_table", b"create_temp_table", "df", b"df", "kwargs", b"kwargs", "on_error", b"on_error", "overwrite", b"overwrite", "parallel", b"parallel", "quote_identifiers", b"quote_identifiers", "src", b"src", "table_name", b"table_name", "table_type", b"table_type"]) -> None: ...

global___SpWritePandas = SpWritePandas

@typing.final
class SpWriteParquet(google.protobuf.message.Message):
    """dataframe-io.ir:110"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BLOCK_FIELD_NUMBER: builtins.int
    COPY_OPTIONS_FIELD_NUMBER: builtins.int
    FORMAT_TYPE_OPTIONS_FIELD_NUMBER: builtins.int
    HEADER_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    LOCATION_FIELD_NUMBER: builtins.int
    PARTITION_BY_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    STATEMENT_PARAMS_FIELD_NUMBER: builtins.int
    block: builtins.bool
    header: builtins.bool
    location: builtins.str
    @property
    def copy_options(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_Expr]: ...
    @property
    def format_type_options(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    @property
    def id(self) -> global___VarId: ...
    @property
    def partition_by(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def statement_params(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    def __init__(
        self,
        *,
        block: builtins.bool = ...,
        copy_options: collections.abc.Iterable[global___Tuple_String_Expr] | None = ...,
        format_type_options: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
        header: builtins.bool = ...,
        id: global___VarId | None = ...,
        location: builtins.str = ...,
        partition_by: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
        statement_params: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["id", b"id", "partition_by", b"partition_by", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["block", b"block", "copy_options", b"copy_options", "format_type_options", b"format_type_options", "header", b"header", "id", b"id", "location", b"location", "partition_by", b"partition_by", "src", b"src", "statement_params", b"statement_params"]) -> None: ...

global___SpWriteParquet = SpWriteParquet

@typing.final
class SpWriteTable(google.protobuf.message.Message):
    """dataframe-io.ir:114"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BLOCK_FIELD_NUMBER: builtins.int
    CHANGE_TRACKING_FIELD_NUMBER: builtins.int
    CLUSTERING_KEYS_FIELD_NUMBER: builtins.int
    COLUMN_ORDER_FIELD_NUMBER: builtins.int
    COMMENT_FIELD_NUMBER: builtins.int
    COPY_GRANTS_FIELD_NUMBER: builtins.int
    CREATE_TEMP_TABLE_FIELD_NUMBER: builtins.int
    DATA_RETENTION_TIME_FIELD_NUMBER: builtins.int
    ENABLE_SCHEMA_EVOLUTION_FIELD_NUMBER: builtins.int
    ICEBERG_CONFIG_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    MAX_DATA_EXTENSION_TIME_FIELD_NUMBER: builtins.int
    MODE_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    STATEMENT_PARAMS_FIELD_NUMBER: builtins.int
    TABLE_NAME_FIELD_NUMBER: builtins.int
    TABLE_TYPE_FIELD_NUMBER: builtins.int
    block: builtins.bool
    column_order: builtins.str
    copy_grants: builtins.bool
    create_temp_table: builtins.bool
    table_type: builtins.str
    @property
    def change_tracking(self) -> google.protobuf.wrappers_pb2.BoolValue: ...
    @property
    def clustering_keys(self) -> global___List_Expr: ...
    @property
    def comment(self) -> google.protobuf.wrappers_pb2.StringValue: ...
    @property
    def data_retention_time(self) -> google.protobuf.wrappers_pb2.Int64Value: ...
    @property
    def enable_schema_evolution(self) -> google.protobuf.wrappers_pb2.BoolValue: ...
    @property
    def iceberg_config(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    @property
    def id(self) -> global___VarId: ...
    @property
    def max_data_extension_time(self) -> google.protobuf.wrappers_pb2.Int64Value: ...
    @property
    def mode(self) -> global___SpSaveMode: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def statement_params(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    @property
    def table_name(self) -> global___SpNameRef: ...
    def __init__(
        self,
        *,
        block: builtins.bool = ...,
        change_tracking: google.protobuf.wrappers_pb2.BoolValue | None = ...,
        clustering_keys: global___List_Expr | None = ...,
        column_order: builtins.str = ...,
        comment: google.protobuf.wrappers_pb2.StringValue | None = ...,
        copy_grants: builtins.bool = ...,
        create_temp_table: builtins.bool = ...,
        data_retention_time: google.protobuf.wrappers_pb2.Int64Value | None = ...,
        enable_schema_evolution: google.protobuf.wrappers_pb2.BoolValue | None = ...,
        iceberg_config: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
        id: global___VarId | None = ...,
        max_data_extension_time: google.protobuf.wrappers_pb2.Int64Value | None = ...,
        mode: global___SpSaveMode | None = ...,
        src: global___SrcPosition | None = ...,
        statement_params: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
        table_name: global___SpNameRef | None = ...,
        table_type: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["change_tracking", b"change_tracking", "clustering_keys", b"clustering_keys", "comment", b"comment", "data_retention_time", b"data_retention_time", "enable_schema_evolution", b"enable_schema_evolution", "id", b"id", "max_data_extension_time", b"max_data_extension_time", "mode", b"mode", "src", b"src", "table_name", b"table_name"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["block", b"block", "change_tracking", b"change_tracking", "clustering_keys", b"clustering_keys", "column_order", b"column_order", "comment", b"comment", "copy_grants", b"copy_grants", "create_temp_table", b"create_temp_table", "data_retention_time", b"data_retention_time", "enable_schema_evolution", b"enable_schema_evolution", "iceberg_config", b"iceberg_config", "id", b"id", "max_data_extension_time", b"max_data_extension_time", "mode", b"mode", "src", b"src", "statement_params", b"statement_params", "table_name", b"table_name", "table_type", b"table_type"]) -> None: ...

global___SpWriteTable = SpWriteTable

@typing.final
class Stmt(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ASSIGN_FIELD_NUMBER: builtins.int
    EVAL_FIELD_NUMBER: builtins.int
    EXTENSION_STMT_FIELD_NUMBER: builtins.int
    @property
    def assign(self) -> global___Assign: ...
    @property
    def eval(self) -> global___Eval: ...
    @property
    def extension_stmt(self) -> global___ExtensionStmt: ...
    def __init__(
        self,
        *,
        assign: global___Assign | None = ...,
        eval: global___Eval | None = ...,
        extension_stmt: global___ExtensionStmt | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["assign", b"assign", "eval", b"eval", "extension_stmt", b"extension_stmt", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["assign", b"assign", "eval", b"eval", "extension_stmt", b"extension_stmt", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["assign", "eval", "extension_stmt"] | None: ...

global___Stmt = Stmt

@typing.final
class StoredProcedure(google.protobuf.message.Message):
    """fn.ir:40"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COMMENT_FIELD_NUMBER: builtins.int
    EXECUTE_AS_FIELD_NUMBER: builtins.int
    EXTERNAL_ACCESS_INTEGRATIONS_FIELD_NUMBER: builtins.int
    FUNC_FIELD_NUMBER: builtins.int
    IF_NOT_EXISTS_FIELD_NUMBER: builtins.int
    IMPORTS_FIELD_NUMBER: builtins.int
    INPUT_TYPES_FIELD_NUMBER: builtins.int
    IS_PERMANENT_FIELD_NUMBER: builtins.int
    KWARGS_FIELD_NUMBER: builtins.int
    LOG_ON_EXCEPTION_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    PACKAGES_FIELD_NUMBER: builtins.int
    PARALLEL_FIELD_NUMBER: builtins.int
    REPLACE_FIELD_NUMBER: builtins.int
    RETURN_TYPE_FIELD_NUMBER: builtins.int
    SECRETS_FIELD_NUMBER: builtins.int
    SOURCE_CODE_DISPLAY_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    STAGE_LOCATION_FIELD_NUMBER: builtins.int
    STATEMENT_PARAMS_FIELD_NUMBER: builtins.int
    STRICT_FIELD_NUMBER: builtins.int
    execute_as: builtins.str
    if_not_exists: builtins.bool
    is_permanent: builtins.bool
    parallel: builtins.int
    replace: builtins.bool
    source_code_display: builtins.bool
    stage_location: builtins.str
    strict: builtins.bool
    @property
    def comment(self) -> google.protobuf.wrappers_pb2.StringValue: ...
    @property
    def external_access_integrations(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def func(self) -> global___SpCallable: ...
    @property
    def imports(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SpNameRef]: ...
    @property
    def input_types(self) -> global___List_SpDataType: ...
    @property
    def kwargs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_Expr]: ...
    @property
    def log_on_exception(self) -> google.protobuf.wrappers_pb2.BoolValue: ...
    @property
    def name(self) -> global___SpNameRef: ...
    @property
    def packages(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def return_type(self) -> global___SpDataType: ...
    @property
    def secrets(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def statement_params(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    def __init__(
        self,
        *,
        comment: google.protobuf.wrappers_pb2.StringValue | None = ...,
        execute_as: builtins.str = ...,
        external_access_integrations: collections.abc.Iterable[builtins.str] | None = ...,
        func: global___SpCallable | None = ...,
        if_not_exists: builtins.bool = ...,
        imports: collections.abc.Iterable[global___SpNameRef] | None = ...,
        input_types: global___List_SpDataType | None = ...,
        is_permanent: builtins.bool = ...,
        kwargs: collections.abc.Iterable[global___Tuple_String_Expr] | None = ...,
        log_on_exception: google.protobuf.wrappers_pb2.BoolValue | None = ...,
        name: global___SpNameRef | None = ...,
        packages: collections.abc.Iterable[builtins.str] | None = ...,
        parallel: builtins.int = ...,
        replace: builtins.bool = ...,
        return_type: global___SpDataType | None = ...,
        secrets: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
        source_code_display: builtins.bool = ...,
        src: global___SrcPosition | None = ...,
        stage_location: builtins.str = ...,
        statement_params: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
        strict: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["comment", b"comment", "func", b"func", "input_types", b"input_types", "log_on_exception", b"log_on_exception", "name", b"name", "return_type", b"return_type", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["comment", b"comment", "execute_as", b"execute_as", "external_access_integrations", b"external_access_integrations", "func", b"func", "if_not_exists", b"if_not_exists", "imports", b"imports", "input_types", b"input_types", "is_permanent", b"is_permanent", "kwargs", b"kwargs", "log_on_exception", b"log_on_exception", "name", b"name", "packages", b"packages", "parallel", b"parallel", "replace", b"replace", "return_type", b"return_type", "secrets", b"secrets", "source_code_display", b"source_code_display", "src", b"src", "stage_location", b"stage_location", "statement_params", b"statement_params", "strict", b"strict"]) -> None: ...

global___StoredProcedure = StoredProcedure

@typing.final
class StringVal(google.protobuf.message.Message):
    """const.ir:38"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SRC_FIELD_NUMBER: builtins.int
    V_FIELD_NUMBER: builtins.int
    v: builtins.str
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        src: global___SrcPosition | None = ...,
        v: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["src", b"src", "v", b"v"]) -> None: ...

global___StringVal = StringVal

@typing.final
class Sub(google.protobuf.message.Message):
    """op.ir:44"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LHS_FIELD_NUMBER: builtins.int
    RHS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def lhs(self) -> global___Expr: ...
    @property
    def rhs(self) -> global___Expr: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self,
        *,
        lhs: global___Expr | None = ...,
        rhs: global___Expr | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["lhs", b"lhs", "rhs", b"rhs", "src", b"src"]) -> None: ...

global___Sub = Sub

@typing.final
class TruncatedDataframeExpr(google.protobuf.message.Message):
    """dataframe.ir:12"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SELF_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def self(self) -> global___VarId: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self_,  # pyright: ignore[reportSelfClsParameterName]
        *,
        self: global___VarId | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["self", b"self", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["self", b"self", "src", b"src"]) -> None: ...

global___TruncatedDataframeExpr = TruncatedDataframeExpr

@typing.final
class TruncatedExpr(google.protobuf.message.Message):
    """expr.ir:56"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SELF_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def self(self) -> global___VarId: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self_,  # pyright: ignore[reportSelfClsParameterName]
        *,
        self: global___VarId | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["self", b"self", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["self", b"self", "src", b"src"]) -> None: ...

global___TruncatedExpr = TruncatedExpr

@typing.final
class TruncatedRelationalGroupedDataframeExpr(google.protobuf.message.Message):
    """dataframe-grouped.ir:8"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SELF_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    @property
    def self(self) -> global___VarId: ...
    @property
    def src(self) -> global___SrcPosition: ...
    def __init__(
        self_,  # pyright: ignore[reportSelfClsParameterName]
        *,
        self: global___VarId | None = ...,
        src: global___SrcPosition | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["self", b"self", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["self", b"self", "src", b"src"]) -> None: ...

global___TruncatedRelationalGroupedDataframeExpr = TruncatedRelationalGroupedDataframeExpr

@typing.final
class TupleVal(google.protobuf.message.Message):
    """expr.ir:4"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SRC_FIELD_NUMBER: builtins.int
    VS_FIELD_NUMBER: builtins.int
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def vs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Expr]: ...
    def __init__(
        self,
        *,
        src: global___SrcPosition | None = ...,
        vs: collections.abc.Iterable[global___Expr] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["src", b"src", "vs", b"vs"]) -> None: ...

global___TupleVal = TupleVal

@typing.final
class Udaf(google.protobuf.message.Message):
    """fn.ir:115"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COMMENT_FIELD_NUMBER: builtins.int
    EXTERNAL_ACCESS_INTEGRATIONS_FIELD_NUMBER: builtins.int
    HANDLER_FIELD_NUMBER: builtins.int
    IF_NOT_EXISTS_FIELD_NUMBER: builtins.int
    IMMUTABLE_FIELD_NUMBER: builtins.int
    IMPORTS_FIELD_NUMBER: builtins.int
    INPUT_TYPES_FIELD_NUMBER: builtins.int
    IS_PERMANENT_FIELD_NUMBER: builtins.int
    KWARGS_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    PACKAGES_FIELD_NUMBER: builtins.int
    PARALLEL_FIELD_NUMBER: builtins.int
    REPLACE_FIELD_NUMBER: builtins.int
    RETURN_TYPE_FIELD_NUMBER: builtins.int
    SECRETS_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    STAGE_LOCATION_FIELD_NUMBER: builtins.int
    STATEMENT_PARAMS_FIELD_NUMBER: builtins.int
    if_not_exists: builtins.bool
    immutable: builtins.bool
    is_permanent: builtins.bool
    parallel: builtins.int
    replace: builtins.bool
    @property
    def comment(self) -> google.protobuf.wrappers_pb2.StringValue: ...
    @property
    def external_access_integrations(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def handler(self) -> global___SpCallable: ...
    @property
    def imports(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SpNameRef]: ...
    @property
    def input_types(self) -> global___List_SpDataType: ...
    @property
    def kwargs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_Expr]: ...
    @property
    def name(self) -> global___SpNameRef: ...
    @property
    def packages(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def return_type(self) -> global___SpDataType: ...
    @property
    def secrets(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def stage_location(self) -> google.protobuf.wrappers_pb2.StringValue: ...
    @property
    def statement_params(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    def __init__(
        self,
        *,
        comment: google.protobuf.wrappers_pb2.StringValue | None = ...,
        external_access_integrations: collections.abc.Iterable[builtins.str] | None = ...,
        handler: global___SpCallable | None = ...,
        if_not_exists: builtins.bool = ...,
        immutable: builtins.bool = ...,
        imports: collections.abc.Iterable[global___SpNameRef] | None = ...,
        input_types: global___List_SpDataType | None = ...,
        is_permanent: builtins.bool = ...,
        kwargs: collections.abc.Iterable[global___Tuple_String_Expr] | None = ...,
        name: global___SpNameRef | None = ...,
        packages: collections.abc.Iterable[builtins.str] | None = ...,
        parallel: builtins.int = ...,
        replace: builtins.bool = ...,
        return_type: global___SpDataType | None = ...,
        secrets: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
        src: global___SrcPosition | None = ...,
        stage_location: google.protobuf.wrappers_pb2.StringValue | None = ...,
        statement_params: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["comment", b"comment", "handler", b"handler", "input_types", b"input_types", "name", b"name", "return_type", b"return_type", "src", b"src", "stage_location", b"stage_location"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["comment", b"comment", "external_access_integrations", b"external_access_integrations", "handler", b"handler", "if_not_exists", b"if_not_exists", "immutable", b"immutable", "imports", b"imports", "input_types", b"input_types", "is_permanent", b"is_permanent", "kwargs", b"kwargs", "name", b"name", "packages", b"packages", "parallel", b"parallel", "replace", b"replace", "return_type", b"return_type", "secrets", b"secrets", "src", b"src", "stage_location", b"stage_location", "statement_params", b"statement_params"]) -> None: ...

global___Udaf = Udaf

@typing.final
class Udf(google.protobuf.message.Message):
    """fn.ir:63"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COMMENT_FIELD_NUMBER: builtins.int
    EXTERNAL_ACCESS_INTEGRATIONS_FIELD_NUMBER: builtins.int
    FUNC_FIELD_NUMBER: builtins.int
    IF_NOT_EXISTS_FIELD_NUMBER: builtins.int
    IMMUTABLE_FIELD_NUMBER: builtins.int
    IMPORTS_FIELD_NUMBER: builtins.int
    INPUT_TYPES_FIELD_NUMBER: builtins.int
    IS_PERMANENT_FIELD_NUMBER: builtins.int
    KWARGS_FIELD_NUMBER: builtins.int
    MAX_BATCH_SIZE_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    PACKAGES_FIELD_NUMBER: builtins.int
    PARALLEL_FIELD_NUMBER: builtins.int
    REPLACE_FIELD_NUMBER: builtins.int
    RETURN_TYPE_FIELD_NUMBER: builtins.int
    SECRETS_FIELD_NUMBER: builtins.int
    SECURE_FIELD_NUMBER: builtins.int
    SOURCE_CODE_DISPLAY_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    STAGE_LOCATION_FIELD_NUMBER: builtins.int
    STATEMENT_PARAMS_FIELD_NUMBER: builtins.int
    STRICT_FIELD_NUMBER: builtins.int
    if_not_exists: builtins.bool
    immutable: builtins.bool
    is_permanent: builtins.bool
    parallel: builtins.int
    replace: builtins.bool
    secure: builtins.bool
    source_code_display: builtins.bool
    stage_location: builtins.str
    strict: builtins.bool
    @property
    def comment(self) -> google.protobuf.wrappers_pb2.StringValue: ...
    @property
    def external_access_integrations(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def func(self) -> global___SpCallable: ...
    @property
    def imports(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SpNameRef]: ...
    @property
    def input_types(self) -> global___List_SpDataType: ...
    @property
    def kwargs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_Expr]: ...
    @property
    def max_batch_size(self) -> google.protobuf.wrappers_pb2.Int64Value: ...
    @property
    def name(self) -> global___SpNameRef: ...
    @property
    def packages(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def return_type(self) -> global___SpDataType: ...
    @property
    def secrets(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def statement_params(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    def __init__(
        self,
        *,
        comment: google.protobuf.wrappers_pb2.StringValue | None = ...,
        external_access_integrations: collections.abc.Iterable[builtins.str] | None = ...,
        func: global___SpCallable | None = ...,
        if_not_exists: builtins.bool = ...,
        immutable: builtins.bool = ...,
        imports: collections.abc.Iterable[global___SpNameRef] | None = ...,
        input_types: global___List_SpDataType | None = ...,
        is_permanent: builtins.bool = ...,
        kwargs: collections.abc.Iterable[global___Tuple_String_Expr] | None = ...,
        max_batch_size: google.protobuf.wrappers_pb2.Int64Value | None = ...,
        name: global___SpNameRef | None = ...,
        packages: collections.abc.Iterable[builtins.str] | None = ...,
        parallel: builtins.int = ...,
        replace: builtins.bool = ...,
        return_type: global___SpDataType | None = ...,
        secrets: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
        secure: builtins.bool = ...,
        source_code_display: builtins.bool = ...,
        src: global___SrcPosition | None = ...,
        stage_location: builtins.str = ...,
        statement_params: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
        strict: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["comment", b"comment", "func", b"func", "input_types", b"input_types", "max_batch_size", b"max_batch_size", "name", b"name", "return_type", b"return_type", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["comment", b"comment", "external_access_integrations", b"external_access_integrations", "func", b"func", "if_not_exists", b"if_not_exists", "immutable", b"immutable", "imports", b"imports", "input_types", b"input_types", "is_permanent", b"is_permanent", "kwargs", b"kwargs", "max_batch_size", b"max_batch_size", "name", b"name", "packages", b"packages", "parallel", b"parallel", "replace", b"replace", "return_type", b"return_type", "secrets", b"secrets", "secure", b"secure", "source_code_display", b"source_code_display", "src", b"src", "stage_location", b"stage_location", "statement_params", b"statement_params", "strict", b"strict"]) -> None: ...

global___Udf = Udf

@typing.final
class Udtf(google.protobuf.message.Message):
    """fn.ir:92"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COMMENT_FIELD_NUMBER: builtins.int
    EXTERNAL_ACCESS_INTEGRATIONS_FIELD_NUMBER: builtins.int
    HANDLER_FIELD_NUMBER: builtins.int
    IF_NOT_EXISTS_FIELD_NUMBER: builtins.int
    IMMUTABLE_FIELD_NUMBER: builtins.int
    IMPORTS_FIELD_NUMBER: builtins.int
    INPUT_TYPES_FIELD_NUMBER: builtins.int
    IS_PERMANENT_FIELD_NUMBER: builtins.int
    KWARGS_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    OUTPUT_SCHEMA_FIELD_NUMBER: builtins.int
    PACKAGES_FIELD_NUMBER: builtins.int
    PARALLEL_FIELD_NUMBER: builtins.int
    REPLACE_FIELD_NUMBER: builtins.int
    SECRETS_FIELD_NUMBER: builtins.int
    SECURE_FIELD_NUMBER: builtins.int
    SRC_FIELD_NUMBER: builtins.int
    STAGE_LOCATION_FIELD_NUMBER: builtins.int
    STATEMENT_PARAMS_FIELD_NUMBER: builtins.int
    STRICT_FIELD_NUMBER: builtins.int
    if_not_exists: builtins.bool
    immutable: builtins.bool
    is_permanent: builtins.bool
    parallel: builtins.int
    replace: builtins.bool
    secure: builtins.bool
    stage_location: builtins.str
    strict: builtins.bool
    @property
    def comment(self) -> google.protobuf.wrappers_pb2.StringValue: ...
    @property
    def external_access_integrations(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def handler(self) -> global___SpCallable: ...
    @property
    def imports(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SpNameRef]: ...
    @property
    def input_types(self) -> global___List_SpDataType: ...
    @property
    def kwargs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_Expr]: ...
    @property
    def name(self) -> global___SpNameRef: ...
    @property
    def output_schema(self) -> global___UdtfSchema: ...
    @property
    def packages(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def secrets(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    @property
    def src(self) -> global___SrcPosition: ...
    @property
    def statement_params(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Tuple_String_String]: ...
    def __init__(
        self,
        *,
        comment: google.protobuf.wrappers_pb2.StringValue | None = ...,
        external_access_integrations: collections.abc.Iterable[builtins.str] | None = ...,
        handler: global___SpCallable | None = ...,
        if_not_exists: builtins.bool = ...,
        immutable: builtins.bool = ...,
        imports: collections.abc.Iterable[global___SpNameRef] | None = ...,
        input_types: global___List_SpDataType | None = ...,
        is_permanent: builtins.bool = ...,
        kwargs: collections.abc.Iterable[global___Tuple_String_Expr] | None = ...,
        name: global___SpNameRef | None = ...,
        output_schema: global___UdtfSchema | None = ...,
        packages: collections.abc.Iterable[builtins.str] | None = ...,
        parallel: builtins.int = ...,
        replace: builtins.bool = ...,
        secrets: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
        secure: builtins.bool = ...,
        src: global___SrcPosition | None = ...,
        stage_location: builtins.str = ...,
        statement_params: collections.abc.Iterable[global___Tuple_String_String] | None = ...,
        strict: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["comment", b"comment", "handler", b"handler", "input_types", b"input_types", "name", b"name", "output_schema", b"output_schema", "src", b"src"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["comment", b"comment", "external_access_integrations", b"external_access_integrations", "handler", b"handler", "if_not_exists", b"if_not_exists", "immutable", b"immutable", "imports", b"imports", "input_types", b"input_types", "is_permanent", b"is_permanent", "kwargs", b"kwargs", "name", b"name", "output_schema", b"output_schema", "packages", b"packages", "parallel", b"parallel", "replace", b"replace", "secrets", b"secrets", "secure", b"secure", "src", b"src", "stage_location", b"stage_location", "statement_params", b"statement_params", "strict", b"strict"]) -> None: ...

global___Udtf = Udtf

@typing.final
class UnaryOp(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NEG_FIELD_NUMBER: builtins.int
    NOT_FIELD_NUMBER: builtins.int
    @property
    def neg(self) -> global___Neg: ...
    def __init__(
        self,
        *,
        neg: global___Neg | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["neg", b"neg", "not", b"not", "variant", b"variant"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["neg", b"neg", "not", b"not", "variant", b"variant"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["variant", b"variant"]) -> typing.Literal["neg", "not"] | None: ...

global___UnaryOp = UnaryOp
